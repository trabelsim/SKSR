
temp_humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a774  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  0800a908  0800a908  0001a908  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acb8  0800acb8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acc0  0800acc0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acc0  0800acc0  0001acc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acc4  0800acc4  0001acc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800acc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  200001dc  0800aea4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000037c  0800aea4  0002037c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012444  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002360  00000000  00000000  00032650  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001048  00000000  00000000  000349b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f20  00000000  00000000  000359f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000287b9  00000000  00000000  00036918  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d3f9  00000000  00000000  0005f0d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdf16  00000000  00000000  0006c4ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a3e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005258  00000000  00000000  0016a45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a8ec 	.word	0x0800a8ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a8ec 	.word	0x0800a8ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9bd 	b.w	8001024 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f84d 	bl	8000d58 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f840 	bl	8000d58 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f82f 	bl	8000d58 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f821 	bl	8000d58 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b972 	b.w	8001024 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f806 	bl	8000d58 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__udivmoddi4>:
 8000d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d5c:	9e08      	ldr	r6, [sp, #32]
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4688      	mov	r8, r1
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d14b      	bne.n	8000dfe <__udivmoddi4+0xa6>
 8000d66:	428a      	cmp	r2, r1
 8000d68:	4615      	mov	r5, r2
 8000d6a:	d967      	bls.n	8000e3c <__udivmoddi4+0xe4>
 8000d6c:	fab2 f282 	clz	r2, r2
 8000d70:	b14a      	cbz	r2, 8000d86 <__udivmoddi4+0x2e>
 8000d72:	f1c2 0720 	rsb	r7, r2, #32
 8000d76:	fa01 f302 	lsl.w	r3, r1, r2
 8000d7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d7e:	4095      	lsls	r5, r2
 8000d80:	ea47 0803 	orr.w	r8, r7, r3
 8000d84:	4094      	lsls	r4, r2
 8000d86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d8a:	0c23      	lsrs	r3, r4, #16
 8000d8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d90:	fa1f fc85 	uxth.w	ip, r5
 8000d94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x60>
 8000da4:	18eb      	adds	r3, r5, r3
 8000da6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000daa:	f080 811b 	bcs.w	8000fe4 <__udivmoddi4+0x28c>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 8118 	bls.w	8000fe4 <__udivmoddi4+0x28c>
 8000db4:	3f02      	subs	r7, #2
 8000db6:	442b      	add	r3, r5
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dcc:	45a4      	cmp	ip, r4
 8000dce:	d909      	bls.n	8000de4 <__udivmoddi4+0x8c>
 8000dd0:	192c      	adds	r4, r5, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	f080 8107 	bcs.w	8000fe8 <__udivmoddi4+0x290>
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	f240 8104 	bls.w	8000fe8 <__udivmoddi4+0x290>
 8000de0:	3802      	subs	r0, #2
 8000de2:	442c      	add	r4, r5
 8000de4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	2700      	movs	r7, #0
 8000dee:	b11e      	cbz	r6, 8000df8 <__udivmoddi4+0xa0>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c6 4300 	strd	r4, r3, [r6]
 8000df8:	4639      	mov	r1, r7
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xbe>
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	f000 80eb 	beq.w	8000fde <__udivmoddi4+0x286>
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e0e:	4638      	mov	r0, r7
 8000e10:	4639      	mov	r1, r7
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f783 	clz	r7, r3
 8000e1a:	2f00      	cmp	r7, #0
 8000e1c:	d147      	bne.n	8000eae <__udivmoddi4+0x156>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd0>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80fa 	bhi.w	800101c <__udivmoddi4+0x2c4>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	4698      	mov	r8, r3
 8000e32:	2e00      	cmp	r6, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa0>
 8000e36:	e9c6 4800 	strd	r4, r8, [r6]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xe8>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 808f 	bne.w	8000f68 <__udivmoddi4+0x210>
 8000e4a:	1b49      	subs	r1, r1, r5
 8000e4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e50:	fa1f f885 	uxth.w	r8, r5
 8000e54:	2701      	movs	r7, #1
 8000e56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e5a:	0c23      	lsrs	r3, r4, #16
 8000e5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e64:	fb08 f10c 	mul.w	r1, r8, ip
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x124>
 8000e6c:	18eb      	adds	r3, r5, r3
 8000e6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x122>
 8000e74:	4299      	cmp	r1, r3
 8000e76:	f200 80cd 	bhi.w	8001014 <__udivmoddi4+0x2bc>
 8000e7a:	4684      	mov	ip, r0
 8000e7c:	1a59      	subs	r1, r3, r1
 8000e7e:	b2a3      	uxth	r3, r4
 8000e80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e8c:	fb08 f800 	mul.w	r8, r8, r0
 8000e90:	45a0      	cmp	r8, r4
 8000e92:	d907      	bls.n	8000ea4 <__udivmoddi4+0x14c>
 8000e94:	192c      	adds	r4, r5, r4
 8000e96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x14a>
 8000e9c:	45a0      	cmp	r8, r4
 8000e9e:	f200 80b6 	bhi.w	800100e <__udivmoddi4+0x2b6>
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	eba4 0408 	sub.w	r4, r4, r8
 8000ea8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eac:	e79f      	b.n	8000dee <__udivmoddi4+0x96>
 8000eae:	f1c7 0c20 	rsb	ip, r7, #32
 8000eb2:	40bb      	lsls	r3, r7
 8000eb4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000eb8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ebc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ec0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ec4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ec8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ecc:	4325      	orrs	r5, r4
 8000ece:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ed2:	0c2c      	lsrs	r4, r5, #16
 8000ed4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ed8:	fa1f fa8e 	uxth.w	sl, lr
 8000edc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ee0:	fb09 f40a 	mul.w	r4, r9, sl
 8000ee4:	429c      	cmp	r4, r3
 8000ee6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eea:	fa00 f107 	lsl.w	r1, r0, r7
 8000eee:	d90b      	bls.n	8000f08 <__udivmoddi4+0x1b0>
 8000ef0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ef8:	f080 8087 	bcs.w	800100a <__udivmoddi4+0x2b2>
 8000efc:	429c      	cmp	r4, r3
 8000efe:	f240 8084 	bls.w	800100a <__udivmoddi4+0x2b2>
 8000f02:	f1a9 0902 	sub.w	r9, r9, #2
 8000f06:	4473      	add	r3, lr
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	b2ad      	uxth	r5, r5
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f1c:	45a2      	cmp	sl, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1da>
 8000f20:	eb1e 0404 	adds.w	r4, lr, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	d26b      	bcs.n	8001002 <__udivmoddi4+0x2aa>
 8000f2a:	45a2      	cmp	sl, r4
 8000f2c:	d969      	bls.n	8001002 <__udivmoddi4+0x2aa>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	4474      	add	r4, lr
 8000f32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	eba4 040a 	sub.w	r4, r4, sl
 8000f3e:	454c      	cmp	r4, r9
 8000f40:	46c2      	mov	sl, r8
 8000f42:	464b      	mov	r3, r9
 8000f44:	d354      	bcc.n	8000ff0 <__udivmoddi4+0x298>
 8000f46:	d051      	beq.n	8000fec <__udivmoddi4+0x294>
 8000f48:	2e00      	cmp	r6, #0
 8000f4a:	d069      	beq.n	8001020 <__udivmoddi4+0x2c8>
 8000f4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f50:	eb64 0403 	sbc.w	r4, r4, r3
 8000f54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f58:	40fd      	lsrs	r5, r7
 8000f5a:	40fc      	lsrs	r4, r7
 8000f5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f60:	e9c6 5400 	strd	r5, r4, [r6]
 8000f64:	2700      	movs	r7, #0
 8000f66:	e747      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f70:	4095      	lsls	r5, r2
 8000f72:	fa01 f002 	lsl.w	r0, r1, r2
 8000f76:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	4338      	orrs	r0, r7
 8000f80:	0c01      	lsrs	r1, r0, #16
 8000f82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f86:	fa1f f885 	uxth.w	r8, r5
 8000f8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f92:	fb07 f308 	mul.w	r3, r7, r8
 8000f96:	428b      	cmp	r3, r1
 8000f98:	fa04 f402 	lsl.w	r4, r4, r2
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x256>
 8000f9e:	1869      	adds	r1, r5, r1
 8000fa0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fa4:	d22f      	bcs.n	8001006 <__udivmoddi4+0x2ae>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d92d      	bls.n	8001006 <__udivmoddi4+0x2ae>
 8000faa:	3f02      	subs	r7, #2
 8000fac:	4429      	add	r1, r5
 8000fae:	1acb      	subs	r3, r1, r3
 8000fb0:	b281      	uxth	r1, r0
 8000fb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb00 f308 	mul.w	r3, r0, r8
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d907      	bls.n	8000fd6 <__udivmoddi4+0x27e>
 8000fc6:	1869      	adds	r1, r5, r1
 8000fc8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fcc:	d217      	bcs.n	8000ffe <__udivmoddi4+0x2a6>
 8000fce:	428b      	cmp	r3, r1
 8000fd0:	d915      	bls.n	8000ffe <__udivmoddi4+0x2a6>
 8000fd2:	3802      	subs	r0, #2
 8000fd4:	4429      	add	r1, r5
 8000fd6:	1ac9      	subs	r1, r1, r3
 8000fd8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fdc:	e73b      	b.n	8000e56 <__udivmoddi4+0xfe>
 8000fde:	4637      	mov	r7, r6
 8000fe0:	4630      	mov	r0, r6
 8000fe2:	e709      	b.n	8000df8 <__udivmoddi4+0xa0>
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	e6e7      	b.n	8000db8 <__udivmoddi4+0x60>
 8000fe8:	4618      	mov	r0, r3
 8000fea:	e6fb      	b.n	8000de4 <__udivmoddi4+0x8c>
 8000fec:	4541      	cmp	r1, r8
 8000fee:	d2ab      	bcs.n	8000f48 <__udivmoddi4+0x1f0>
 8000ff0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ff4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ff8:	3801      	subs	r0, #1
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	e7a4      	b.n	8000f48 <__udivmoddi4+0x1f0>
 8000ffe:	4660      	mov	r0, ip
 8001000:	e7e9      	b.n	8000fd6 <__udivmoddi4+0x27e>
 8001002:	4618      	mov	r0, r3
 8001004:	e795      	b.n	8000f32 <__udivmoddi4+0x1da>
 8001006:	4667      	mov	r7, ip
 8001008:	e7d1      	b.n	8000fae <__udivmoddi4+0x256>
 800100a:	4681      	mov	r9, r0
 800100c:	e77c      	b.n	8000f08 <__udivmoddi4+0x1b0>
 800100e:	3802      	subs	r0, #2
 8001010:	442c      	add	r4, r5
 8001012:	e747      	b.n	8000ea4 <__udivmoddi4+0x14c>
 8001014:	f1ac 0c02 	sub.w	ip, ip, #2
 8001018:	442b      	add	r3, r5
 800101a:	e72f      	b.n	8000e7c <__udivmoddi4+0x124>
 800101c:	4638      	mov	r0, r7
 800101e:	e708      	b.n	8000e32 <__udivmoddi4+0xda>
 8001020:	4637      	mov	r7, r6
 8001022:	e6e9      	b.n	8000df8 <__udivmoddi4+0xa0>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2203      	movs	r2, #3
 8001034:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2200      	movs	r2, #0
 800103a:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2203      	movs	r2, #3
 8001040:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2203      	movs	r2, #3
 800104c:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2203      	movs	r2, #3
 8001052:	715a      	strb	r2, [r3, #5]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800107a:	7afb      	ldrb	r3, [r7, #11]
 800107c:	b29a      	uxth	r2, r3
 800107e:	8af9      	ldrh	r1, [r7, #22]
 8001080:	f241 3388 	movw	r3, #5000	; 0x1388
 8001084:	9302      	str	r3, [sp, #8]
 8001086:	2302      	movs	r3, #2
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	f003 f939 	bl	8004308 <HAL_I2C_Mem_Read>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10b      	bne.n	80010b4 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 800109c:	7d7b      	ldrb	r3, [r7, #21]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7d3b      	ldrb	r3, [r7, #20]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	b29a      	uxth	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	801a      	strh	r2, [r3, #0]
		return true;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e000      	b.n	80010b6 <read_register16+0x56>
	} else
		return false;
 80010b4:	2300      	movs	r3, #0

}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3718      	adds	r7, #24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 80010be:	b590      	push	{r4, r7, lr}
 80010c0:	b08b      	sub	sp, #44	; 0x2c
 80010c2:	af04      	add	r7, sp, #16
 80010c4:	60f8      	str	r0, [r7, #12]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	72fb      	strb	r3, [r7, #11]
 80010ce:	4613      	mov	r3, r2
 80010d0:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	b29c      	uxth	r4, r3
 80010e2:	7abb      	ldrb	r3, [r7, #10]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	8af9      	ldrh	r1, [r7, #22]
 80010e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80010ec:	9202      	str	r2, [sp, #8]
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	4622      	mov	r2, r4
 80010f8:	f003 f906 	bl	8004308 <HAL_I2C_Mem_Read>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <read_data+0x48>
		return 0;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <read_data+0x4a>
	else
		return 1;
 8001106:	2301      	movs	r3, #1

}
 8001108:	4618      	mov	r0, r3
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}

08001110 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	461a      	mov	r2, r3
 800111c:	2188      	movs	r1, #136	; 0x88
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff9e 	bl	8001060 <read_register16>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06f      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3302      	adds	r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	218a      	movs	r1, #138	; 0x8a
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff ff94 	bl	8001060 <read_register16>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d065      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3304      	adds	r3, #4
 8001142:	461a      	mov	r2, r3
 8001144:	218c      	movs	r1, #140	; 0x8c
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ff8a 	bl	8001060 <read_register16>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d05b      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3306      	adds	r3, #6
 8001156:	461a      	mov	r2, r3
 8001158:	218e      	movs	r1, #142	; 0x8e
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ff80 	bl	8001060 <read_register16>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d051      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3308      	adds	r3, #8
 800116a:	461a      	mov	r2, r3
 800116c:	2190      	movs	r1, #144	; 0x90
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff76 	bl	8001060 <read_register16>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d047      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	330a      	adds	r3, #10
 800117e:	461a      	mov	r2, r3
 8001180:	2192      	movs	r1, #146	; 0x92
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff6c 	bl	8001060 <read_register16>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d03d      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	330c      	adds	r3, #12
 8001192:	461a      	mov	r2, r3
 8001194:	2194      	movs	r1, #148	; 0x94
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff62 	bl	8001060 <read_register16>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d033      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	330e      	adds	r3, #14
 80011a6:	461a      	mov	r2, r3
 80011a8:	2196      	movs	r1, #150	; 0x96
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ff58 	bl	8001060 <read_register16>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d029      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3310      	adds	r3, #16
 80011ba:	461a      	mov	r2, r3
 80011bc:	2198      	movs	r1, #152	; 0x98
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff ff4e 	bl	8001060 <read_register16>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d01f      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3312      	adds	r3, #18
 80011ce:	461a      	mov	r2, r3
 80011d0:	219a      	movs	r1, #154	; 0x9a
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff44 	bl	8001060 <read_register16>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d015      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3314      	adds	r3, #20
 80011e2:	461a      	mov	r2, r3
 80011e4:	219c      	movs	r1, #156	; 0x9c
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff3a 	bl	8001060 <read_register16>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d00b      	beq.n	800120a <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80011f6:	461a      	mov	r2, r3
 80011f8:	219e      	movs	r1, #158	; 0x9e
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ff30 	bl	8001060 <read_register16>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <read_calibration_data+0xfa>

		return true;
 8001206:	2301      	movs	r3, #1
 8001208:	e000      	b.n	800120c <read_calibration_data+0xfc>
	}

	return false;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f103 0218 	add.w	r2, r3, #24
 8001222:	2301      	movs	r3, #1
 8001224:	21a1      	movs	r1, #161	; 0xa1
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff49 	bl	80010be <read_data>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d14b      	bne.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	331a      	adds	r3, #26
 8001236:	461a      	mov	r2, r3
 8001238:	21e1      	movs	r1, #225	; 0xe1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff10 	bl	8001060 <read_register16>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d041      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f103 021c 	add.w	r2, r3, #28
 800124c:	2301      	movs	r3, #1
 800124e:	21e3      	movs	r1, #227	; 0xe3
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f7ff ff34 	bl	80010be <read_data>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d136      	bne.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800125c:	f107 030e 	add.w	r3, r7, #14
 8001260:	461a      	mov	r2, r3
 8001262:	21e4      	movs	r1, #228	; 0xe4
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fefb 	bl	8001060 <read_register16>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d02c      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	461a      	mov	r2, r3
 8001276:	21e5      	movs	r1, #229	; 0xe5
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff fef1 	bl	8001060 <read_register16>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d022      	beq.n	80012ca <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f103 0222 	add.w	r2, r3, #34	; 0x22
 800128a:	2301      	movs	r3, #1
 800128c:	21e7      	movs	r1, #231	; 0xe7
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff ff15 	bl	80010be <read_data>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d117      	bne.n	80012ca <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 800129a:	89fb      	ldrh	r3, [r7, #14]
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	b21b      	sxth	r3, r3
 80012a0:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	89fb      	ldrh	r3, [r7, #14]
 80012a8:	121b      	asrs	r3, r3, #8
 80012aa:	b21b      	sxth	r3, r3
 80012ac:	f003 030f 	and.w	r3, r3, #15
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80012ba:	89bb      	ldrh	r3, [r7, #12]
 80012bc:	091b      	lsrs	r3, r3, #4
 80012be:	b29b      	uxth	r3, r3
 80012c0:	b21a      	sxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	841a      	strh	r2, [r3, #32]

		return true;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <read_hum_calibration_data+0xb8>
	}

	return false;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af04      	add	r7, sp, #16
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
 80012e0:	4613      	mov	r3, r2
 80012e2:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	f242 7310 	movw	r3, #10000	; 0x2710
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	1cbb      	adds	r3, r7, #2
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	f002 feeb 	bl	80040e0 <HAL_I2C_Mem_Write>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <write_register8+0x40>
		return false;
 8001310:	2300      	movs	r3, #0
 8001312:	e000      	b.n	8001316 <write_register8+0x42>
	else
		return true;
 8001314:	2301      	movs	r3, #1
}
 8001316:	4618      	mov	r0, r3
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800132c:	2b76      	cmp	r3, #118	; 0x76
 800132e:	d005      	beq.n	800133c <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001334:	2b77      	cmp	r3, #119	; 0x77
 8001336:	d001      	beq.n	800133c <bmp280_init+0x1e>

		return false;
 8001338:	2300      	movs	r3, #0
 800133a:	e099      	b.n	8001470 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001342:	2301      	movs	r3, #1
 8001344:	21d0      	movs	r1, #208	; 0xd0
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff feb9 	bl	80010be <read_data>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <bmp280_init+0x38>
		return false;
 8001352:	2300      	movs	r3, #0
 8001354:	e08c      	b.n	8001470 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800135c:	2b58      	cmp	r3, #88	; 0x58
 800135e:	d006      	beq.n	800136e <bmp280_init+0x50>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001366:	2b60      	cmp	r3, #96	; 0x60
 8001368:	d001      	beq.n	800136e <bmp280_init+0x50>

		return false;
 800136a:	2300      	movs	r3, #0
 800136c:	e080      	b.n	8001470 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800136e:	22b6      	movs	r2, #182	; 0xb6
 8001370:	21e0      	movs	r1, #224	; 0xe0
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff ffae 	bl	80012d4 <write_register8>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <bmp280_init+0x64>
		return false;
 800137e:	2300      	movs	r3, #0
 8001380:	e076      	b.n	8001470 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001382:	f107 020c 	add.w	r2, r7, #12
 8001386:	2301      	movs	r3, #1
 8001388:	21f3      	movs	r1, #243	; 0xf3
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fe97 	bl	80010be <read_data>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f5      	bne.n	8001382 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1f0      	bne.n	8001382 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feb5 	bl	8001110 <read_calibration_data>
 80013a6:	4603      	mov	r3, r0
 80013a8:	f083 0301 	eor.w	r3, r3, #1
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d100      	bne.n	80013b4 <bmp280_init+0x96>
 80013b2:	e001      	b.n	80013b8 <bmp280_init+0x9a>
		return false;
 80013b4:	2300      	movs	r3, #0
 80013b6:	e05b      	b.n	8001470 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80013be:	2b60      	cmp	r3, #96	; 0x60
 80013c0:	d10a      	bne.n	80013d8 <bmp280_init+0xba>
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff ff26 	bl	8001214 <read_hum_calibration_data>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f083 0301 	eor.w	r3, r3, #1
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <bmp280_init+0xba>
		return false;
 80013d4:	2300      	movs	r3, #0
 80013d6:	e04b      	b.n	8001470 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	795b      	ldrb	r3, [r3, #5]
 80013dc:	015b      	lsls	r3, r3, #5
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	785b      	ldrb	r3, [r3, #1]
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b25b      	sxtb	r3, r3
 80013ec:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	461a      	mov	r2, r3
 80013f2:	21f5      	movs	r1, #245	; 0xf5
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f7ff ff6d 	bl	80012d4 <write_register8>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <bmp280_init+0xe6>
		return false;
 8001400:	2300      	movs	r3, #0
 8001402:	e035      	b.n	8001470 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	78db      	ldrb	r3, [r3, #3]
 8001416:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001418:	b25a      	sxtb	r2, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	789b      	ldrb	r3, [r3, #2]
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4313      	orrs	r3, r2
 8001424:	b25a      	sxtb	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b25b      	sxtb	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001430:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d10d      	bne.n	8001458 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	791b      	ldrb	r3, [r3, #4]
 8001440:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001442:	7b7b      	ldrb	r3, [r7, #13]
 8001444:	461a      	mov	r2, r3
 8001446:	21f2      	movs	r1, #242	; 0xf2
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff43 	bl	80012d4 <write_register8>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <bmp280_init+0x13a>
			return false;
 8001454:	2300      	movs	r3, #0
 8001456:	e00b      	b.n	8001470 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	461a      	mov	r2, r3
 800145c:	21f4      	movs	r1, #244	; 0xf4
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff38 	bl	80012d4 <write_register8>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <bmp280_init+0x150>
		return false;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <bmp280_init+0x152>
	}

	return true;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 8001478:	b480      	push	{r7}
 800147a:	b087      	sub	sp, #28
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	10da      	asrs	r2, r3, #3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001496:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800149a:	12db      	asrs	r3, r3, #11
 800149c:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	111b      	asrs	r3, r3, #4
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	8812      	ldrh	r2, [r2, #0]
 80014a6:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80014a8:	68ba      	ldr	r2, [r7, #8]
 80014aa:	1112      	asrs	r2, r2, #4
 80014ac:	68f9      	ldr	r1, [r7, #12]
 80014ae:	8809      	ldrh	r1, [r1, #0]
 80014b0:	1a52      	subs	r2, r2, r1
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014c2:	139b      	asrs	r3, r3, #14
 80014c4:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	441a      	add	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4613      	mov	r3, r2
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	3380      	adds	r3, #128	; 0x80
 80014dc:	121b      	asrs	r3, r3, #8
}
 80014de:	4618      	mov	r0, r3
 80014e0:	371c      	adds	r7, #28
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr

080014ea <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80014ea:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4619      	mov	r1, r3
 80014fc:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001500:	f5b1 33fa 	subs.w	r3, r1, #128000	; 0x1f400
 8001504:	f142 34ff 	adc.w	r4, r2, #4294967295
 8001508:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	6a3a      	ldr	r2, [r7, #32]
 8001510:	fb02 f203 	mul.w	r2, r2, r3
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	6a39      	ldr	r1, [r7, #32]
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	441a      	add	r2, r3
 800151e:	6a39      	ldr	r1, [r7, #32]
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	fba1 3403 	umull	r3, r4, r1, r3
 8001526:	4422      	add	r2, r4
 8001528:	4614      	mov	r4, r2
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8001530:	b211      	sxth	r1, r2
 8001532:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001536:	fb01 f504 	mul.w	r5, r1, r4
 800153a:	fb03 f002 	mul.w	r0, r3, r2
 800153e:	4428      	add	r0, r5
 8001540:	fba3 3401 	umull	r3, r4, r3, r1
 8001544:	1902      	adds	r2, r0, r4
 8001546:	4614      	mov	r4, r2
 8001548:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800154c:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001556:	b21b      	sxth	r3, r3
 8001558:	ea4f 74e3 	mov.w	r4, r3, asr #31
 800155c:	6a3a      	ldr	r2, [r7, #32]
 800155e:	fb04 f102 	mul.w	r1, r4, r2
 8001562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001564:	fb03 f202 	mul.w	r2, r3, r2
 8001568:	1888      	adds	r0, r1, r2
 800156a:	6a3a      	ldr	r2, [r7, #32]
 800156c:	fba2 1203 	umull	r1, r2, r2, r3
 8001570:	1883      	adds	r3, r0, r2
 8001572:	461a      	mov	r2, r3
 8001574:	f04f 0500 	mov.w	r5, #0
 8001578:	f04f 0600 	mov.w	r6, #0
 800157c:	0456      	lsls	r6, r2, #17
 800157e:	ea46 36d1 	orr.w	r6, r6, r1, lsr #15
 8001582:	044d      	lsls	r5, r1, #17
 8001584:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001588:	186b      	adds	r3, r5, r1
 800158a:	eb46 0402 	adc.w	r4, r6, r2
 800158e:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001598:	b219      	sxth	r1, r3
 800159a:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800159e:	f04f 0500 	mov.w	r5, #0
 80015a2:	f04f 0600 	mov.w	r6, #0
 80015a6:	00ce      	lsls	r6, r1, #3
 80015a8:	2500      	movs	r5, #0
 80015aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80015ae:	186b      	adds	r3, r5, r1
 80015b0:	eb46 0402 	adc.w	r4, r6, r2
 80015b4:	e9c7 3406 	strd	r3, r4, [r7, #24]
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80015b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ba:	6a3a      	ldr	r2, [r7, #32]
 80015bc:	fb02 f203 	mul.w	r2, r2, r3
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	6a39      	ldr	r1, [r7, #32]
 80015c4:	fb01 f303 	mul.w	r3, r1, r3
 80015c8:	441a      	add	r2, r3
 80015ca:	6a39      	ldr	r1, [r7, #32]
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	fba1 3403 	umull	r3, r4, r1, r3
 80015d2:	4422      	add	r2, r4
 80015d4:	4614      	mov	r4, r2
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	f9b2 200a 	ldrsh.w	r2, [r2, #10]
 80015dc:	b211      	sxth	r1, r2
 80015de:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80015e2:	fb01 f504 	mul.w	r5, r1, r4
 80015e6:	fb03 f002 	mul.w	r0, r3, r2
 80015ea:	4428      	add	r0, r5
 80015ec:	fba3 3401 	umull	r3, r4, r3, r1
 80015f0:	1902      	adds	r2, r0, r4
 80015f2:	4614      	mov	r4, r2
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	f04f 0200 	mov.w	r2, #0
 80015fc:	0a19      	lsrs	r1, r3, #8
 80015fe:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8001602:	1222      	asrs	r2, r4, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800160a:	b21b      	sxth	r3, r3
 800160c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001610:	6a38      	ldr	r0, [r7, #32]
 8001612:	fb04 f500 	mul.w	r5, r4, r0
 8001616:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001618:	fb03 f000 	mul.w	r0, r3, r0
 800161c:	4428      	add	r0, r5
 800161e:	6a3d      	ldr	r5, [r7, #32]
 8001620:	fba5 5603 	umull	r5, r6, r5, r3
 8001624:	1983      	adds	r3, r0, r6
 8001626:	461e      	mov	r6, r3
 8001628:	f04f 0b00 	mov.w	fp, #0
 800162c:	f04f 0c00 	mov.w	ip, #0
 8001630:	ea4f 3c06 	mov.w	ip, r6, lsl #12
 8001634:	ea4c 5c15 	orr.w	ip, ip, r5, lsr #20
 8001638:	ea4f 3b05 	mov.w	fp, r5, lsl #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800163c:	eb1b 0301 	adds.w	r3, fp, r1
 8001640:	eb4c 0402 	adc.w	r4, ip, r2
 8001644:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001648:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800164c:	1c19      	adds	r1, r3, #0
 800164e:	f544 4200 	adc.w	r2, r4, #32768	; 0x8000
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	88db      	ldrh	r3, [r3, #6]
 8001656:	b29b      	uxth	r3, r3
 8001658:	f04f 0400 	mov.w	r4, #0
 800165c:	fb03 f502 	mul.w	r5, r3, r2
 8001660:	fb01 f004 	mul.w	r0, r1, r4
 8001664:	4428      	add	r0, r5
 8001666:	fba1 3403 	umull	r3, r4, r1, r3
 800166a:	1902      	adds	r2, r0, r4
 800166c:	4614      	mov	r4, r2
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	f04f 0200 	mov.w	r2, #0
 8001676:	1061      	asrs	r1, r4, #1
 8001678:	17e2      	asrs	r2, r4, #31
 800167a:	e9c7 1208 	strd	r1, r2, [r7, #32]

	if (var1 == 0) {
 800167e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001682:	4323      	orrs	r3, r4
 8001684:	d101      	bne.n	800168a <compensate_pressure+0x1a0>
		return 0;  // avoid exception caused by division by zero
 8001686:	2300      	movs	r3, #0
 8001688:	e0d4      	b.n	8001834 <compensate_pressure+0x34a>
	}

	p = 1048576 - adc_press;
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001690:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8001694:	e9c7 3404 	strd	r3, r4, [r7, #16]
	p = (((p << 31) - var2) * 3125) / var1;
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	ea4f 0963 	mov.w	r9, r3, asr #1
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	ea4f 78c3 	mov.w	r8, r3, lsl #31
 80016a4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80016a8:	4645      	mov	r5, r8
 80016aa:	464e      	mov	r6, r9
 80016ac:	1aed      	subs	r5, r5, r3
 80016ae:	eb66 0604 	sbc.w	r6, r6, r4
 80016b2:	46a8      	mov	r8, r5
 80016b4:	46b1      	mov	r9, r6
 80016b6:	eb18 0308 	adds.w	r3, r8, r8
 80016ba:	eb49 0409 	adc.w	r4, r9, r9
 80016be:	4698      	mov	r8, r3
 80016c0:	46a1      	mov	r9, r4
 80016c2:	eb18 0805 	adds.w	r8, r8, r5
 80016c6:	eb49 0906 	adc.w	r9, r9, r6
 80016ca:	f04f 0100 	mov.w	r1, #0
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	ea4f 1289 	mov.w	r2, r9, lsl #6
 80016d6:	ea42 6298 	orr.w	r2, r2, r8, lsr #26
 80016da:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80016de:	eb18 0801 	adds.w	r8, r8, r1
 80016e2:	eb49 0902 	adc.w	r9, r9, r2
 80016e6:	f04f 0100 	mov.w	r1, #0
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
 80016f2:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 80016f6:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80016fa:	4688      	mov	r8, r1
 80016fc:	4691      	mov	r9, r2
 80016fe:	eb18 0805 	adds.w	r8, r8, r5
 8001702:	eb49 0906 	adc.w	r9, r9, r6
 8001706:	f04f 0100 	mov.w	r1, #0
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8001712:	ea42 7298 	orr.w	r2, r2, r8, lsr #30
 8001716:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800171a:	4688      	mov	r8, r1
 800171c:	4691      	mov	r9, r2
 800171e:	eb18 0005 	adds.w	r0, r8, r5
 8001722:	eb49 0106 	adc.w	r1, r9, r6
 8001726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800172a:	f7ff faad 	bl	8000c88 <__aeabi_ldivmod>
 800172e:	4603      	mov	r3, r0
 8001730:	460c      	mov	r4, r1
 8001732:	e9c7 3404 	strd	r3, r4, [r7, #16]
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800173c:	b219      	sxth	r1, r3
 800173e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8001742:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f04f 0400 	mov.w	r4, #0
 800174e:	0b6b      	lsrs	r3, r5, #13
 8001750:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 8001754:	1374      	asrs	r4, r6, #13
 8001756:	fb03 f502 	mul.w	r5, r3, r2
 800175a:	fb01 f004 	mul.w	r0, r1, r4
 800175e:	4428      	add	r0, r5
 8001760:	fba1 1203 	umull	r1, r2, r1, r3
 8001764:	1883      	adds	r3, r0, r2
 8001766:	461a      	mov	r2, r3
 8001768:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	f04f 0400 	mov.w	r4, #0
 8001774:	0b6b      	lsrs	r3, r5, #13
 8001776:	ea43 43c6 	orr.w	r3, r3, r6, lsl #19
 800177a:	1374      	asrs	r4, r6, #13
 800177c:	fb03 f502 	mul.w	r5, r3, r2
 8001780:	fb01 f004 	mul.w	r0, r1, r4
 8001784:	4428      	add	r0, r5
 8001786:	fba1 1203 	umull	r1, r2, r1, r3
 800178a:	1883      	adds	r3, r0, r2
 800178c:	461a      	mov	r2, r3
 800178e:	f04f 0300 	mov.w	r3, #0
 8001792:	f04f 0400 	mov.w	r4, #0
 8001796:	0e4b      	lsrs	r3, r1, #25
 8001798:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800179c:	1654      	asrs	r4, r2, #25
 800179e:	e9c7 3408 	strd	r3, r4, [r7, #32]
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80017a8:	b21b      	sxth	r3, r3
 80017aa:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	fb04 f102 	mul.w	r1, r4, r2
 80017b4:	697a      	ldr	r2, [r7, #20]
 80017b6:	fb03 f202 	mul.w	r2, r3, r2
 80017ba:	1888      	adds	r0, r1, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	fba2 1203 	umull	r1, r2, r2, r3
 80017c2:	1883      	adds	r3, r0, r2
 80017c4:	461a      	mov	r2, r3
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	f04f 0400 	mov.w	r4, #0
 80017ce:	0ccb      	lsrs	r3, r1, #19
 80017d0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 80017d4:	14d4      	asrs	r4, r2, #19
 80017d6:	e9c7 3406 	strd	r3, r4, [r7, #24]

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80017da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80017de:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017e2:	eb11 0803 	adds.w	r8, r1, r3
 80017e6:	eb42 0904 	adc.w	r9, r2, r4
 80017ea:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017ee:	eb13 0508 	adds.w	r5, r3, r8
 80017f2:	eb44 0609 	adc.w	r6, r4, r9
 80017f6:	f04f 0100 	mov.w	r1, #0
 80017fa:	f04f 0200 	mov.w	r2, #0
 80017fe:	0a29      	lsrs	r1, r5, #8
 8001800:	ea41 6106 	orr.w	r1, r1, r6, lsl #24
 8001804:	1232      	asrs	r2, r6, #8
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800180c:	b21d      	sxth	r5, r3
 800180e:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8001812:	f04f 0800 	mov.w	r8, #0
 8001816:	f04f 0900 	mov.w	r9, #0
 800181a:	ea4f 1906 	mov.w	r9, r6, lsl #4
 800181e:	ea49 7915 	orr.w	r9, r9, r5, lsr #28
 8001822:	ea4f 1805 	mov.w	r8, r5, lsl #4
 8001826:	eb18 0301 	adds.w	r3, r8, r1
 800182a:	eb49 0402 	adc.w	r4, r9, r2
 800182e:	e9c7 3404 	strd	r3, r4, [r7, #16]
	return p;
 8001832:	693b      	ldr	r3, [r7, #16]
}
 8001834:	4618      	mov	r0, r3
 8001836:	3728      	adds	r7, #40	; 0x28
 8001838:	46bd      	mov	sp, r7
 800183a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}

0800183e <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 800183e:	b480      	push	{r7}
 8001840:	b087      	sub	sp, #28
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001850:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	039a      	lsls	r2, r3, #14
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800185c:	051b      	lsls	r3, r3, #20
 800185e:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001866:	4619      	mov	r1, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	fb03 f301 	mul.w	r3, r3, r1
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001874:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 800187c:	4611      	mov	r1, r2
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	fb02 f201 	mul.w	r2, r2, r1
 8001884:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001886:	68f9      	ldr	r1, [r7, #12]
 8001888:	7f09      	ldrb	r1, [r1, #28]
 800188a:	4608      	mov	r0, r1
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	fb01 f100 	mul.w	r1, r1, r0
 8001892:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001894:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001898:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 800189c:	1292      	asrs	r2, r2, #10
 800189e:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80018a2:	68f9      	ldr	r1, [r7, #12]
 80018a4:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80018a8:	fb01 f202 	mul.w	r2, r1, r2
 80018ac:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80018b0:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80018b2:	fb02 f303 	mul.w	r3, r2, r3
 80018b6:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	13db      	asrs	r3, r3, #15
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	13d2      	asrs	r2, r2, #15
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	7e12      	ldrb	r2, [r2, #24]
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 80018d0:	697a      	ldr	r2, [r7, #20]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80018dc:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 80018e4:	bfa8      	it	ge
 80018e6:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 80018ea:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	131b      	asrs	r3, r3, #12
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	371c      	adds	r7, #28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08c      	sub	sp, #48	; 0x30
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
 8001908:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001910:	2b60      	cmp	r3, #96	; 0x60
 8001912:	d007      	beq.n	8001924 <bmp280_read_fixed+0x28>
		if (humidity)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <bmp280_read_fixed+0x24>
			*humidity = 0;
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <bmp280_read_fixed+0x32>
 800192a:	2308      	movs	r3, #8
 800192c:	e000      	b.n	8001930 <bmp280_read_fixed+0x34>
 800192e:	2306      	movs	r3, #6
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001934:	b2db      	uxtb	r3, r3
 8001936:	f107 0218 	add.w	r2, r7, #24
 800193a:	21f7      	movs	r1, #247	; 0xf7
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f7ff fbbe 	bl	80010be <read_data>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <bmp280_read_fixed+0x50>
		return false;
 8001948:	2300      	movs	r3, #0
 800194a:	e038      	b.n	80019be <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 800194c:	7e3b      	ldrb	r3, [r7, #24]
 800194e:	031a      	lsls	r2, r3, #12
 8001950:	7e7b      	ldrb	r3, [r7, #25]
 8001952:	011b      	lsls	r3, r3, #4
 8001954:	4313      	orrs	r3, r2
 8001956:	7eba      	ldrb	r2, [r7, #26]
 8001958:	0912      	lsrs	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	4313      	orrs	r3, r2
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001960:	7efb      	ldrb	r3, [r7, #27]
 8001962:	031a      	lsls	r2, r3, #12
 8001964:	7f3b      	ldrb	r3, [r7, #28]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	4313      	orrs	r3, r2
 800196a:	7f7a      	ldrb	r2, [r7, #29]
 800196c:	0912      	lsrs	r2, r2, #4
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4313      	orrs	r3, r2
 8001972:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	461a      	mov	r2, r3
 800197a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f7ff fd7b 	bl	8001478 <compensate_temperature>
 8001982:	4602      	mov	r2, r0
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	461a      	mov	r2, r3
 800198c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f7ff fdab 	bl	80014ea <compensate_pressure>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	601a      	str	r2, [r3, #0]

	if (humidity) {
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00d      	beq.n	80019bc <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 80019a0:	7fbb      	ldrb	r3, [r7, #30]
 80019a2:	021b      	lsls	r3, r3, #8
 80019a4:	7ffa      	ldrb	r2, [r7, #31]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	461a      	mov	r2, r3
 80019ae:	6a39      	ldr	r1, [r7, #32]
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff44 	bl	800183e <compensate_humidity>
 80019b6:	4602      	mov	r2, r0
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	601a      	str	r2, [r3, #0]
	}

	return true;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3730      	adds	r7, #48	; 0x30
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d002      	beq.n	80019e2 <bmp280_read_float+0x1a>
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	e000      	b.n	80019e4 <bmp280_read_float+0x1c>
 80019e2:	2300      	movs	r3, #0
 80019e4:	f107 0218 	add.w	r2, r7, #24
 80019e8:	f107 011c 	add.w	r1, r7, #28
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff ff85 	bl	80018fc <bmp280_read_fixed>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d028      	beq.n	8001a4a <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a02:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a54 <bmp280_read_float+0x8c>
 8001a06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a1a:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001a58 <bmp280_read_float+0x90>
 8001a1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d00b      	beq.n	8001a46 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	ee07 3a90 	vmov	s15, r3
 8001a34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a38:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001a5c <bmp280_read_float+0x94>
 8001a3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <bmp280_read_float+0x84>
	}

	return false;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	42c80000 	.word	0x42c80000
 8001a58:	43800000 	.word	0x43800000
 8001a5c:	44800000 	.word	0x44800000

08001a60 <delay_us>:
#include "lcd_1602.h"

static void delay_us(uint32_t delay){
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	delay*=32;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	607b      	str	r3, [r7, #4]
	while(delay--);
 8001a6e:	bf00      	nop
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	1e5a      	subs	r2, r3, #1
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1fa      	bne.n	8001a70 <delay_us+0x10>
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <lcd_send_4bit>:

static void lcd_send_4bit(uint8_t data){	
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
	
	if(data & 0x10) d4(1); else d4(0);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <lcd_send_4bit+0x20>
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	2110      	movs	r1, #16
 8001aa0:	481d      	ldr	r0, [pc, #116]	; (8001b18 <lcd_send_4bit+0x90>)
 8001aa2:	f002 fa5d 	bl	8003f60 <HAL_GPIO_WritePin>
 8001aa6:	e004      	b.n	8001ab2 <lcd_send_4bit+0x2a>
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	2110      	movs	r1, #16
 8001aac:	481a      	ldr	r0, [pc, #104]	; (8001b18 <lcd_send_4bit+0x90>)
 8001aae:	f002 fa57 	bl	8003f60 <HAL_GPIO_WritePin>
	if(data & 0x20) d5(1); else d5(0);
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <lcd_send_4bit+0x40>
 8001abc:	2201      	movs	r2, #1
 8001abe:	2120      	movs	r1, #32
 8001ac0:	4815      	ldr	r0, [pc, #84]	; (8001b18 <lcd_send_4bit+0x90>)
 8001ac2:	f002 fa4d 	bl	8003f60 <HAL_GPIO_WritePin>
 8001ac6:	e004      	b.n	8001ad2 <lcd_send_4bit+0x4a>
 8001ac8:	2200      	movs	r2, #0
 8001aca:	2120      	movs	r1, #32
 8001acc:	4812      	ldr	r0, [pc, #72]	; (8001b18 <lcd_send_4bit+0x90>)
 8001ace:	f002 fa47 	bl	8003f60 <HAL_GPIO_WritePin>
	if(data & 0x40) d6(1); else d6(0);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d005      	beq.n	8001ae8 <lcd_send_4bit+0x60>
 8001adc:	2201      	movs	r2, #1
 8001ade:	2140      	movs	r1, #64	; 0x40
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <lcd_send_4bit+0x90>)
 8001ae2:	f002 fa3d 	bl	8003f60 <HAL_GPIO_WritePin>
 8001ae6:	e004      	b.n	8001af2 <lcd_send_4bit+0x6a>
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2140      	movs	r1, #64	; 0x40
 8001aec:	480a      	ldr	r0, [pc, #40]	; (8001b18 <lcd_send_4bit+0x90>)
 8001aee:	f002 fa37 	bl	8003f60 <HAL_GPIO_WritePin>
	if(data & 0x80) d7(1); else d7(0);
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da05      	bge.n	8001b06 <lcd_send_4bit+0x7e>
 8001afa:	2201      	movs	r2, #1
 8001afc:	2180      	movs	r1, #128	; 0x80
 8001afe:	4806      	ldr	r0, [pc, #24]	; (8001b18 <lcd_send_4bit+0x90>)
 8001b00:	f002 fa2e 	bl	8003f60 <HAL_GPIO_WritePin>
	
}
 8001b04:	e004      	b.n	8001b10 <lcd_send_4bit+0x88>
	if(data & 0x80) d7(1); else d7(0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2180      	movs	r1, #128	; 0x80
 8001b0a:	4803      	ldr	r0, [pc, #12]	; (8001b18 <lcd_send_4bit+0x90>)
 8001b0c:	f002 fa28 	bl	8003f60 <HAL_GPIO_WritePin>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	48000400 	.word	0x48000400

08001b1c <lcd_send>:

static void lcd_send(int8_t rs,uint8_t data){
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	460a      	mov	r2, r1
 8001b26:	71fb      	strb	r3, [r7, #7]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	71bb      	strb	r3, [r7, #6]
	rs(rs);rw(0);
 8001b2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <lcd_send+0x24>
 8001b34:	2201      	movs	r2, #1
 8001b36:	2101      	movs	r1, #1
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <lcd_send+0x88>)
 8001b3a:	f002 fa11 	bl	8003f60 <HAL_GPIO_WritePin>
 8001b3e:	e004      	b.n	8001b4a <lcd_send+0x2e>
 8001b40:	2200      	movs	r2, #0
 8001b42:	2101      	movs	r1, #1
 8001b44:	4817      	ldr	r0, [pc, #92]	; (8001ba4 <lcd_send+0x88>)
 8001b46:	f002 fa0b 	bl	8003f60 <HAL_GPIO_WritePin>
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4815      	ldr	r0, [pc, #84]	; (8001ba4 <lcd_send+0x88>)
 8001b50:	f002 fa06 	bl	8003f60 <HAL_GPIO_WritePin>
	lcd_send_4bit(data);
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff96 	bl	8001a88 <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2104      	movs	r1, #4
 8001b60:	4810      	ldr	r0, [pc, #64]	; (8001ba4 <lcd_send+0x88>)
 8001b62:	f002 f9fd 	bl	8003f60 <HAL_GPIO_WritePin>
 8001b66:	2064      	movs	r0, #100	; 0x64
 8001b68:	f7ff ff7a 	bl	8001a60 <delay_us>
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2104      	movs	r1, #4
 8001b70:	480c      	ldr	r0, [pc, #48]	; (8001ba4 <lcd_send+0x88>)
 8001b72:	f002 f9f5 	bl	8003f60 <HAL_GPIO_WritePin>
	lcd_send_4bit(data<<4);
 8001b76:	79bb      	ldrb	r3, [r7, #6]
 8001b78:	011b      	lsls	r3, r3, #4
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ff83 	bl	8001a88 <lcd_send_4bit>
	en(1);delay_us(100);en(0);
 8001b82:	2201      	movs	r2, #1
 8001b84:	2104      	movs	r1, #4
 8001b86:	4807      	ldr	r0, [pc, #28]	; (8001ba4 <lcd_send+0x88>)
 8001b88:	f002 f9ea 	bl	8003f60 <HAL_GPIO_WritePin>
 8001b8c:	2064      	movs	r0, #100	; 0x64
 8001b8e:	f7ff ff67 	bl	8001a60 <delay_us>
 8001b92:	2200      	movs	r2, #0
 8001b94:	2104      	movs	r1, #4
 8001b96:	4803      	ldr	r0, [pc, #12]	; (8001ba4 <lcd_send+0x88>)
 8001b98:	f002 f9e2 	bl	8003f60 <HAL_GPIO_WritePin>
}
 8001b9c:	bf00      	nop
 8001b9e:	3708      	adds	r7, #8
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	48000400 	.word	0x48000400

08001ba8 <lcd_data>:

void lcd_cmd(uint8_t command){
	lcd_send(1,command);
}

void lcd_data(char c){
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
	lcd_send(1,(uint8_t)c);
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f7ff ffb0 	bl	8001b1c <lcd_send>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <lcd_init>:

void lcd_init(void){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
	//bl(1);
	lcd_send(0,0x33); // 0011 0011
 8001bc8:	2133      	movs	r1, #51	; 0x33
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f7ff ffa6 	bl	8001b1c <lcd_send>
  lcd_send(0,0x32);	  // 0011 0010
 8001bd0:	2132      	movs	r1, #50	; 0x32
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f7ff ffa2 	bl	8001b1c <lcd_send>
  lcd_send(0,0x28);	  // 0010 1000
 8001bd8:	2128      	movs	r1, #40	; 0x28
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff ff9e 	bl	8001b1c <lcd_send>
  lcd_send(0,0x0C);	  // 0000 1100
 8001be0:	210c      	movs	r1, #12
 8001be2:	2000      	movs	r0, #0
 8001be4:	f7ff ff9a 	bl	8001b1c <lcd_send>
  lcd_send(0,0x06);   // 0000 0110
 8001be8:	2106      	movs	r1, #6
 8001bea:	2000      	movs	r0, #0
 8001bec:	f7ff ff96 	bl	8001b1c <lcd_send>
  lcd_send(0,0x01);   // 0000 0001	-> Clear the display
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f7ff ff92 	bl	8001b1c <lcd_send>
	HAL_Delay(2);
 8001bf8:	2002      	movs	r0, #2
 8001bfa:	f000 fdaf 	bl	800275c <HAL_Delay>
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <lcd_gotoxy>:
    lcd_send(0,0x01);
    HAL_Delay(2);
}


void lcd_gotoxy(char x, char y){
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b082      	sub	sp, #8
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	460a      	mov	r2, r1
 8001c0c:	71fb      	strb	r3, [r7, #7]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	71bb      	strb	r3, [r7, #6]
	
    lcd_send(0,0x80+x+(y*0x40));
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	019b      	lsls	r3, r3, #6
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	3b80      	subs	r3, #128	; 0x80
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4619      	mov	r1, r3
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff ff79 	bl	8001b1c <lcd_send>
}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}

08001c32 <lcd_puts>:

void lcd_puts(char *text){
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b082      	sub	sp, #8
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
    while(*text){
 8001c3a:	e007      	b.n	8001c4c <lcd_puts+0x1a>
        lcd_data(*text);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff ffb1 	bl	8001ba8 <lcd_data>
        text++;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	607b      	str	r3, [r7, #4]
    while(*text){
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1f3      	bne.n	8001c3c <lcd_puts+0xa>
    }
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <set_humidity_value>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint16_t set_humidity_value(uint16_t humidity_value){
 8001c5c:	b480      	push	{r7}
 8001c5e:	b087      	sub	sp, #28
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
	uint16_t result, in_min, in_max, out_min, out_max;
	in_min = 5000;
 8001c66:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c6a:	82fb      	strh	r3, [r7, #22]
	in_max = 1000;
 8001c6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c70:	82bb      	strh	r3, [r7, #20]
	out_min = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	827b      	strh	r3, [r7, #18]
	out_max = 100;
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	823b      	strh	r3, [r7, #16]
	result = (humidity_value - in_min ) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	8afb      	ldrh	r3, [r7, #22]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	8a39      	ldrh	r1, [r7, #16]
 8001c82:	8a7a      	ldrh	r2, [r7, #18]
 8001c84:	1a8a      	subs	r2, r1, r2
 8001c86:	fb02 f203 	mul.w	r2, r2, r3
 8001c8a:	8ab9      	ldrh	r1, [r7, #20]
 8001c8c:	8afb      	ldrh	r3, [r7, #22]
 8001c8e:	1acb      	subs	r3, r1, r3
 8001c90:	fb92 f3f3 	sdiv	r3, r2, r3
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	8a7b      	ldrh	r3, [r7, #18]
 8001c98:	4413      	add	r3, r2
 8001c9a:	81fb      	strh	r3, [r7, #14]
	return result;
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cae:	b09d      	sub	sp, #116	; 0x74
 8001cb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb2:	f000 fcdb 	bl	800266c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb6:	f000 f93f 	bl	8001f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cba:	f000 fab1 	bl	8002220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cbe:	f000 fa7f 	bl	80021c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001cc2:	f000 f9c3 	bl	800204c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cc6:	f000 fa3b 	bl	8002140 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialization of the LCD Screen
  lcd_init();
 8001cca:	f7ff ff7b 	bl	8001bc4 <lcd_init>


  // Start bmp initialization with default parameters provided by library
  bmp280_init_default_params(&bmp280.params);
 8001cce:	488b      	ldr	r0, [pc, #556]	; (8001efc <main+0x250>)
 8001cd0:	f7ff f9aa 	bl	8001028 <bmp280_init_default_params>
  // Get I2C address of BMP280 slave
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001cd4:	4b8a      	ldr	r3, [pc, #552]	; (8001f00 <main+0x254>)
 8001cd6:	2276      	movs	r2, #118	; 0x76
 8001cd8:	849a      	strh	r2, [r3, #36]	; 0x24
  // Provide the I2C address to the bmp280 struct
  bmp280.i2c = &hi2c1;
 8001cda:	4b89      	ldr	r3, [pc, #548]	; (8001f00 <main+0x254>)
 8001cdc:	4a89      	ldr	r2, [pc, #548]	; (8001f04 <main+0x258>)
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
   *
   *
   */
  // If the bmp will not be initialized with all parameters correctly,
  // then initilization will be failed and the message will be provided via UART to terminal
  while(!bmp280_init(&bmp280, &bmp280.params)){
 8001ce0:	e01f      	b.n	8001d22 <main+0x76>
	  sprintf( data_i2c, "BMP280 initialization failed\r\n" );
 8001ce2:	f107 0320 	add.w	r3, r7, #32
 8001ce6:	4a88      	ldr	r2, [pc, #544]	; (8001f08 <main+0x25c>)
 8001ce8:	461c      	mov	r4, r3
 8001cea:	4615      	mov	r5, r2
 8001cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001cf4:	c407      	stmia	r4!, {r0, r1, r2}
 8001cf6:	8023      	strh	r3, [r4, #0]
 8001cf8:	3402      	adds	r4, #2
 8001cfa:	0c1b      	lsrs	r3, r3, #16
 8001cfc:	7023      	strb	r3, [r4, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)data_i2c , strlen(data_i2c), HAL_MAX_DELAY);
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fa64 	bl	80001d0 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	f107 0120 	add.w	r1, r7, #32
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
 8001d14:	487d      	ldr	r0, [pc, #500]	; (8001f0c <main+0x260>)
 8001d16:	f004 fb19 	bl	800634c <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001d1a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d1e:	f000 fd1d 	bl	800275c <HAL_Delay>
  while(!bmp280_init(&bmp280, &bmp280.params)){
 8001d22:	4976      	ldr	r1, [pc, #472]	; (8001efc <main+0x250>)
 8001d24:	4876      	ldr	r0, [pc, #472]	; (8001f00 <main+0x254>)
 8001d26:	f7ff fafa 	bl	800131e <bmp280_init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f083 0301 	eor.w	r3, r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1d5      	bne.n	8001ce2 <main+0x36>
  }

  // Check if I2C has been found
  // 0XED is the address for initialize the communication - start
  // If the device has been found, then toggle the led and send the message via UART to terminal
  if ( (HAL_I2C_IsDeviceReady(&hi2c1,0xED, 2,10)) == HAL_OK){
 8001d36:	230a      	movs	r3, #10
 8001d38:	2202      	movs	r2, #2
 8001d3a:	21ed      	movs	r1, #237	; 0xed
 8001d3c:	4871      	ldr	r0, [pc, #452]	; (8001f04 <main+0x258>)
 8001d3e:	f002 fbfd 	bl	800453c <HAL_I2C_IsDeviceReady>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d124      	bne.n	8001d92 <main+0xe6>
    	HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001d48:	2120      	movs	r1, #32
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d4e:	f002 f91f 	bl	8003f90 <HAL_GPIO_TogglePin>
    	sprintf( data_i2c, "BMP280 initialized correctly\r\n" );
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	4a6e      	ldr	r2, [pc, #440]	; (8001f10 <main+0x264>)
 8001d58:	461c      	mov	r4, r3
 8001d5a:	4615      	mov	r5, r2
 8001d5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d64:	c407      	stmia	r4!, {r0, r1, r2}
 8001d66:	8023      	strh	r3, [r4, #0]
 8001d68:	3402      	adds	r4, #2
 8001d6a:	0c1b      	lsrs	r3, r3, #16
 8001d6c:	7023      	strb	r3, [r4, #0]
    	HAL_UART_Transmit(&huart2, (uint8_t*)data_i2c , strlen(data_i2c), HAL_MAX_DELAY);
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fa2c 	bl	80001d0 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	f107 0120 	add.w	r1, r7, #32
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	4861      	ldr	r0, [pc, #388]	; (8001f0c <main+0x260>)
 8001d86:	f004 fae1 	bl	800634c <HAL_UART_Transmit>
    	HAL_Delay(2000);
 8001d8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d8e:	f000 fce5 	bl	800275c <HAL_Delay>

	  /*
	   * 		CHECK HUMIDITY SENSOR CONNECTION
	   */
	  //Start adc for &hadc1
	  HAL_ADC_Start(&hadc1);
 8001d92:	4860      	ldr	r0, [pc, #384]	; (8001f14 <main+0x268>)
 8001d94:	f001 f82e 	bl	8002df4 <HAL_ADC_Start>

	  // Controller start to poll the ADC device
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	485d      	ldr	r0, [pc, #372]	; (8001f14 <main+0x268>)
 8001d9e:	f001 f8e3 	bl	8002f68 <HAL_ADC_PollForConversion>

	  // bmp280 function get values for temperature, pressure and humidity in case it is a bme280
	  // If it won't be able to get appropriate information then message "Reading failed will be transmitted".
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001da2:	e020      	b.n	8001de6 <main+0x13a>
	  	  	sprintf(data_i2c,"BMP280 reading failed\n");
 8001da4:	f107 0320 	add.w	r3, r7, #32
 8001da8:	4a5b      	ldr	r2, [pc, #364]	; (8001f18 <main+0x26c>)
 8001daa:	461c      	mov	r4, r3
 8001dac:	4615      	mov	r5, r2
 8001dae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001db0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001db2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001db6:	6020      	str	r0, [r4, #0]
 8001db8:	3404      	adds	r4, #4
 8001dba:	8021      	strh	r1, [r4, #0]
 8001dbc:	3402      	adds	r4, #2
 8001dbe:	0c0b      	lsrs	r3, r1, #16
 8001dc0:	7023      	strb	r3, [r4, #0]
	  	  	HAL_UART_Transmit(&huart2, (uint8_t *)data_i2c, strlen(data_i2c), HAL_MAX_DELAY);
 8001dc2:	f107 0320 	add.w	r3, r7, #32
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fa02 	bl	80001d0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f107 0120 	add.w	r1, r7, #32
 8001dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd8:	484c      	ldr	r0, [pc, #304]	; (8001f0c <main+0x260>)
 8001dda:	f004 fab7 	bl	800634c <HAL_UART_Transmit>
	  	  	HAL_Delay(2000);
 8001dde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de2:	f000 fcbb 	bl	800275c <HAL_Delay>
	  while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001de6:	4b4d      	ldr	r3, [pc, #308]	; (8001f1c <main+0x270>)
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <main+0x274>)
 8001dea:	494e      	ldr	r1, [pc, #312]	; (8001f24 <main+0x278>)
 8001dec:	4844      	ldr	r0, [pc, #272]	; (8001f00 <main+0x254>)
 8001dee:	f7ff fdeb 	bl	80019c8 <bmp280_read_float>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f083 0301 	eor.w	r3, r3, #1
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1d2      	bne.n	8001da4 <main+0xf8>
	  	  	}


	  // Get the value of ADC and store it in humidity line variable
	  humidity_line = HAL_ADC_GetValue(&hadc1);
 8001dfe:	4845      	ldr	r0, [pc, #276]	; (8001f14 <main+0x268>)
 8001e00:	f001 f982 	bl	8003108 <HAL_ADC_GetValue>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
	  humidity_format = set_humidity_value(humidity_line);
 8001e0a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff ff24 	bl	8001c5c <set_humidity_value>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	  sprintf(humidity_msg,"Humidity : %hu%%\r\n",humidity_format);
 8001e1a:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e22:	4941      	ldr	r1, [pc, #260]	; (8001f28 <main+0x27c>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f005 fe6f 	bl	8007b08 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)humidity_msg, strlen(humidity_msg), HAL_MAX_DELAY);
 8001e2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe f9ce 	bl	80001d0 <strlen>
 8001e34:	4603      	mov	r3, r0
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e40:	4832      	ldr	r0, [pc, #200]	; (8001f0c <main+0x260>)
 8001e42:	f004 fa83 	bl	800634c <HAL_UART_Transmit>
	  humidity_format = set_humidity_value(humidity_line);
 8001e46:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7ff ff06 	bl	8001c5c <set_humidity_value>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
	  // Send data via LCD
	  sprintf(lcd_message,"Hum : %hu%%",humidity_format);
 8001e56:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8001e5a:	f107 0310 	add.w	r3, r7, #16
 8001e5e:	4933      	ldr	r1, [pc, #204]	; (8001f2c <main+0x280>)
 8001e60:	4618      	mov	r0, r3
 8001e62:	f005 fe51 	bl	8007b08 <siprintf>
	  lcd_gotoxy(0, 0);
 8001e66:	2100      	movs	r1, #0
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff feca 	bl	8001c02 <lcd_gotoxy>
	  lcd_puts(lcd_message);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fedd 	bl	8001c32 <lcd_puts>
	  HAL_Delay(100);
 8001e78:	2064      	movs	r0, #100	; 0x64
 8001e7a:	f000 fc6f 	bl	800275c <HAL_Delay>
	  // Transmit the humidity_msg through &huart2


	  sprintf(data_i2c,"Pressure: %.2f Pa, Temperature: %.2f C\r\n",pressure, temperature);
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <main+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe fb60 	bl	8000548 <__aeabi_f2d>
 8001e88:	4605      	mov	r5, r0
 8001e8a:	460e      	mov	r6, r1
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <main+0x278>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb59 	bl	8000548 <__aeabi_f2d>
 8001e96:	4603      	mov	r3, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	f107 0020 	add.w	r0, r7, #32
 8001e9e:	e9cd 3400 	strd	r3, r4, [sp]
 8001ea2:	462a      	mov	r2, r5
 8001ea4:	4633      	mov	r3, r6
 8001ea6:	4922      	ldr	r1, [pc, #136]	; (8001f30 <main+0x284>)
 8001ea8:	f005 fe2e 	bl	8007b08 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)data_i2c, strlen(data_i2c), HAL_MAX_DELAY);
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe f98d 	bl	80001d0 <strlen>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	f107 0120 	add.w	r1, r7, #32
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <main+0x260>)
 8001ec4:	f004 fa42 	bl	800634c <HAL_UART_Transmit>

	  // Send data via LCD
	  sprintf(lcd_message2,"Temp: %.2f C", temperature);
 8001ec8:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <main+0x278>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb3b 	bl	8000548 <__aeabi_f2d>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	4638      	mov	r0, r7
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4623      	mov	r3, r4
 8001edc:	4915      	ldr	r1, [pc, #84]	; (8001f34 <main+0x288>)
 8001ede:	f005 fe13 	bl	8007b08 <siprintf>
	  lcd_gotoxy(0, 1);
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fe8c 	bl	8001c02 <lcd_gotoxy>
	  lcd_puts(lcd_message2);
 8001eea:	463b      	mov	r3, r7
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fea0 	bl	8001c32 <lcd_puts>


	  HAL_Delay(100);
 8001ef2:	2064      	movs	r0, #100	; 0x64
 8001ef4:	f000 fc32 	bl	800275c <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001ef8:	e74b      	b.n	8001d92 <main+0xe6>
 8001efa:	bf00      	nop
 8001efc:	200002ec 	.word	0x200002ec
 8001f00:	200002c0 	.word	0x200002c0
 8001f04:	20000204 	.word	0x20000204
 8001f08:	0800a908 	.word	0x0800a908
 8001f0c:	200002f4 	.word	0x200002f4
 8001f10:	0800a928 	.word	0x0800a928
 8001f14:	20000258 	.word	0x20000258
 8001f18:	0800a948 	.word	0x0800a948
 8001f1c:	200002bc 	.word	0x200002bc
 8001f20:	20000254 	.word	0x20000254
 8001f24:	20000250 	.word	0x20000250
 8001f28:	0800a960 	.word	0x0800a960
 8001f2c:	0800a974 	.word	0x0800a974
 8001f30:	0800a980 	.word	0x0800a980
 8001f34:	0800a9ac 	.word	0x0800a9ac

08001f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b0b8      	sub	sp, #224	; 0xe0
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f42:	2244      	movs	r2, #68	; 0x44
 8001f44:	2100      	movs	r1, #0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 ff92 	bl	8006e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	2288      	movs	r2, #136	; 0x88
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f004 ff84 	bl	8006e70 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f76:	2310      	movs	r3, #16
 8001f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f8e:	230a      	movs	r3, #10
 8001f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f94:	2307      	movs	r3, #7
 8001f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fee6 	bl	8004d7c <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001fb6:	f000 f9af 	bl	8002318 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fba:	230f      	movs	r3, #15
 8001fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fab2 	bl	8005548 <HAL_RCC_ClockConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001fea:	f000 f995 	bl	8002318 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8001fee:	f244 0342 	movw	r3, #16450	; 0x4042
 8001ff2:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001ffc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002000:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8002002:	2302      	movs	r3, #2
 8002004:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002006:	2301      	movs	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800200a:	2308      	movs	r3, #8
 800200c:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800200e:	2307      	movs	r3, #7
 8002010:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002012:	2302      	movs	r3, #2
 8002014:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002016:	2302      	movs	r3, #2
 8002018:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800201a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800201e:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002020:	463b      	mov	r3, r7
 8002022:	4618      	mov	r0, r3
 8002024:	f003 fc94 	bl	8005950 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800202e:	f000 f973 	bl	8002318 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002032:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002036:	f002 fe4b 	bl	8004cd0 <HAL_PWREx_ControlVoltageScaling>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8002040:	f000 f96a 	bl	8002318 <Error_Handler>
  }
}
 8002044:	bf00      	nop
 8002046:	37e0      	adds	r7, #224	; 0xe0
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002052:	f107 031c 	add.w	r3, r7, #28
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	605a      	str	r2, [r3, #4]
 800205c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800206e:	4b31      	ldr	r3, [pc, #196]	; (8002134 <MX_ADC1_Init+0xe8>)
 8002070:	4a31      	ldr	r2, [pc, #196]	; (8002138 <MX_ADC1_Init+0xec>)
 8002072:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <MX_ADC1_Init+0xe8>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <MX_ADC1_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002080:	4b2c      	ldr	r3, [pc, #176]	; (8002134 <MX_ADC1_Init+0xe8>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <MX_ADC1_Init+0xe8>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800208c:	4b29      	ldr	r3, [pc, #164]	; (8002134 <MX_ADC1_Init+0xe8>)
 800208e:	2204      	movs	r2, #4
 8002090:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002092:	4b28      	ldr	r3, [pc, #160]	; (8002134 <MX_ADC1_Init+0xe8>)
 8002094:	2200      	movs	r2, #0
 8002096:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002098:	4b26      	ldr	r3, [pc, #152]	; (8002134 <MX_ADC1_Init+0xe8>)
 800209a:	2200      	movs	r2, #0
 800209c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020a4:	4b23      	ldr	r3, [pc, #140]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80020ac:	4b21      	ldr	r3, [pc, #132]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020be:	4b1d      	ldr	r3, [pc, #116]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020d4:	4817      	ldr	r0, [pc, #92]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020d6:	f000 fd39 	bl	8002b4c <HAL_ADC_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80020e0:	f000 f91a 	bl	8002318 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80020e8:	f107 031c 	add.w	r3, r7, #28
 80020ec:	4619      	mov	r1, r3
 80020ee:	4811      	ldr	r0, [pc, #68]	; (8002134 <MX_ADC1_Init+0xe8>)
 80020f0:	f001 fbfc 	bl	80038ec <HAL_ADCEx_MultiModeConfigChannel>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80020fa:	f000 f90d 	bl	8002318 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	; (800213c <MX_ADC1_Init+0xf0>)
 8002100:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002102:	2306      	movs	r3, #6
 8002104:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800210a:	237f      	movs	r3, #127	; 0x7f
 800210c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800210e:	2304      	movs	r3, #4
 8002110:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	4619      	mov	r1, r3
 800211a:	4806      	ldr	r0, [pc, #24]	; (8002134 <MX_ADC1_Init+0xe8>)
 800211c:	f001 f802 	bl	8003124 <HAL_ADC_ConfigChannel>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002126:	f000 f8f7 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000258 	.word	0x20000258
 8002138:	50040000 	.word	0x50040000
 800213c:	14f00020 	.word	0x14f00020

08002140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002146:	4a1c      	ldr	r2, [pc, #112]	; (80021b8 <MX_I2C1_Init+0x78>)
 8002148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800214a:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_I2C1_Init+0x74>)
 800214c:	4a1b      	ldr	r2, [pc, #108]	; (80021bc <MX_I2C1_Init+0x7c>)
 800214e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002158:	2201      	movs	r2, #1
 800215a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_I2C1_Init+0x74>)
 800215e:	2200      	movs	r2, #0
 8002160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002164:	2200      	movs	r2, #0
 8002166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_I2C1_Init+0x74>)
 800216a:	2200      	movs	r2, #0
 800216c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002170:	2200      	movs	r2, #0
 8002172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_I2C1_Init+0x74>)
 8002176:	2200      	movs	r2, #0
 8002178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800217a:	480e      	ldr	r0, [pc, #56]	; (80021b4 <MX_I2C1_Init+0x74>)
 800217c:	f001 ff21 	bl	8003fc2 <HAL_I2C_Init>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002186:	f000 f8c7 	bl	8002318 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800218a:	2100      	movs	r1, #0
 800218c:	4809      	ldr	r0, [pc, #36]	; (80021b4 <MX_I2C1_Init+0x74>)
 800218e:	f002 fcf9 	bl	8004b84 <HAL_I2CEx_ConfigAnalogFilter>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002198:	f000 f8be 	bl	8002318 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800219c:	2100      	movs	r1, #0
 800219e:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_I2C1_Init+0x74>)
 80021a0:	f002 fd3b 	bl	8004c1a <HAL_I2CEx_ConfigDigitalFilter>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021aa:	f000 f8b5 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000204 	.word	0x20000204
 80021b8:	40005400 	.word	0x40005400
 80021bc:	10909cec 	.word	0x10909cec

080021c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021c6:	4a15      	ldr	r2, [pc, #84]	; (800221c <MX_USART2_UART_Init+0x5c>)
 80021c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021ca:	4b13      	ldr	r3, [pc, #76]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021d2:	4b11      	ldr	r3, [pc, #68]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021de:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80021f0:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_USART2_UART_Init+0x58>)
 80021fe:	2200      	movs	r2, #0
 8002200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002202:	4805      	ldr	r0, [pc, #20]	; (8002218 <MX_USART2_UART_Init+0x58>)
 8002204:	f004 f854 	bl	80062b0 <HAL_UART_Init>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800220e:	f000 f883 	bl	8002318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	200002f4 	.word	0x200002f4
 800221c:	40004400 	.word	0x40004400

08002220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]
 8002230:	609a      	str	r2, [r3, #8]
 8002232:	60da      	str	r2, [r3, #12]
 8002234:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002236:	4b34      	ldr	r3, [pc, #208]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223a:	4a33      	ldr	r2, [pc, #204]	; (8002308 <MX_GPIO_Init+0xe8>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002242:	4b31      	ldr	r3, [pc, #196]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	4b2e      	ldr	r3, [pc, #184]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002252:	4a2d      	ldr	r2, [pc, #180]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800225a:	4b2b      	ldr	r3, [pc, #172]	; (8002308 <MX_GPIO_Init+0xe8>)
 800225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800225e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002266:	4b28      	ldr	r3, [pc, #160]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800226a:	4a27      	ldr	r2, [pc, #156]	; (8002308 <MX_GPIO_Init+0xe8>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002272:	4b25      	ldr	r3, [pc, #148]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800227e:	4b22      	ldr	r3, [pc, #136]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002282:	4a21      	ldr	r2, [pc, #132]	; (8002308 <MX_GPIO_Init+0xe8>)
 8002284:	f043 0302 	orr.w	r3, r3, #2
 8002288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <MX_GPIO_Init+0xe8>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	2120      	movs	r1, #32
 800229a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800229e:	f001 fe5f 	bl	8003f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RS_Pin|RW_Pin|EN_Pin|D4_Pin 
 80022a2:	2200      	movs	r2, #0
 80022a4:	21f7      	movs	r1, #247	; 0xf7
 80022a6:	4819      	ldr	r0, [pc, #100]	; (800230c <MX_GPIO_Init+0xec>)
 80022a8:	f001 fe5a 	bl	8003f60 <HAL_GPIO_WritePin>
                          |D5_Pin|D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80022ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <MX_GPIO_Init+0xf0>)
 80022b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	4619      	mov	r1, r3
 80022c0:	4814      	ldr	r0, [pc, #80]	; (8002314 <MX_GPIO_Init+0xf4>)
 80022c2:	f001 fca5 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80022c6:	2320      	movs	r3, #32
 80022c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ca:	2301      	movs	r3, #1
 80022cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e0:	f001 fc96 	bl	8003c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : RS_Pin RW_Pin EN_Pin D4_Pin 
                           D5_Pin D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|RW_Pin|EN_Pin|D4_Pin 
 80022e4:	23f7      	movs	r3, #247	; 0xf7
 80022e6:	617b      	str	r3, [r7, #20]
                          |D5_Pin|D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e8:	2301      	movs	r3, #1
 80022ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ec:	2300      	movs	r3, #0
 80022ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022f0:	2300      	movs	r3, #0
 80022f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f4:	f107 0314 	add.w	r3, r7, #20
 80022f8:	4619      	mov	r1, r3
 80022fa:	4804      	ldr	r0, [pc, #16]	; (800230c <MX_GPIO_Init+0xec>)
 80022fc:	f001 fc88 	bl	8003c10 <HAL_GPIO_Init>

}
 8002300:	bf00      	nop
 8002302:	3728      	adds	r7, #40	; 0x28
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	40021000 	.word	0x40021000
 800230c:	48000400 	.word	0x48000400
 8002310:	10210000 	.word	0x10210000
 8002314:	48000800 	.word	0x48000800

08002318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232e:	4b0f      	ldr	r3, [pc, #60]	; (800236c <HAL_MspInit+0x44>)
 8002330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002332:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_MspInit+0x44>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6613      	str	r3, [r2, #96]	; 0x60
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <HAL_MspInit+0x44>)
 800233c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	607b      	str	r3, [r7, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_MspInit+0x44>)
 8002348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234a:	4a08      	ldr	r2, [pc, #32]	; (800236c <HAL_MspInit+0x44>)
 800234c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_MspInit+0x44>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	603b      	str	r3, [r7, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000

08002370 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2200      	movs	r2, #0
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	609a      	str	r2, [r3, #8]
 8002384:	60da      	str	r2, [r3, #12]
 8002386:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a15      	ldr	r2, [pc, #84]	; (80023e4 <HAL_ADC_MspInit+0x74>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d124      	bne.n	80023dc <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 8002398:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800239c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800239e:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	613b      	str	r3, [r7, #16]
 80023a8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a0e      	ldr	r2, [pc, #56]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023b6:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <HAL_ADC_MspInit+0x78>)
 80023b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80023c2:	2301      	movs	r3, #1
 80023c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80023c6:	230b      	movs	r3, #11
 80023c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	4619      	mov	r1, r3
 80023d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d8:	f001 fc1a 	bl	8003c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	; 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	50040000 	.word	0x50040000
 80023e8:	40021000 	.word	0x40021000

080023ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	; 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a17      	ldr	r2, [pc, #92]	; (8002468 <HAL_I2C_MspInit+0x7c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d128      	bne.n	8002460 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_I2C_MspInit+0x80>)
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	4a16      	ldr	r2, [pc, #88]	; (800246c <HAL_I2C_MspInit+0x80>)
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800241a:	4b14      	ldr	r3, [pc, #80]	; (800246c <HAL_I2C_MspInit+0x80>)
 800241c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	613b      	str	r3, [r7, #16]
 8002424:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800242a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800242c:	2312      	movs	r3, #18
 800242e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002430:	2301      	movs	r3, #1
 8002432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002438:	2304      	movs	r3, #4
 800243a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	4619      	mov	r1, r3
 8002442:	480b      	ldr	r0, [pc, #44]	; (8002470 <HAL_I2C_MspInit+0x84>)
 8002444:	f001 fbe4 	bl	8003c10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_I2C_MspInit+0x80>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244c:	4a07      	ldr	r2, [pc, #28]	; (800246c <HAL_I2C_MspInit+0x80>)
 800244e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002452:	6593      	str	r3, [r2, #88]	; 0x58
 8002454:	4b05      	ldr	r3, [pc, #20]	; (800246c <HAL_I2C_MspInit+0x80>)
 8002456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40005400 	.word	0x40005400
 800246c:	40021000 	.word	0x40021000
 8002470:	48000400 	.word	0x48000400

08002474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08a      	sub	sp, #40	; 0x28
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_UART_MspInit+0x7c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d128      	bne.n	80024e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002496:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_UART_MspInit+0x80>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_UART_MspInit+0x80>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6593      	str	r3, [r2, #88]	; 0x58
 80024a2:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <HAL_UART_MspInit+0x80>)
 80024a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	613b      	str	r3, [r7, #16]
 80024ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_UART_MspInit+0x80>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_UART_MspInit+0x80>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_UART_MspInit+0x80>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024c6:	230c      	movs	r3, #12
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d2:	2303      	movs	r3, #3
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024d6:	2307      	movs	r3, #7
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f001 fb94 	bl	8003c10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40004400 	.word	0x40004400
 80024f4:	40021000 	.word	0x40021000

080024f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800250a:	e7fe      	b.n	800250a <HardFault_Handler+0x4>

0800250c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002510:	e7fe      	b.n	8002510 <MemManage_Handler+0x4>

08002512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002516:	e7fe      	b.n	8002516 <BusFault_Handler+0x4>

08002518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800251c:	e7fe      	b.n	800251c <UsageFault_Handler+0x4>

0800251e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800251e:	b480      	push	{r7}
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002522:	bf00      	nop
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800253a:	b480      	push	{r7}
 800253c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800253e:	bf00      	nop
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800254c:	f000 f8e8 	bl	8002720 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}

08002554 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <_sbrk+0x50>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d102      	bne.n	800256a <_sbrk+0x16>
		heap_end = &end;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <_sbrk+0x50>)
 8002566:	4a10      	ldr	r2, [pc, #64]	; (80025a8 <_sbrk+0x54>)
 8002568:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800256a:	4b0e      	ldr	r3, [pc, #56]	; (80025a4 <_sbrk+0x50>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <_sbrk+0x50>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4413      	add	r3, r2
 8002578:	466a      	mov	r2, sp
 800257a:	4293      	cmp	r3, r2
 800257c:	d907      	bls.n	800258e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800257e:	f004 fc4d 	bl	8006e1c <__errno>
 8002582:	4602      	mov	r2, r0
 8002584:	230c      	movs	r3, #12
 8002586:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002588:	f04f 33ff 	mov.w	r3, #4294967295
 800258c:	e006      	b.n	800259c <_sbrk+0x48>
	}

	heap_end += incr;
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <_sbrk+0x50>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <_sbrk+0x50>)
 8002598:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200001f8 	.word	0x200001f8
 80025a8:	20000380 	.word	0x20000380

080025ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b0:	4b17      	ldr	r3, [pc, #92]	; (8002610 <SystemInit+0x64>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <SystemInit+0x64>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80025c0:	4b14      	ldr	r3, [pc, #80]	; (8002614 <SystemInit+0x68>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a13      	ldr	r2, [pc, #76]	; (8002614 <SystemInit+0x68>)
 80025c6:	f043 0301 	orr.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80025cc:	4b11      	ldr	r3, [pc, #68]	; (8002614 <SystemInit+0x68>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80025d2:	4b10      	ldr	r3, [pc, #64]	; (8002614 <SystemInit+0x68>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <SystemInit+0x68>)
 80025d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80025dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80025e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80025e2:	4b0c      	ldr	r3, [pc, #48]	; (8002614 <SystemInit+0x68>)
 80025e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80025ea:	4b0a      	ldr	r3, [pc, #40]	; (8002614 <SystemInit+0x68>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <SystemInit+0x68>)
 80025f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80025f6:	4b07      	ldr	r3, [pc, #28]	; (8002614 <SystemInit+0x68>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025fc:	4b04      	ldr	r3, [pc, #16]	; (8002610 <SystemInit+0x64>)
 80025fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002602:	609a      	str	r2, [r3, #8]
#endif
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	e000ed00 	.word	0xe000ed00
 8002614:	40021000 	.word	0x40021000

08002618 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002650 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800261c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800261e:	e003      	b.n	8002628 <LoopCopyDataInit>

08002620 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002622:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002624:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002626:	3104      	adds	r1, #4

08002628 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002628:	480b      	ldr	r0, [pc, #44]	; (8002658 <LoopForever+0xa>)
	ldr	r3, =_edata
 800262a:	4b0c      	ldr	r3, [pc, #48]	; (800265c <LoopForever+0xe>)
	adds	r2, r0, r1
 800262c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800262e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002630:	d3f6      	bcc.n	8002620 <CopyDataInit>
	ldr	r2, =_sbss
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002634:	e002      	b.n	800263c <LoopFillZerobss>

08002636 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002636:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002638:	f842 3b04 	str.w	r3, [r2], #4

0800263c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800263c:	4b09      	ldr	r3, [pc, #36]	; (8002664 <LoopForever+0x16>)
	cmp	r2, r3
 800263e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002640:	d3f9      	bcc.n	8002636 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002642:	f7ff ffb3 	bl	80025ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002646:	f004 fbef 	bl	8006e28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800264a:	f7ff fb2f 	bl	8001cac <main>

0800264e <LoopForever>:

LoopForever:
    b LoopForever
 800264e:	e7fe      	b.n	800264e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002650:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002654:	0800acc8 	.word	0x0800acc8
	ldr	r0, =_sdata
 8002658:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800265c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8002660:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8002664:	2000037c 	.word	0x2000037c

08002668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC1_2_IRQHandler>
	...

0800266c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002672:	2300      	movs	r3, #0
 8002674:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_Init+0x3c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_Init+0x3c>)
 800267c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002680:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002682:	2003      	movs	r0, #3
 8002684:	f001 fa90 	bl	8003ba8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002688:	2000      	movs	r0, #0
 800268a:	f000 f80f 	bl	80026ac <HAL_InitTick>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d002      	beq.n	800269a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	71fb      	strb	r3, [r7, #7]
 8002698:	e001      	b.n	800269e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800269a:	f7ff fe45 	bl	8002328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800269e:	79fb      	ldrb	r3, [r7, #7]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3708      	adds	r7, #8
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40022000 	.word	0x40022000

080026ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026b4:	2300      	movs	r3, #0
 80026b6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026b8:	4b16      	ldr	r3, [pc, #88]	; (8002714 <HAL_InitTick+0x68>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d022      	beq.n	8002706 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026c0:	4b15      	ldr	r3, [pc, #84]	; (8002718 <HAL_InitTick+0x6c>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <HAL_InitTick+0x68>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fa8e 	bl	8003bf6 <HAL_SYSTICK_Config>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10f      	bne.n	8002700 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b0f      	cmp	r3, #15
 80026e4:	d809      	bhi.n	80026fa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026e6:	2200      	movs	r2, #0
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	f04f 30ff 	mov.w	r0, #4294967295
 80026ee:	f001 fa66 	bl	8003bbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_InitTick+0x70>)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e007      	b.n	800270a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e004      	b.n	800270a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20000008 	.word	0x20000008
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002724:	4b05      	ldr	r3, [pc, #20]	; (800273c <HAL_IncTick+0x1c>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <HAL_IncTick+0x20>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4413      	add	r3, r2
 800272e:	4a03      	ldr	r2, [pc, #12]	; (800273c <HAL_IncTick+0x1c>)
 8002730:	6013      	str	r3, [r2, #0]
}
 8002732:	bf00      	nop
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	20000374 	.word	0x20000374
 8002740:	20000008 	.word	0x20000008

08002744 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  return uwTick;
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_GetTick+0x14>)
 800274a:	681b      	ldr	r3, [r3, #0]
}
 800274c:	4618      	mov	r0, r3
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	20000374 	.word	0x20000374

0800275c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002764:	f7ff ffee 	bl	8002744 <HAL_GetTick>
 8002768:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d004      	beq.n	8002780 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_Delay+0x40>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4413      	add	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002780:	bf00      	nop
 8002782:	f7ff ffdf 	bl	8002744 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	429a      	cmp	r2, r3
 8002790:	d8f7      	bhi.n	8002782 <HAL_Delay+0x26>
  {
  }
}
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008

080027a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	431a      	orrs	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b083      	sub	sp, #12
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	609a      	str	r2, [r3, #8]
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002808:	b490      	push	{r4, r7}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	3360      	adds	r3, #96	; 0x60
 800281a:	461a      	mov	r2, r3
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002824:	6822      	ldr	r2, [r4, #0]
 8002826:	4b08      	ldr	r3, [pc, #32]	; (8002848 <LL_ADC_SetOffset+0x40>)
 8002828:	4013      	ands	r3, r2
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	4313      	orrs	r3, r2
 8002836:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800283a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bc90      	pop	{r4, r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	03fff000 	.word	0x03fff000

0800284c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800284c:	b490      	push	{r4, r7}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002864:	6823      	ldr	r3, [r4, #0]
 8002866:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bc90      	pop	{r4, r7}
 8002872:	4770      	bx	lr

08002874 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002874:	b490      	push	{r4, r7}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3360      	adds	r3, #96	; 0x60
 8002884:	461a      	mov	r2, r3
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4313      	orrs	r3, r2
 8002898:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc90      	pop	{r4, r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028ca:	b490      	push	{r4, r7}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	3330      	adds	r3, #48	; 0x30
 80028da:	461a      	mov	r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	0a1b      	lsrs	r3, r3, #8
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	f003 030c 	and.w	r3, r3, #12
 80028e6:	4413      	add	r3, r2
 80028e8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80028ea:	6822      	ldr	r2, [r4, #0]
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 031f 	and.w	r3, r3, #31
 80028f2:	211f      	movs	r1, #31
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	401a      	ands	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	0e9b      	lsrs	r3, r3, #26
 8002900:	f003 011f 	and.w	r1, r3, #31
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	4313      	orrs	r3, r2
 8002910:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002912:	bf00      	nop
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bc90      	pop	{r4, r7}
 800291a:	4770      	bx	lr

0800291c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800291c:	b490      	push	{r4, r7}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	3314      	adds	r3, #20
 800292c:	461a      	mov	r2, r3
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	0e5b      	lsrs	r3, r3, #25
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	4413      	add	r3, r2
 800293a:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800293c:	6822      	ldr	r2, [r4, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	0d1b      	lsrs	r3, r3, #20
 8002942:	f003 031f 	and.w	r3, r3, #31
 8002946:	2107      	movs	r1, #7
 8002948:	fa01 f303 	lsl.w	r3, r1, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	0d1b      	lsrs	r3, r3, #20
 8002954:	f003 031f 	and.w	r3, r3, #31
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	fa01 f303 	lsl.w	r3, r1, r3
 800295e:	4313      	orrs	r3, r2
 8002960:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bc90      	pop	{r4, r7}
 800296a:	4770      	bx	lr

0800296c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002984:	43db      	mvns	r3, r3
 8002986:	401a      	ands	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f003 0318 	and.w	r3, r3, #24
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002990:	40d9      	lsrs	r1, r3
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	400b      	ands	r3, r1
 8002996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800299a:	431a      	orrs	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80029a2:	bf00      	nop
 80029a4:	3714      	adds	r7, #20
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	0007ffff 	.word	0x0007ffff

080029b4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 031f 	and.w	r3, r3, #31
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80029fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6093      	str	r3, [r2, #8]
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a24:	d101      	bne.n	8002a2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a26:	2301      	movs	r3, #1
 8002a28:	e000      	b.n	8002a2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a74:	d101      	bne.n	8002a7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a9c:	f043 0201 	orr.w	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <LL_ADC_IsEnabled+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_ADC_IsEnabled+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d101      	bne.n	8002b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d101      	bne.n	8002b3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e134      	b.n	8002dd0 <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d109      	bne.n	8002b88 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fbfb 	bl	8002370 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff3f 	bl	8002a10 <LL_ADC_IsDeepPowerDownEnabled>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d004      	beq.n	8002ba2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff25 	bl	80029ec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff ff5a 	bl	8002a60 <LL_ADC_IsInternalRegulatorEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d113      	bne.n	8002bda <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff ff3e 	bl	8002a38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002bbc:	4b86      	ldr	r3, [pc, #536]	; (8002dd8 <HAL_ADC_Init+0x28c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	099b      	lsrs	r3, r3, #6
 8002bc2:	4a86      	ldr	r2, [pc, #536]	; (8002ddc <HAL_ADC_Init+0x290>)
 8002bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc8:	099b      	lsrs	r3, r3, #6
 8002bca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bcc:	e002      	b.n	8002bd4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f9      	bne.n	8002bce <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7ff ff3e 	bl	8002a60 <LL_ADC_IsInternalRegulatorEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10d      	bne.n	8002c06 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0210 	orr.w	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfa:	f043 0201 	orr.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff77 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002c10:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c16:	f003 0310 	and.w	r3, r3, #16
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f040 80cf 	bne.w	8002dbe <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f040 80cb 	bne.w	8002dbe <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002c30:	f043 0202 	orr.w	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff37 	bl	8002ab0 <LL_ADC_IsEnabled>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c48:	4865      	ldr	r0, [pc, #404]	; (8002de0 <HAL_ADC_Init+0x294>)
 8002c4a:	f7ff ff31 	bl	8002ab0 <LL_ADC_IsEnabled>
 8002c4e:	4604      	mov	r4, r0
 8002c50:	4864      	ldr	r0, [pc, #400]	; (8002de4 <HAL_ADC_Init+0x298>)
 8002c52:	f7ff ff2d 	bl	8002ab0 <LL_ADC_IsEnabled>
 8002c56:	4603      	mov	r3, r0
 8002c58:	431c      	orrs	r4, r3
 8002c5a:	4863      	ldr	r0, [pc, #396]	; (8002de8 <HAL_ADC_Init+0x29c>)
 8002c5c:	f7ff ff28 	bl	8002ab0 <LL_ADC_IsEnabled>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4323      	orrs	r3, r4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	485f      	ldr	r0, [pc, #380]	; (8002dec <HAL_ADC_Init+0x2a0>)
 8002c70:	f7ff fd96 	bl	80027a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	7e5b      	ldrb	r3, [r3, #25]
 8002c78:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c7e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002c84:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002c8a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c92:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d106      	bne.n	8002cb0 <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	045b      	lsls	r3, r3, #17
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68da      	ldr	r2, [r3, #12]
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_ADC_Init+0x2a4>)
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6812      	ldr	r2, [r2, #0]
 8002cda:	69b9      	ldr	r1, [r7, #24]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff ff0a 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002cea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff17 	bl	8002b24 <LL_ADC_INJ_IsConversionOngoing>
 8002cf6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d13d      	bne.n	8002d7a <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d13a      	bne.n	8002d7a <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d08:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d20:	f023 0302 	bic.w	r3, r3, #2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6812      	ldr	r2, [r2, #0]
 8002d28:	69b9      	ldr	r1, [r7, #24]
 8002d2a:	430b      	orrs	r3, r1
 8002d2c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d118      	bne.n	8002d6a <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002d42:	f023 0304 	bic.w	r3, r3, #4
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	611a      	str	r2, [r3, #16]
 8002d68:	e007      	b.n	8002d7a <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10c      	bne.n	8002d9c <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d88:	f023 010f 	bic.w	r1, r3, #15
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	1e5a      	subs	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	430a      	orrs	r2, r1
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9a:	e007      	b.n	8002dac <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 020f 	bic.w	r2, r2, #15
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db0:	f023 0303 	bic.w	r3, r3, #3
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	655a      	str	r2, [r3, #84]	; 0x54
 8002dbc:	e007      	b.n	8002dce <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	f043 0210 	orr.w	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002dce:	7ffb      	ldrb	r3, [r7, #31]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3724      	adds	r7, #36	; 0x24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd90      	pop	{r4, r7, pc}
 8002dd8:	20000000 	.word	0x20000000
 8002ddc:	053e2d63 	.word	0x053e2d63
 8002de0:	50040000 	.word	0x50040000
 8002de4:	50040100 	.word	0x50040100
 8002de8:	50040200 	.word	0x50040200
 8002dec:	50040300 	.word	0x50040300
 8002df0:	fff0c007 	.word	0xfff0c007

08002df4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dfc:	4857      	ldr	r0, [pc, #348]	; (8002f5c <HAL_ADC_Start+0x168>)
 8002dfe:	f7ff fdd9 	bl	80029b4 <LL_ADC_GetMultimode>
 8002e02:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fe78 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 809c 	bne.w	8002f4e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_Start+0x30>
 8002e20:	2302      	movs	r3, #2
 8002e22:	e097      	b.n	8002f54 <HAL_ADC_Start+0x160>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fcdd 	bl	80037ec <ADC_Enable>
 8002e32:	4603      	mov	r3, r0
 8002e34:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f040 8083 	bne.w	8002f44 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e46:	f023 0301 	bic.w	r3, r3, #1
 8002e4a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a42      	ldr	r2, [pc, #264]	; (8002f60 <HAL_ADC_Start+0x16c>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d002      	beq.n	8002e62 <HAL_ADC_Start+0x6e>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	e000      	b.n	8002e64 <HAL_ADC_Start+0x70>
 8002e62:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_ADC_Start+0x170>)
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d002      	beq.n	8002e72 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e8a:	d106      	bne.n	8002e9a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	f023 0206 	bic.w	r2, r3, #6
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
 8002e98:	e002      	b.n	8002ea0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	221c      	movs	r2, #28
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2a      	ldr	r2, [pc, #168]	; (8002f60 <HAL_ADC_Start+0x16c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d002      	beq.n	8002ec0 <HAL_ADC_Start+0xcc>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	e000      	b.n	8002ec2 <HAL_ADC_Start+0xce>
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <HAL_ADC_Start+0x170>)
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d008      	beq.n	8002edc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	2b05      	cmp	r3, #5
 8002ed4:	d002      	beq.n	8002edc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	2b09      	cmp	r3, #9
 8002eda:	d114      	bne.n	8002f06 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d007      	beq.n	8002efa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ef2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff fde9 	bl	8002ad6 <LL_ADC_REG_StartConversion>
 8002f04:	e025      	b.n	8002f52 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <HAL_ADC_Start+0x16c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d002      	beq.n	8002f22 <HAL_ADC_Start+0x12e>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	e000      	b.n	8002f24 <HAL_ADC_Start+0x130>
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_ADC_Start+0x170>)
 8002f24:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00f      	beq.n	8002f52 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002f3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
 8002f42:	e006      	b.n	8002f52 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002f4c:	e001      	b.n	8002f52 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002f4e:	2302      	movs	r3, #2
 8002f50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	50040300 	.word	0x50040300
 8002f60:	50040100 	.word	0x50040100
 8002f64:	50040000 	.word	0x50040000

08002f68 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f72:	4862      	ldr	r0, [pc, #392]	; (80030fc <HAL_ADC_PollForConversion+0x194>)
 8002f74:	f7ff fd1e 	bl	80029b4 <LL_ADC_GetMultimode>
 8002f78:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	2b08      	cmp	r3, #8
 8002f80:	d102      	bne.n	8002f88 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f82:	2308      	movs	r3, #8
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e02a      	b.n	8002fde <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b05      	cmp	r3, #5
 8002f92:	d002      	beq.n	8002f9a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b09      	cmp	r3, #9
 8002f98:	d111      	bne.n	8002fbe <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e09d      	b.n	80030f4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fb8:	2304      	movs	r3, #4
 8002fba:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002fbc:	e00f      	b.n	8002fde <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002fbe:	484f      	ldr	r0, [pc, #316]	; (80030fc <HAL_ADC_PollForConversion+0x194>)
 8002fc0:	f7ff fd06 	bl	80029d0 <LL_ADC_GetMultiDMATransfer>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0220 	orr.w	r2, r3, #32
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e08c      	b.n	80030f4 <HAL_ADC_PollForConversion+0x18c>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fda:	2304      	movs	r3, #4
 8002fdc:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fde:	f7ff fbb1 	bl	8002744 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fe4:	e01a      	b.n	800301c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fec:	d016      	beq.n	800301c <HAL_ADC_PollForConversion+0xb4>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fee:	f7ff fba9 	bl	8002744 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <HAL_ADC_PollForConversion+0x9c>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10b      	bne.n	800301c <HAL_ADC_PollForConversion+0xb4>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003008:	f043 0204 	orr.w	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e06b      	b.n	80030f4 <HAL_ADC_PollForConversion+0x18c>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	4013      	ands	r3, r2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0dd      	beq.n	8002fe6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fc32 	bl	80028a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_ADC_PollForConversion+0x118>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7e5b      	ldrb	r3, [r3, #25]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d118      	bne.n	8003080 <HAL_ADC_PollForConversion+0x118>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b08      	cmp	r3, #8
 800305a:	d111      	bne.n	8003080 <HAL_ADC_PollForConversion+0x118>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003060:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d105      	bne.n	8003080 <HAL_ADC_PollForConversion+0x118>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1e      	ldr	r2, [pc, #120]	; (8003100 <HAL_ADC_PollForConversion+0x198>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d002      	beq.n	8003090 <HAL_ADC_PollForConversion+0x128>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	e000      	b.n	8003092 <HAL_ADC_PollForConversion+0x12a>
 8003090:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_ADC_PollForConversion+0x19c>)
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6812      	ldr	r2, [r2, #0]
 8003096:	4293      	cmp	r3, r2
 8003098:	d008      	beq.n	80030ac <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d005      	beq.n	80030ac <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b05      	cmp	r3, #5
 80030a4:	d002      	beq.n	80030ac <HAL_ADC_PollForConversion+0x144>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	d104      	bne.n	80030b6 <HAL_ADC_PollForConversion+0x14e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	e00c      	b.n	80030d0 <HAL_ADC_PollForConversion+0x168>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a11      	ldr	r2, [pc, #68]	; (8003100 <HAL_ADC_PollForConversion+0x198>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d002      	beq.n	80030c6 <HAL_ADC_PollForConversion+0x15e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_PollForConversion+0x160>
 80030c6:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <HAL_ADC_PollForConversion+0x19c>)
 80030c8:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d104      	bne.n	80030e0 <HAL_ADC_PollForConversion+0x178>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2208      	movs	r2, #8
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	e008      	b.n	80030f2 <HAL_ADC_PollForConversion+0x18a>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d103      	bne.n	80030f2 <HAL_ADC_PollForConversion+0x18a>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	220c      	movs	r2, #12
 80030f0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3720      	adds	r7, #32
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	50040300 	.word	0x50040300
 8003100:	50040100 	.word	0x50040100
 8003104:	50040000 	.word	0x50040000

08003108 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003116:	4618      	mov	r0, r3
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b0a6      	sub	sp, #152	; 0x98
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800313e:	2b01      	cmp	r3, #1
 8003140:	d101      	bne.n	8003146 <HAL_ADC_ConfigChannel+0x22>
 8003142:	2302      	movs	r3, #2
 8003144:	e348      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x6b4>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2201      	movs	r2, #1
 800314a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fcd3 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8329 	bne.w	80037b2 <HAL_ADC_ConfigChannel+0x68e>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b05      	cmp	r3, #5
 8003166:	d824      	bhi.n	80031b2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	3b02      	subs	r3, #2
 800316e:	2b03      	cmp	r3, #3
 8003170:	d81b      	bhi.n	80031aa <HAL_ADC_ConfigChannel+0x86>
 8003172:	a201      	add	r2, pc, #4	; (adr r2, 8003178 <HAL_ADC_ConfigChannel+0x54>)
 8003174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003178:	08003189 	.word	0x08003189
 800317c:	08003191 	.word	0x08003191
 8003180:	08003199 	.word	0x08003199
 8003184:	080031a1 	.word	0x080031a1
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	220c      	movs	r2, #12
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	e011      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	2212      	movs	r2, #18
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	e00d      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	2218      	movs	r2, #24
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e009      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	e004      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1; break;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2206      	movs	r2, #6
 80031ae:	605a      	str	r2, [r3, #4]
 80031b0:	e000      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80031b2:	bf00      	nop
    #endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6818      	ldr	r0, [r3, #0]
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	f7ff fb82 	bl	80028ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fc97 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 80031d0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7ff fca3 	bl	8002b24 <LL_ADC_INJ_IsConversionOngoing>
 80031de:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f040 8148 	bne.w	800347c <HAL_ADC_ConfigChannel+0x358>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f040 8143 	bne.w	800347c <HAL_ADC_ConfigChannel+0x358>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	461a      	mov	r2, r3
 8003204:	f7ff fb8a 	bl	800291c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	695a      	ldr	r2, [r3, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	08db      	lsrs	r3, r3, #3
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	2b04      	cmp	r3, #4
 8003228:	d00a      	beq.n	8003240 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6919      	ldr	r1, [r3, #16]
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323a:	f7ff fae5 	bl	8002808 <LL_ADC_SetOffset>
 800323e:	e11d      	b.n	800347c <HAL_ADC_ConfigChannel+0x358>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f7ff fb00 	bl	800284c <LL_ADC_GetOffsetChannel>
 800324c:	4603      	mov	r3, r0
 800324e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x148>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff faf5 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003262:	4603      	mov	r3, r0
 8003264:	0e9b      	lsrs	r3, r3, #26
 8003266:	f003 021f 	and.w	r2, r3, #31
 800326a:	e012      	b.n	8003292 <HAL_ADC_ConfigChannel+0x16e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff faea 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003278:	4603      	mov	r3, r0
 800327a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800328a:	fab3 f383 	clz	r3, r3
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800329a:	2b00      	cmp	r3, #0
 800329c:	d105      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x186>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	0e9b      	lsrs	r3, r3, #26
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	e00a      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x19c>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80032b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d106      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x1ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fad1 	bl	8002874 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2101      	movs	r1, #1
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fab7 	bl	800284c <LL_ADC_GetOffsetChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <HAL_ADC_ConfigChannel+0x1da>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2101      	movs	r1, #1
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff faac 	bl	800284c <LL_ADC_GetOffsetChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	0e9b      	lsrs	r3, r3, #26
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	e010      	b.n	8003320 <HAL_ADC_ConfigChannel+0x1fc>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f7ff faa1 	bl	800284c <LL_ADC_GetOffsetChannel>
 800330a:	4603      	mov	r3, r0
 800330c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003318:	fab3 f383 	clz	r3, r3
 800331c:	b2db      	uxtb	r3, r3
 800331e:	461a      	mov	r2, r3
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_ADC_ConfigChannel+0x214>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	e00a      	b.n	800334e <HAL_ADC_ConfigChannel+0x22a>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003346:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	429a      	cmp	r2, r3
 8003350:	d106      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x23c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2200      	movs	r2, #0
 8003358:	2101      	movs	r1, #1
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fa8a 	bl	8002874 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff fa70 	bl	800284c <LL_ADC_GetOffsetChannel>
 800336c:	4603      	mov	r3, r0
 800336e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <HAL_ADC_ConfigChannel+0x268>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2102      	movs	r1, #2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff fa65 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	0e9b      	lsrs	r3, r3, #26
 8003386:	f003 021f 	and.w	r2, r3, #31
 800338a:	e010      	b.n	80033ae <HAL_ADC_ConfigChannel+0x28a>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2102      	movs	r1, #2
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff fa5a 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003398:	4603      	mov	r3, r0
 800339a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339e:	fa93 f3a3 	rbit	r3, r3
 80033a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80033a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_ADC_ConfigChannel+0x2a2>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	0e9b      	lsrs	r3, r3, #26
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	e00a      	b.n	80033dc <HAL_ADC_ConfigChannel+0x2b8>
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80033d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	429a      	cmp	r2, r3
 80033de:	d106      	bne.n	80033ee <HAL_ADC_ConfigChannel+0x2ca>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2200      	movs	r2, #0
 80033e6:	2102      	movs	r1, #2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fa43 	bl	8002874 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2103      	movs	r1, #3
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff fa29 	bl	800284c <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_ADC_ConfigChannel+0x2f6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2103      	movs	r1, #3
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fa1e 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	0e9b      	lsrs	r3, r3, #26
 8003414:	f003 021f 	and.w	r2, r3, #31
 8003418:	e010      	b.n	800343c <HAL_ADC_ConfigChannel+0x318>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2103      	movs	r1, #3
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fa13 	bl	800284c <LL_ADC_GetOffsetChannel>
 8003426:	4603      	mov	r3, r0
 8003428:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342c:	fa93 f3a3 	rbit	r3, r3
 8003430:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	461a      	mov	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x330>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	e00a      	b.n	800346a <HAL_ADC_ConfigChannel+0x346>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345c:	fa93 f3a3 	rbit	r3, r3
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	429a      	cmp	r2, r3
 800346c:	d106      	bne.n	800347c <HAL_ADC_ConfigChannel+0x358>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	2103      	movs	r1, #3
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff f9fc 	bl	8002874 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff fb15 	bl	8002ab0 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 810c 	bne.w	80036a6 <HAL_ADC_ConfigChannel+0x582>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6818      	ldr	r0, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	6819      	ldr	r1, [r3, #0]
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	461a      	mov	r2, r3
 800349c:	f7ff fa66 	bl	800296c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	4aad      	ldr	r2, [pc, #692]	; (800375c <HAL_ADC_ConfigChannel+0x638>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	f040 80fd 	bne.w	80036a6 <HAL_ADC_ConfigChannel+0x582>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10b      	bne.n	80034d4 <HAL_ADC_ConfigChannel+0x3b0>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	3301      	adds	r3, #1
 80034c4:	f003 031f 	and.w	r3, r3, #31
 80034c8:	2b09      	cmp	r3, #9
 80034ca:	bf94      	ite	ls
 80034cc:	2301      	movls	r3, #1
 80034ce:	2300      	movhi	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	e012      	b.n	80034fa <HAL_ADC_ConfigChannel+0x3d6>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034dc:	fa93 f3a3 	rbit	r3, r3
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	fab3 f383 	clz	r3, r3
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2b09      	cmp	r3, #9
 80034f2:	bf94      	ite	ls
 80034f4:	2301      	movls	r3, #1
 80034f6:	2300      	movhi	r3, #0
 80034f8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d064      	beq.n	80035c8 <HAL_ADC_ConfigChannel+0x4a4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003506:	2b00      	cmp	r3, #0
 8003508:	d107      	bne.n	800351a <HAL_ADC_ConfigChannel+0x3f6>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	0e9b      	lsrs	r3, r3, #26
 8003510:	3301      	adds	r3, #1
 8003512:	069b      	lsls	r3, r3, #26
 8003514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003518:	e00e      	b.n	8003538 <HAL_ADC_ConfigChannel+0x414>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003522:	fa93 f3a3 	rbit	r3, r3
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	3301      	adds	r3, #1
 8003532:	069b      	lsls	r3, r3, #26
 8003534:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003540:	2b00      	cmp	r3, #0
 8003542:	d109      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x434>
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	0e9b      	lsrs	r3, r3, #26
 800354a:	3301      	adds	r3, #1
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	2101      	movs	r1, #1
 8003552:	fa01 f303 	lsl.w	r3, r1, r3
 8003556:	e010      	b.n	800357a <HAL_ADC_ConfigChannel+0x456>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003560:	fa93 f3a3 	rbit	r3, r3
 8003564:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003568:	fab3 f383 	clz	r3, r3
 800356c:	b2db      	uxtb	r3, r3
 800356e:	3301      	adds	r3, #1
 8003570:	f003 031f 	and.w	r3, r3, #31
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f303 	lsl.w	r3, r1, r3
 800357a:	ea42 0103 	orr.w	r1, r2, r3
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <HAL_ADC_ConfigChannel+0x47c>
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	0e9b      	lsrs	r3, r3, #26
 8003590:	3301      	adds	r3, #1
 8003592:	f003 021f 	and.w	r2, r3, #31
 8003596:	4613      	mov	r3, r2
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	4413      	add	r3, r2
 800359c:	051b      	lsls	r3, r3, #20
 800359e:	e011      	b.n	80035c4 <HAL_ADC_ConfigChannel+0x4a0>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	fa93 f3a3 	rbit	r3, r3
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	fab3 f383 	clz	r3, r3
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	3301      	adds	r3, #1
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	4613      	mov	r3, r2
 80035be:	005b      	lsls	r3, r3, #1
 80035c0:	4413      	add	r3, r2
 80035c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035c4:	430b      	orrs	r3, r1
 80035c6:	e069      	b.n	800369c <HAL_ADC_ConfigChannel+0x578>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x4c0>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	3301      	adds	r3, #1
 80035dc:	069b      	lsls	r3, r3, #26
 80035de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035e2:	e00e      	b.n	8003602 <HAL_ADC_ConfigChannel+0x4de>
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ea:	6a3b      	ldr	r3, [r7, #32]
 80035ec:	fa93 f3a3 	rbit	r3, r3
 80035f0:	61fb      	str	r3, [r7, #28]
  return result;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	fab3 f383 	clz	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3301      	adds	r3, #1
 80035fc:	069b      	lsls	r3, r3, #26
 80035fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <HAL_ADC_ConfigChannel+0x4fe>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	0e9b      	lsrs	r3, r3, #26
 8003614:	3301      	adds	r3, #1
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	e010      	b.n	8003644 <HAL_ADC_ConfigChannel+0x520>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	617b      	str	r3, [r7, #20]
  return result;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fab3 f383 	clz	r3, r3
 8003636:	b2db      	uxtb	r3, r3
 8003638:	3301      	adds	r3, #1
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	2101      	movs	r1, #1
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	ea42 0103 	orr.w	r1, r2, r3
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10d      	bne.n	8003670 <HAL_ADC_ConfigChannel+0x54c>
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	0e9b      	lsrs	r3, r3, #26
 800365a:	3301      	adds	r3, #1
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	4613      	mov	r3, r2
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	4413      	add	r3, r2
 8003666:	3b1e      	subs	r3, #30
 8003668:	051b      	lsls	r3, r3, #20
 800366a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800366e:	e014      	b.n	800369a <HAL_ADC_ConfigChannel+0x576>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	fa93 f3a3 	rbit	r3, r3
 800367c:	60fb      	str	r3, [r7, #12]
  return result;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	fab3 f383 	clz	r3, r3
 8003684:	b2db      	uxtb	r3, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f003 021f 	and.w	r2, r3, #31
 800368c:	4613      	mov	r3, r2
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4413      	add	r3, r2
 8003692:	3b1e      	subs	r3, #30
 8003694:	051b      	lsls	r3, r3, #20
 8003696:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800369a:	430b      	orrs	r3, r1
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	6892      	ldr	r2, [r2, #8]
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7ff f93b 	bl	800291c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_ADC_ConfigChannel+0x63c>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 808c 	beq.w	80037cc <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80036b4:	482b      	ldr	r0, [pc, #172]	; (8003764 <HAL_ADC_ConfigChannel+0x640>)
 80036b6:	f7ff f899 	bl	80027ec <LL_ADC_GetCommonPathInternalCh>
 80036ba:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_ADC_ConfigChannel+0x644>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d12b      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x5fc>
 80036c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d125      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x5fc>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a24      	ldr	r2, [pc, #144]	; (800376c <HAL_ADC_ConfigChannel+0x648>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_ADC_ConfigChannel+0x5c4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a23      	ldr	r2, [pc, #140]	; (8003770 <HAL_ADC_ConfigChannel+0x64c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d16e      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x6a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80036ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f0:	4619      	mov	r1, r3
 80036f2:	481c      	ldr	r0, [pc, #112]	; (8003764 <HAL_ADC_ConfigChannel+0x640>)
 80036f4:	f7ff f867 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_ADC_ConfigChannel+0x650>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_ADC_ConfigChannel+0x654>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099a      	lsrs	r2, r3, #6
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003710:	e002      	b.n	8003718 <HAL_ADC_ConfigChannel+0x5f4>
          {
            wait_loop_index--;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	3b01      	subs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1f9      	bne.n	8003712 <HAL_ADC_ConfigChannel+0x5ee>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800371e:	e052      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x6a2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a15      	ldr	r2, [pc, #84]	; (800377c <HAL_ADC_ConfigChannel+0x658>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d12a      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x65c>
 800372a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800372e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d124      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x65c>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <HAL_ADC_ConfigChannel+0x648>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d004      	beq.n	800374a <HAL_ADC_ConfigChannel+0x626>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a0a      	ldr	r2, [pc, #40]	; (8003770 <HAL_ADC_ConfigChannel+0x64c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d13f      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x6a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800374e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003752:	4619      	mov	r1, r3
 8003754:	4803      	ldr	r0, [pc, #12]	; (8003764 <HAL_ADC_ConfigChannel+0x640>)
 8003756:	f7ff f836 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800375a:	e036      	b.n	80037ca <HAL_ADC_ConfigChannel+0x6a6>
 800375c:	407f0000 	.word	0x407f0000
 8003760:	80080000 	.word	0x80080000
 8003764:	50040300 	.word	0x50040300
 8003768:	c7520000 	.word	0xc7520000
 800376c:	50040000 	.word	0x50040000
 8003770:	50040200 	.word	0x50040200
 8003774:	20000000 	.word	0x20000000
 8003778:	053e2d63 	.word	0x053e2d63
 800377c:	cb840000 	.word	0xcb840000
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_ADC_ConfigChannel+0x6bc>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d120      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800378a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800378e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d11a      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_ADC_ConfigChannel+0x6c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d115      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037a8:	4619      	mov	r1, r3
 80037aa:	480f      	ldr	r0, [pc, #60]	; (80037e8 <HAL_ADC_ConfigChannel+0x6c4>)
 80037ac:	f7ff f80b 	bl	80027c6 <LL_ADC_SetCommonPathInternalCh>
 80037b0:	e00c      	b.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b6:	f043 0220 	orr.w	r2, r3, #32
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80037c4:	e002      	b.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037c6:	bf00      	nop
 80037c8:	e000      	b.n	80037cc <HAL_ADC_ConfigChannel+0x6a8>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037d4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3798      	adds	r7, #152	; 0x98
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	80000001 	.word	0x80000001
 80037e4:	50040000 	.word	0x50040000
 80037e8:	50040300 	.word	0x50040300

080037ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f959 	bl	8002ab0 <LL_ADC_IsEnabled>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d146      	bne.n	8003892 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <ADC_Enable+0xb0>)
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00d      	beq.n	800382e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003816:	f043 0210 	orr.w	r2, r3, #16
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003822:	f043 0201 	orr.w	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e032      	b.n	8003894 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f928 	bl	8002a88 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003838:	f7fe ff84 	bl	8002744 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800383e:	e021      	b.n	8003884 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f7ff f933 	bl	8002ab0 <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d104      	bne.n	800385a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f917 	bl	8002a88 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800385a:	f7fe ff73 	bl	8002744 <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d90d      	bls.n	8003884 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	f043 0210 	orr.w	r2, r3, #16
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003878:	f043 0201 	orr.w	r2, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e007      	b.n	8003894 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b01      	cmp	r3, #1
 8003890:	d1d6      	bne.n	8003840 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	8000003f 	.word	0x8000003f

080038a0 <LL_ADC_IsEnabled>:
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d101      	bne.n	80038b8 <LL_ADC_IsEnabled+0x18>
 80038b4:	2301      	movs	r3, #1
 80038b6:	e000      	b.n	80038ba <LL_ADC_IsEnabled+0x1a>
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_ADC_REG_IsConversionOngoing>:
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0304 	and.w	r3, r3, #4
 80038d6:	2b04      	cmp	r3, #4
 80038d8:	d101      	bne.n	80038de <LL_ADC_REG_IsConversionOngoing+0x18>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80038ec:	b590      	push	{r4, r7, lr}
 80038ee:	b09f      	sub	sp, #124	; 0x7c
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003906:	2302      	movs	r3, #2
 8003908:	e08f      	b.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a47      	ldr	r2, [pc, #284]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d102      	bne.n	8003922 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800391c:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	e001      	b.n	8003926 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e072      	b.n	8003a2a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff ffbd 	bl	80038c6 <LL_ADC_REG_IsConversionOngoing>
 800394c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff ffb7 	bl	80038c6 <LL_ADC_REG_IsConversionOngoing>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d154      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800395e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003960:	2b00      	cmp	r3, #0
 8003962:	d151      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003964:	4b35      	ldr	r3, [pc, #212]	; (8003a3c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003966:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d02c      	beq.n	80039ca <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003982:	035b      	lsls	r3, r3, #13
 8003984:	430b      	orrs	r3, r1
 8003986:	431a      	orrs	r2, r3
 8003988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800398a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800398c:	4829      	ldr	r0, [pc, #164]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800398e:	f7ff ff87 	bl	80038a0 <LL_ADC_IsEnabled>
 8003992:	4604      	mov	r4, r0
 8003994:	4828      	ldr	r0, [pc, #160]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003996:	f7ff ff83 	bl	80038a0 <LL_ADC_IsEnabled>
 800399a:	4603      	mov	r3, r0
 800399c:	431c      	orrs	r4, r3
 800399e:	4828      	ldr	r0, [pc, #160]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039a0:	f7ff ff7e 	bl	80038a0 <LL_ADC_IsEnabled>
 80039a4:	4603      	mov	r3, r0
 80039a6:	4323      	orrs	r3, r4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d137      	bne.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80039ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039b4:	f023 030f 	bic.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	6811      	ldr	r1, [r2, #0]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	6892      	ldr	r2, [r2, #8]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	431a      	orrs	r2, r3
 80039c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039c6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80039c8:	e028      	b.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80039ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039d4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039d6:	4817      	ldr	r0, [pc, #92]	; (8003a34 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80039d8:	f7ff ff62 	bl	80038a0 <LL_ADC_IsEnabled>
 80039dc:	4604      	mov	r4, r0
 80039de:	4816      	ldr	r0, [pc, #88]	; (8003a38 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80039e0:	f7ff ff5e 	bl	80038a0 <LL_ADC_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	431c      	orrs	r4, r3
 80039e8:	4815      	ldr	r0, [pc, #84]	; (8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80039ea:	f7ff ff59 	bl	80038a0 <LL_ADC_IsEnabled>
 80039ee:	4603      	mov	r3, r0
 80039f0:	4323      	orrs	r3, r4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d112      	bne.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80039fe:	f023 030f 	bic.w	r3, r3, #15
 8003a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a04:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a06:	e009      	b.n	8003a1c <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0c:	f043 0220 	orr.w	r2, r3, #32
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003a1a:	e000      	b.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003a26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	377c      	adds	r7, #124	; 0x7c
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd90      	pop	{r4, r7, pc}
 8003a32:	bf00      	nop
 8003a34:	50040000 	.word	0x50040000
 8003a38:	50040100 	.word	0x50040100
 8003a3c:	50040300 	.word	0x50040300
 8003a40:	50040200 	.word	0x50040200

08003a44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a54:	4b0c      	ldr	r3, [pc, #48]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a60:	4013      	ands	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a76:	4a04      	ldr	r2, [pc, #16]	; (8003a88 <__NVIC_SetPriorityGrouping+0x44>)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	60d3      	str	r3, [r2, #12]
}
 8003a7c:	bf00      	nop
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	e000ed00 	.word	0xe000ed00

08003a8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0a1b      	lsrs	r3, r3, #8
 8003a96:	f003 0307 	and.w	r3, r3, #7
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	4603      	mov	r3, r0
 8003ab0:	6039      	str	r1, [r7, #0]
 8003ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	db0a      	blt.n	8003ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	490c      	ldr	r1, [pc, #48]	; (8003af4 <__NVIC_SetPriority+0x4c>)
 8003ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac6:	0112      	lsls	r2, r2, #4
 8003ac8:	b2d2      	uxtb	r2, r2
 8003aca:	440b      	add	r3, r1
 8003acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad0:	e00a      	b.n	8003ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4908      	ldr	r1, [pc, #32]	; (8003af8 <__NVIC_SetPriority+0x50>)
 8003ad8:	79fb      	ldrb	r3, [r7, #7]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	3b04      	subs	r3, #4
 8003ae0:	0112      	lsls	r2, r2, #4
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	761a      	strb	r2, [r3, #24]
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr
 8003af4:	e000e100 	.word	0xe000e100
 8003af8:	e000ed00 	.word	0xe000ed00

08003afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b089      	sub	sp, #36	; 0x24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f1c3 0307 	rsb	r3, r3, #7
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	bf28      	it	cs
 8003b1a:	2304      	movcs	r3, #4
 8003b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3304      	adds	r3, #4
 8003b22:	2b06      	cmp	r3, #6
 8003b24:	d902      	bls.n	8003b2c <NVIC_EncodePriority+0x30>
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3b03      	subs	r3, #3
 8003b2a:	e000      	b.n	8003b2e <NVIC_EncodePriority+0x32>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b30:	f04f 32ff 	mov.w	r2, #4294967295
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43da      	mvns	r2, r3
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	401a      	ands	r2, r3
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b44:	f04f 31ff 	mov.w	r1, #4294967295
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	43d9      	mvns	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b54:	4313      	orrs	r3, r2
         );
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3724      	adds	r7, #36	; 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b74:	d301      	bcc.n	8003b7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b76:	2301      	movs	r3, #1
 8003b78:	e00f      	b.n	8003b9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7a:	4a0a      	ldr	r2, [pc, #40]	; (8003ba4 <SysTick_Config+0x40>)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b82:	210f      	movs	r1, #15
 8003b84:	f04f 30ff 	mov.w	r0, #4294967295
 8003b88:	f7ff ff8e 	bl	8003aa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <SysTick_Config+0x40>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b92:	4b04      	ldr	r3, [pc, #16]	; (8003ba4 <SysTick_Config+0x40>)
 8003b94:	2207      	movs	r2, #7
 8003b96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3708      	adds	r7, #8
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	e000e010 	.word	0xe000e010

08003ba8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff ff47 	bl	8003a44 <__NVIC_SetPriorityGrouping>
}
 8003bb6:	bf00      	nop
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b086      	sub	sp, #24
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
 8003bca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd0:	f7ff ff5c 	bl	8003a8c <__NVIC_GetPriorityGrouping>
 8003bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	68b9      	ldr	r1, [r7, #8]
 8003bda:	6978      	ldr	r0, [r7, #20]
 8003bdc:	f7ff ff8e 	bl	8003afc <NVIC_EncodePriority>
 8003be0:	4602      	mov	r2, r0
 8003be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003be6:	4611      	mov	r1, r2
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff ff5d 	bl	8003aa8 <__NVIC_SetPriority>
}
 8003bee:	bf00      	nop
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b082      	sub	sp, #8
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7ff ffb0 	bl	8003b64 <SysTick_Config>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
	...

08003c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c1e:	e17f      	b.n	8003f20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 8171 	beq.w	8003f1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d00b      	beq.n	8003c58 <HAL_GPIO_Init+0x48>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d007      	beq.n	8003c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c4c:	2b11      	cmp	r3, #17
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	2b12      	cmp	r3, #18
 8003c56:	d130      	bne.n	8003cba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c8e:	2201      	movs	r2, #1
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	091b      	lsrs	r3, r3, #4
 8003ca4:	f003 0201 	and.w	r2, r3, #1
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d118      	bne.n	8003cf8 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	08db      	lsrs	r3, r3, #3
 8003ce2:	f003 0201 	and.w	r2, r3, #1
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x128>
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b12      	cmp	r3, #18
 8003d36:	d123      	bne.n	8003d80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	08da      	lsrs	r2, r3, #3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3208      	adds	r2, #8
 8003d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	691a      	ldr	r2, [r3, #16]
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 0307 	and.w	r3, r3, #7
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	08da      	lsrs	r2, r3, #3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3208      	adds	r2, #8
 8003d7a:	6939      	ldr	r1, [r7, #16]
 8003d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	4013      	ands	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f003 0203 	and.w	r2, r3, #3
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 80ac 	beq.w	8003f1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc2:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <HAL_GPIO_Init+0x32c>)
 8003dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	; (8003f3c <HAL_GPIO_Init+0x32c>)
 8003dc8:	f043 0301 	orr.w	r3, r3, #1
 8003dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8003dce:	4b5b      	ldr	r3, [pc, #364]	; (8003f3c <HAL_GPIO_Init+0x32c>)
 8003dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	60bb      	str	r3, [r7, #8]
 8003dd8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003dda:	4a59      	ldr	r2, [pc, #356]	; (8003f40 <HAL_GPIO_Init+0x330>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003e04:	d025      	beq.n	8003e52 <HAL_GPIO_Init+0x242>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a4e      	ldr	r2, [pc, #312]	; (8003f44 <HAL_GPIO_Init+0x334>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <HAL_GPIO_Init+0x23e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a4d      	ldr	r2, [pc, #308]	; (8003f48 <HAL_GPIO_Init+0x338>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_GPIO_Init+0x23a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4c      	ldr	r2, [pc, #304]	; (8003f4c <HAL_GPIO_Init+0x33c>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_GPIO_Init+0x236>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <HAL_GPIO_Init+0x340>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00d      	beq.n	8003e42 <HAL_GPIO_Init+0x232>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4a      	ldr	r2, [pc, #296]	; (8003f54 <HAL_GPIO_Init+0x344>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x22e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a49      	ldr	r2, [pc, #292]	; (8003f58 <HAL_GPIO_Init+0x348>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_GPIO_Init+0x22a>
 8003e36:	2306      	movs	r3, #6
 8003e38:	e00c      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e3a:	2307      	movs	r3, #7
 8003e3c:	e00a      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e3e:	2305      	movs	r3, #5
 8003e40:	e008      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e42:	2304      	movs	r3, #4
 8003e44:	e006      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e46:	2303      	movs	r3, #3
 8003e48:	e004      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e4a:	2302      	movs	r3, #2
 8003e4c:	e002      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <HAL_GPIO_Init+0x244>
 8003e52:	2300      	movs	r3, #0
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	f002 0203 	and.w	r2, r2, #3
 8003e5a:	0092      	lsls	r2, r2, #2
 8003e5c:	4093      	lsls	r3, r2
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e64:	4936      	ldr	r1, [pc, #216]	; (8003f40 <HAL_GPIO_Init+0x330>)
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	3302      	adds	r3, #2
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e72:	4b3a      	ldr	r3, [pc, #232]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d003      	beq.n	8003e96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e96:	4a31      	ldr	r2, [pc, #196]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d003      	beq.n	8003ec0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec0:	4a26      	ldr	r2, [pc, #152]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ec6:	4b25      	ldr	r3, [pc, #148]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003eea:	4a1c      	ldr	r2, [pc, #112]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ef0:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003f14:	4a11      	ldr	r2, [pc, #68]	; (8003f5c <HAL_GPIO_Init+0x34c>)
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa22 f303 	lsr.w	r3, r2, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f47f ae78 	bne.w	8003c20 <HAL_GPIO_Init+0x10>
  }
}
 8003f30:	bf00      	nop
 8003f32:	371c      	adds	r7, #28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	40010000 	.word	0x40010000
 8003f44:	48000400 	.word	0x48000400
 8003f48:	48000800 	.word	0x48000800
 8003f4c:	48000c00 	.word	0x48000c00
 8003f50:	48001000 	.word	0x48001000
 8003f54:	48001400 	.word	0x48001400
 8003f58:	48001800 	.word	0x48001800
 8003f5c:	40010400 	.word	0x40010400

08003f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	807b      	strh	r3, [r7, #2]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f70:	787b      	ldrb	r3, [r7, #1]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d003      	beq.n	8003f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f76:	887a      	ldrh	r2, [r7, #2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f7c:	e002      	b.n	8003f84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	887b      	ldrh	r3, [r7, #2]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fa8:	887a      	ldrh	r2, [r7, #2]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003fae:	e002      	b.n	8003fb6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fb0:	887a      	ldrh	r2, [r7, #2]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	619a      	str	r2, [r3, #24]
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b082      	sub	sp, #8
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e081      	b.n	80040d8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7fe f9ff 	bl	80023ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2224      	movs	r2, #36	; 0x24
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0201 	bic.w	r2, r2, #1
 8004004:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004012:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004022:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	e006      	b.n	800404a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004048:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d104      	bne.n	800405c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800405a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800406a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800406e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691a      	ldr	r2, [r3, #16]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	695b      	ldr	r3, [r3, #20]
 8004088:	ea42 0103 	orr.w	r1, r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	021a      	lsls	r2, r3, #8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69d9      	ldr	r1, [r3, #28]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1a      	ldr	r2, [r3, #32]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3708      	adds	r7, #8
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b20      	cmp	r3, #32
 8004104:	f040 80f9 	bne.w	80042fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_I2C_Mem_Write+0x34>
 800410e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004110:	2b00      	cmp	r3, #0
 8004112:	d105      	bne.n	8004120 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f44f 7200 	mov.w	r2, #512	; 0x200
 800411a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e0ed      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_I2C_Mem_Write+0x4e>
 800412a:	2302      	movs	r3, #2
 800412c:	e0e6      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004136:	f7fe fb05 	bl	8002744 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	2319      	movs	r3, #25
 8004142:	2201      	movs	r2, #1
 8004144:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f000 fbcb 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e0d1      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2221      	movs	r2, #33	; 0x21
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2240      	movs	r2, #64	; 0x40
 8004164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a3a      	ldr	r2, [r7, #32]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004178:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004180:	88f8      	ldrh	r0, [r7, #6]
 8004182:	893a      	ldrh	r2, [r7, #8]
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	9301      	str	r3, [sp, #4]
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	4603      	mov	r3, r0
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 fadb 	bl	800474c <I2C_RequestMemoryWrite>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0a9      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2bff      	cmp	r3, #255	; 0xff
 80041b0:	d90e      	bls.n	80041d0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	8979      	ldrh	r1, [r7, #10]
 80041c0:	2300      	movs	r3, #0
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f000 fcad 	bl	8004b28 <I2C_TransferConfig>
 80041ce:	e00f      	b.n	80041f0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	8979      	ldrh	r1, [r7, #10]
 80041e2:	2300      	movs	r3, #0
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fc9c 	bl	8004b28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fbb5 	bl	8004964 <I2C_WaitOnTXISFlagUntilTimeout>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d001      	beq.n	8004204 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e07b      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	781a      	ldrb	r2, [r3, #0]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d034      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x1c8>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004242:	2b00      	cmp	r3, #0
 8004244:	d130      	bne.n	80042a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424c:	2200      	movs	r2, #0
 800424e:	2180      	movs	r1, #128	; 0x80
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fb47 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e04d      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	; 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fc51 	bl	8004b28 <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fc40 	bl	8004b28 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d19e      	bne.n	80041f0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042b6:	68f8      	ldr	r0, [r7, #12]
 80042b8:	f000 fb94 	bl	80049e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e01a      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2220      	movs	r2, #32
 80042cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6859      	ldr	r1, [r3, #4]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <HAL_I2C_Mem_Write+0x224>)
 80042da:	400b      	ands	r3, r1
 80042dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	e000      	b.n	80042fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
  }
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}
 8004304:	fe00e800 	.word	0xfe00e800

08004308 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af02      	add	r7, sp, #8
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	461a      	mov	r2, r3
 8004316:	4603      	mov	r3, r0
 8004318:	817b      	strh	r3, [r7, #10]
 800431a:	460b      	mov	r3, r1
 800431c:	813b      	strh	r3, [r7, #8]
 800431e:	4613      	mov	r3, r2
 8004320:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b20      	cmp	r3, #32
 800432c:	f040 80fd 	bne.w	800452a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_I2C_Mem_Read+0x34>
 8004336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004338:	2b00      	cmp	r3, #0
 800433a:	d105      	bne.n	8004348 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004342:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e0f1      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_I2C_Mem_Read+0x4e>
 8004352:	2302      	movs	r3, #2
 8004354:	e0ea      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800435e:	f7fe f9f1 	bl	8002744 <HAL_GetTick>
 8004362:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2319      	movs	r3, #25
 800436a:	2201      	movs	r2, #1
 800436c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fab7 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e0d5      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2222      	movs	r2, #34	; 0x22
 8004384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a3a      	ldr	r2, [r7, #32]
 800439a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a8:	88f8      	ldrh	r0, [r7, #6]
 80043aa:	893a      	ldrh	r2, [r7, #8]
 80043ac:	8979      	ldrh	r1, [r7, #10]
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	9301      	str	r3, [sp, #4]
 80043b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	4603      	mov	r3, r0
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fa1b 	bl	80047f4 <I2C_RequestMemoryRead>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0ad      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	2bff      	cmp	r3, #255	; 0xff
 80043d8:	d90e      	bls.n	80043f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	22ff      	movs	r2, #255	; 0xff
 80043de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	8979      	ldrh	r1, [r7, #10]
 80043e8:	4b52      	ldr	r3, [pc, #328]	; (8004534 <HAL_I2C_Mem_Read+0x22c>)
 80043ea:	9300      	str	r3, [sp, #0]
 80043ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 fb99 	bl	8004b28 <I2C_TransferConfig>
 80043f6:	e00f      	b.n	8004418 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004406:	b2da      	uxtb	r2, r3
 8004408:	8979      	ldrh	r1, [r7, #10]
 800440a:	4b4a      	ldr	r3, [pc, #296]	; (8004534 <HAL_I2C_Mem_Read+0x22c>)
 800440c:	9300      	str	r3, [sp, #0]
 800440e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fb88 	bl	8004b28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	2200      	movs	r2, #0
 8004420:	2104      	movs	r1, #4
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fa5e 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07c      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	b2d2      	uxtb	r2, r2
 800443e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445a:	b29b      	uxth	r3, r3
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d034      	beq.n	80044d8 <HAL_I2C_Mem_Read+0x1d0>
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004472:	2b00      	cmp	r3, #0
 8004474:	d130      	bne.n	80044d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	2200      	movs	r2, #0
 800447e:	2180      	movs	r1, #128	; 0x80
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fa2f 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e04d      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004494:	b29b      	uxth	r3, r3
 8004496:	2bff      	cmp	r3, #255	; 0xff
 8004498:	d90e      	bls.n	80044b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	22ff      	movs	r2, #255	; 0xff
 800449e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	8979      	ldrh	r1, [r7, #10]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 fb39 	bl	8004b28 <I2C_TransferConfig>
 80044b6:	e00f      	b.n	80044d8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	8979      	ldrh	r1, [r7, #10]
 80044ca:	2300      	movs	r3, #0
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f000 fb28 	bl	8004b28 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d19a      	bne.n	8004418 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa7c 	bl	80049e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e01a      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2220      	movs	r2, #32
 80044fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <HAL_I2C_Mem_Read+0x230>)
 800450a:	400b      	ands	r3, r1
 800450c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e000      	b.n	800452c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800452a:	2302      	movs	r3, #2
  }
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	80002400 	.word	0x80002400
 8004538:	fe00e800 	.word	0xfe00e800

0800453c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	460b      	mov	r3, r1
 800454a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b20      	cmp	r3, #32
 800455a:	f040 80f1 	bne.w	8004740 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456c:	d101      	bne.n	8004572 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800456e:	2302      	movs	r3, #2
 8004570:	e0e7      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_I2C_IsDeviceReady+0x44>
 800457c:	2302      	movs	r3, #2
 800457e:	e0e0      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2224      	movs	r2, #36	; 0x24
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d107      	bne.n	80045ae <HAL_I2C_IsDeviceReady+0x72>
 800459e:	897b      	ldrh	r3, [r7, #10]
 80045a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045ac:	e004      	b.n	80045b8 <HAL_I2C_IsDeviceReady+0x7c>
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80045be:	f7fe f8c1 	bl	8002744 <HAL_GetTick>
 80045c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b10      	cmp	r3, #16
 80045e6:	bf0c      	ite	eq
 80045e8:	2301      	moveq	r3, #1
 80045ea:	2300      	movne	r3, #0
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045f0:	e034      	b.n	800465c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d01a      	beq.n	8004630 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe f8a3 	bl	8002744 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <HAL_I2C_IsDeviceReady+0xd4>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e088      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f003 0320 	and.w	r3, r3, #32
 800463a:	2b20      	cmp	r3, #32
 800463c:	bf0c      	ite	eq
 800463e:	2301      	moveq	r3, #1
 8004640:	2300      	movne	r3, #0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800465c:	7ffb      	ldrb	r3, [r7, #31]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d102      	bne.n	8004668 <HAL_I2C_IsDeviceReady+0x12c>
 8004662:	7fbb      	ldrb	r3, [r7, #30]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0c4      	beq.n	80045f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f003 0310 	and.w	r3, r3, #16
 8004672:	2b10      	cmp	r3, #16
 8004674:	d01a      	beq.n	80046ac <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2200      	movs	r2, #0
 800467e:	2120      	movs	r1, #32
 8004680:	68f8      	ldr	r0, [r7, #12]
 8004682:	f000 f92f 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e058      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2220      	movs	r2, #32
 8004696:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e04a      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2120      	movs	r1, #32
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f000 f914 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e03d      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2220      	movs	r2, #32
 80046d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d118      	bne.n	8004710 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2120      	movs	r1, #32
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f8f3 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e01c      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2220      	movs	r2, #32
 800470e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3301      	adds	r3, #1
 8004714:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	429a      	cmp	r2, r3
 800471c:	f63f af3b 	bhi.w	8004596 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f043 0220 	orr.w	r2, r3, #32
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	4618      	mov	r0, r3
 8004744:	3720      	adds	r7, #32
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
	...

0800474c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	461a      	mov	r2, r3
 800475a:	4603      	mov	r3, r0
 800475c:	817b      	strh	r3, [r7, #10]
 800475e:	460b      	mov	r3, r1
 8004760:	813b      	strh	r3, [r7, #8]
 8004762:	4613      	mov	r3, r2
 8004764:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004766:	88fb      	ldrh	r3, [r7, #6]
 8004768:	b2da      	uxtb	r2, r3
 800476a:	8979      	ldrh	r1, [r7, #10]
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <I2C_RequestMemoryWrite+0xa4>)
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f9d7 	bl	8004b28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800477a:	69fa      	ldr	r2, [r7, #28]
 800477c:	69b9      	ldr	r1, [r7, #24]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 f8f0 	bl	8004964 <I2C_WaitOnTXISFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02c      	b.n	80047e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
 800479e:	e015      	b.n	80047cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	69b9      	ldr	r1, [r7, #24]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 f8d6 	bl	8004964 <I2C_WaitOnTXISFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e012      	b.n	80047e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047c2:	893b      	ldrh	r3, [r7, #8]
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2200      	movs	r2, #0
 80047d4:	2180      	movs	r1, #128	; 0x80
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f884 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	80002000 	.word	0x80002000

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	8979      	ldrh	r1, [r7, #10]
 8004814:	4b20      	ldr	r3, [pc, #128]	; (8004898 <I2C_RequestMemoryRead+0xa4>)
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	2300      	movs	r3, #0
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f984 	bl	8004b28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	69b9      	ldr	r1, [r7, #24]
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 f89d 	bl	8004964 <I2C_WaitOnTXISFlagUntilTimeout>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e02c      	b.n	800488e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d105      	bne.n	8004846 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800483a:	893b      	ldrh	r3, [r7, #8]
 800483c:	b2da      	uxtb	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
 8004844:	e015      	b.n	8004872 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004846:	893b      	ldrh	r3, [r7, #8]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	b29b      	uxth	r3, r3
 800484c:	b2da      	uxtb	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	69b9      	ldr	r1, [r7, #24]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f883 	bl	8004964 <I2C_WaitOnTXISFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d001      	beq.n	8004868 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e012      	b.n	800488e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004868:	893b      	ldrh	r3, [r7, #8]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	2200      	movs	r2, #0
 800487a:	2140      	movs	r1, #64	; 0x40
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f831 	bl	80048e4 <I2C_WaitOnFlagUntilTimeout>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e000      	b.n	800488e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	80002000 	.word	0x80002000

0800489c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d103      	bne.n	80048ba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d007      	beq.n	80048d8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0201 	orr.w	r2, r2, #1
 80048d6:	619a      	str	r2, [r3, #24]
  }
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048f4:	e022      	b.n	800493c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fc:	d01e      	beq.n	800493c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048fe:	f7fd ff21 	bl	8002744 <HAL_GetTick>
 8004902:	4602      	mov	r2, r0
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	429a      	cmp	r2, r3
 800490c:	d302      	bcc.n	8004914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d113      	bne.n	800493c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004918:	f043 0220 	orr.w	r2, r3, #32
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e00f      	b.n	800495c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	699a      	ldr	r2, [r3, #24]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	4013      	ands	r3, r2
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	429a      	cmp	r2, r3
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	461a      	mov	r2, r3
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	429a      	cmp	r2, r3
 8004958:	d0cd      	beq.n	80048f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004970:	e02c      	b.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	68b9      	ldr	r1, [r7, #8]
 8004976:	68f8      	ldr	r0, [r7, #12]
 8004978:	f000 f870 	bl	8004a5c <I2C_IsAcknowledgeFailed>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e02a      	b.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498c:	d01e      	beq.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fd fed9 	bl	8002744 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d113      	bne.n	80049cc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	f043 0220 	orr.w	r2, r3, #32
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e007      	b.n	80049dc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d1cb      	bne.n	8004972 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b084      	sub	sp, #16
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049f0:	e028      	b.n	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 f830 	bl	8004a5c <I2C_IsAcknowledgeFailed>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e026      	b.n	8004a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fd fe9d 	bl	8002744 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d113      	bne.n	8004a44 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a20:	f043 0220 	orr.w	r2, r3, #32
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e007      	b.n	8004a54 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b20      	cmp	r3, #32
 8004a50:	d1cf      	bne.n	80049f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d151      	bne.n	8004b1a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a76:	e022      	b.n	8004abe <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d01e      	beq.n	8004abe <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a80:	f7fd fe60 	bl	8002744 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d302      	bcc.n	8004a96 <I2C_IsAcknowledgeFailed+0x3a>
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d113      	bne.n	8004abe <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9a:	f043 0220 	orr.w	r2, r3, #32
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e02e      	b.n	8004b1c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f003 0320 	and.w	r3, r3, #32
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d1d5      	bne.n	8004a78 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2220      	movs	r2, #32
 8004ada:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f7ff fedd 	bl	800489c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	4b0d      	ldr	r3, [pc, #52]	; (8004b24 <I2C_IsAcknowledgeFailed+0xc8>)
 8004aee:	400b      	ands	r3, r1
 8004af0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f043 0204 	orr.w	r2, r3, #4
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e000      	b.n	8004b1c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	fe00e800 	.word	0xfe00e800

08004b28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	607b      	str	r3, [r7, #4]
 8004b32:	460b      	mov	r3, r1
 8004b34:	817b      	strh	r3, [r7, #10]
 8004b36:	4613      	mov	r3, r2
 8004b38:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	0d5b      	lsrs	r3, r3, #21
 8004b44:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b48:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <I2C_TransferConfig+0x58>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	43db      	mvns	r3, r3
 8004b4e:	ea02 0103 	and.w	r1, r2, r3
 8004b52:	897b      	ldrh	r3, [r7, #10]
 8004b54:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b58:	7a7b      	ldrb	r3, [r7, #9]
 8004b5a:	041b      	lsls	r3, r3, #16
 8004b5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	431a      	orrs	r2, r3
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004b72:	bf00      	nop
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	03ff63ff 	.word	0x03ff63ff

08004b84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b083      	sub	sp, #12
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d138      	bne.n	8004c0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e032      	b.n	8004c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	; 0x24
 8004bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 0201 	bic.w	r2, r2, #1
 8004bc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6819      	ldr	r1, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	430a      	orrs	r2, r1
 8004be6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0201 	orr.w	r2, r2, #1
 8004bf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	e000      	b.n	8004c0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c0c:	2302      	movs	r3, #2
  }
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b20      	cmp	r3, #32
 8004c2e:	d139      	bne.n	8004ca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d101      	bne.n	8004c3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	e033      	b.n	8004ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2224      	movs	r2, #36	; 0x24
 8004c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f022 0201 	bic.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	021b      	lsls	r3, r3, #8
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0201 	orr.w	r2, r2, #1
 8004c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	e000      	b.n	8004ca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ca4:	2302      	movs	r3, #2
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
	...

08004cb4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <HAL_PWREx_GetVoltageRange+0x18>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr
 8004cca:	bf00      	nop
 8004ccc:	40007000 	.word	0x40007000

08004cd0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cde:	d130      	bne.n	8004d42 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ce0:	4b23      	ldr	r3, [pc, #140]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cec:	d038      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cee:	4b20      	ldr	r3, [pc, #128]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cf6:	4a1e      	ldr	r2, [pc, #120]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfe:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2232      	movs	r2, #50	; 0x32
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	4a1b      	ldr	r2, [pc, #108]	; (8004d78 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	0c9b      	lsrs	r3, r3, #18
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d14:	e002      	b.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d1c:	4b14      	ldr	r3, [pc, #80]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d1e:	695b      	ldr	r3, [r3, #20]
 8004d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d28:	d102      	bne.n	8004d30 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1f2      	bne.n	8004d16 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d30:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d3c:	d110      	bne.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d42:	4b0b      	ldr	r3, [pc, #44]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d4e:	d007      	beq.n	8004d60 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d50:	4b07      	ldr	r3, [pc, #28]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d58:	4a05      	ldr	r2, [pc, #20]	; (8004d70 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d5e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40007000 	.word	0x40007000
 8004d74:	20000000 	.word	0x20000000
 8004d78:	431bde83 	.word	0x431bde83

08004d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b088      	sub	sp, #32
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e3d4      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d8e:	4ba1      	ldr	r3, [pc, #644]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 030c 	and.w	r3, r3, #12
 8004d96:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d98:	4b9e      	ldr	r3, [pc, #632]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	f003 0303 	and.w	r3, r3, #3
 8004da0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0310 	and.w	r3, r3, #16
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f000 80e4 	beq.w	8004f78 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x4a>
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b0c      	cmp	r3, #12
 8004dba:	f040 808b 	bne.w	8004ed4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	f040 8087 	bne.w	8004ed4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dc6:	4b93      	ldr	r3, [pc, #588]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d005      	beq.n	8004dde <HAL_RCC_OscConfig+0x62>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e3ac      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1a      	ldr	r2, [r3, #32]
 8004de2:	4b8c      	ldr	r3, [pc, #560]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0308 	and.w	r3, r3, #8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_RCC_OscConfig+0x7c>
 8004dee:	4b89      	ldr	r3, [pc, #548]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004df6:	e005      	b.n	8004e04 <HAL_RCC_OscConfig+0x88>
 8004df8:	4b86      	ldr	r3, [pc, #536]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dfe:	091b      	lsrs	r3, r3, #4
 8004e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d223      	bcs.n	8004e50 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a1b      	ldr	r3, [r3, #32]
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f000 fd3f 	bl	8005890 <RCC_SetFlashLatencyFromMSIRange>
 8004e12:	4603      	mov	r3, r0
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e38d      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e1c:	4b7d      	ldr	r3, [pc, #500]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a7c      	ldr	r2, [pc, #496]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e22:	f043 0308 	orr.w	r3, r3, #8
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b7a      	ldr	r3, [pc, #488]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	4977      	ldr	r1, [pc, #476]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3a:	4b76      	ldr	r3, [pc, #472]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	4972      	ldr	r1, [pc, #456]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
 8004e4e:	e025      	b.n	8004e9c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e50:	4b70      	ldr	r3, [pc, #448]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a6f      	ldr	r2, [pc, #444]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e56:	f043 0308 	orr.w	r3, r3, #8
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	4b6d      	ldr	r3, [pc, #436]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	496a      	ldr	r1, [pc, #424]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e6e:	4b69      	ldr	r3, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	4965      	ldr	r1, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d109      	bne.n	8004e9c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fcff 	bl	8005890 <RCC_SetFlashLatencyFromMSIRange>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e34d      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e9c:	f000 fc36 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8004ea0:	4601      	mov	r1, r0
 8004ea2:	4b5c      	ldr	r3, [pc, #368]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	091b      	lsrs	r3, r3, #4
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	4a5a      	ldr	r2, [pc, #360]	; (8005018 <HAL_RCC_OscConfig+0x29c>)
 8004eae:	5cd3      	ldrb	r3, [r2, r3]
 8004eb0:	f003 031f 	and.w	r3, r3, #31
 8004eb4:	fa21 f303 	lsr.w	r3, r1, r3
 8004eb8:	4a58      	ldr	r2, [pc, #352]	; (800501c <HAL_RCC_OscConfig+0x2a0>)
 8004eba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ebc:	4b58      	ldr	r3, [pc, #352]	; (8005020 <HAL_RCC_OscConfig+0x2a4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fd fbf3 	bl	80026ac <HAL_InitTick>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004eca:	7bfb      	ldrb	r3, [r7, #15]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d052      	beq.n	8004f76 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	e331      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d032      	beq.n	8004f42 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004edc:	4b4d      	ldr	r3, [pc, #308]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a4c      	ldr	r2, [pc, #304]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ee2:	f043 0301 	orr.w	r3, r3, #1
 8004ee6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ee8:	f7fd fc2c 	bl	8002744 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ef0:	f7fd fc28 	bl	8002744 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e31a      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f02:	4b44      	ldr	r3, [pc, #272]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a40      	ldr	r2, [pc, #256]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f14:	f043 0308 	orr.w	r3, r3, #8
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	4b3e      	ldr	r3, [pc, #248]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	493b      	ldr	r1, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f2c:	4b39      	ldr	r3, [pc, #228]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	4936      	ldr	r1, [pc, #216]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	604b      	str	r3, [r1, #4]
 8004f40:	e01a      	b.n	8004f78 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f42:	4b34      	ldr	r3, [pc, #208]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a33      	ldr	r2, [pc, #204]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f48:	f023 0301 	bic.w	r3, r3, #1
 8004f4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f4e:	f7fd fbf9 	bl	8002744 <HAL_GetTick>
 8004f52:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f54:	e008      	b.n	8004f68 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f56:	f7fd fbf5 	bl	8002744 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	2b02      	cmp	r3, #2
 8004f62:	d901      	bls.n	8004f68 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e2e7      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f68:	4b2a      	ldr	r3, [pc, #168]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1f0      	bne.n	8004f56 <HAL_RCC_OscConfig+0x1da>
 8004f74:	e000      	b.n	8004f78 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f76:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d074      	beq.n	800506e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d005      	beq.n	8004f96 <HAL_RCC_OscConfig+0x21a>
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	2b0c      	cmp	r3, #12
 8004f8e:	d10e      	bne.n	8004fae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d10b      	bne.n	8004fae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f96:	4b1f      	ldr	r3, [pc, #124]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d064      	beq.n	800506c <HAL_RCC_OscConfig+0x2f0>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d160      	bne.n	800506c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e2c4      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb6:	d106      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x24a>
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a15      	ldr	r2, [pc, #84]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	e01d      	b.n	8005002 <HAL_RCC_OscConfig+0x286>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fce:	d10c      	bne.n	8004fea <HAL_RCC_OscConfig+0x26e>
 8004fd0:	4b10      	ldr	r3, [pc, #64]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a0f      	ldr	r2, [pc, #60]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fd6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fda:	6013      	str	r3, [r2, #0]
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a0c      	ldr	r2, [pc, #48]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe6:	6013      	str	r3, [r2, #0]
 8004fe8:	e00b      	b.n	8005002 <HAL_RCC_OscConfig+0x286>
 8004fea:	4b0a      	ldr	r3, [pc, #40]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a09      	ldr	r2, [pc, #36]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	4b07      	ldr	r3, [pc, #28]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a06      	ldr	r2, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x298>)
 8004ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005000:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01c      	beq.n	8005044 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd fb9b 	bl	8002744 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005010:	e011      	b.n	8005036 <HAL_RCC_OscConfig+0x2ba>
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	0800a9bc 	.word	0x0800a9bc
 800501c:	20000000 	.word	0x20000000
 8005020:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005024:	f7fd fb8e 	bl	8002744 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b64      	cmp	r3, #100	; 0x64
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e280      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005036:	4baf      	ldr	r3, [pc, #700]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d0f0      	beq.n	8005024 <HAL_RCC_OscConfig+0x2a8>
 8005042:	e014      	b.n	800506e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fd fb7e 	bl	8002744 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7fd fb7a 	bl	8002744 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	; 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e26c      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800505e:	4ba5      	ldr	r3, [pc, #660]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x2d0>
 800506a:	e000      	b.n	800506e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800506c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d060      	beq.n	800513c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	2b04      	cmp	r3, #4
 800507e:	d005      	beq.n	800508c <HAL_RCC_OscConfig+0x310>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	2b0c      	cmp	r3, #12
 8005084:	d119      	bne.n	80050ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b02      	cmp	r3, #2
 800508a:	d116      	bne.n	80050ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800508c:	4b99      	ldr	r3, [pc, #612]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005094:	2b00      	cmp	r3, #0
 8005096:	d005      	beq.n	80050a4 <HAL_RCC_OscConfig+0x328>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e249      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a4:	4b93      	ldr	r3, [pc, #588]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	691b      	ldr	r3, [r3, #16]
 80050b0:	061b      	lsls	r3, r3, #24
 80050b2:	4990      	ldr	r1, [pc, #576]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b8:	e040      	b.n	800513c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d023      	beq.n	800510a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050c2:	4b8c      	ldr	r3, [pc, #560]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a8b      	ldr	r2, [pc, #556]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ce:	f7fd fb39 	bl	8002744 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d4:	e008      	b.n	80050e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d6:	f7fd fb35 	bl	8002744 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d901      	bls.n	80050e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e227      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e8:	4b82      	ldr	r3, [pc, #520]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d0f0      	beq.n	80050d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f4:	4b7f      	ldr	r3, [pc, #508]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	061b      	lsls	r3, r3, #24
 8005102:	497c      	ldr	r1, [pc, #496]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005104:	4313      	orrs	r3, r2
 8005106:	604b      	str	r3, [r1, #4]
 8005108:	e018      	b.n	800513c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800510a:	4b7a      	ldr	r3, [pc, #488]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a79      	ldr	r2, [pc, #484]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005110:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005114:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005116:	f7fd fb15 	bl	8002744 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800511e:	f7fd fb11 	bl	8002744 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e203      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005130:	4b70      	ldr	r3, [pc, #448]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f0      	bne.n	800511e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d03c      	beq.n	80051c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d01c      	beq.n	800518a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005150:	4b68      	ldr	r3, [pc, #416]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005156:	4a67      	ldr	r2, [pc, #412]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005160:	f7fd faf0 	bl	8002744 <HAL_GetTick>
 8005164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005166:	e008      	b.n	800517a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005168:	f7fd faec 	bl	8002744 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	2b02      	cmp	r3, #2
 8005174:	d901      	bls.n	800517a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005176:	2303      	movs	r3, #3
 8005178:	e1de      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800517a:	4b5e      	ldr	r3, [pc, #376]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800517c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0ef      	beq.n	8005168 <HAL_RCC_OscConfig+0x3ec>
 8005188:	e01b      	b.n	80051c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800518a:	4b5a      	ldr	r3, [pc, #360]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800518c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005190:	4a58      	ldr	r2, [pc, #352]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519a:	f7fd fad3 	bl	8002744 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051a0:	e008      	b.n	80051b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a2:	f7fd facf 	bl	8002744 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d901      	bls.n	80051b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e1c1      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051b4:	4b4f      	ldr	r3, [pc, #316]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1ef      	bne.n	80051a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 80a6 	beq.w	800531c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051d0:	2300      	movs	r3, #0
 80051d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80051d4:	4b47      	ldr	r3, [pc, #284]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80051d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10d      	bne.n	80051fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051e0:	4b44      	ldr	r3, [pc, #272]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80051e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e4:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80051e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ea:	6593      	str	r3, [r2, #88]	; 0x58
 80051ec:	4b41      	ldr	r3, [pc, #260]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80051ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051f4:	60bb      	str	r3, [r7, #8]
 80051f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051f8:	2301      	movs	r3, #1
 80051fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051fc:	4b3e      	ldr	r3, [pc, #248]	; (80052f8 <HAL_RCC_OscConfig+0x57c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005204:	2b00      	cmp	r3, #0
 8005206:	d118      	bne.n	800523a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005208:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x57c>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_RCC_OscConfig+0x57c>)
 800520e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005212:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005214:	f7fd fa96 	bl	8002744 <HAL_GetTick>
 8005218:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800521a:	e008      	b.n	800522e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800521c:	f7fd fa92 	bl	8002744 <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	2b02      	cmp	r3, #2
 8005228:	d901      	bls.n	800522e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e184      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <HAL_RCC_OscConfig+0x57c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0f0      	beq.n	800521c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d108      	bne.n	8005254 <HAL_RCC_OscConfig+0x4d8>
 8005242:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800524a:	f043 0301 	orr.w	r3, r3, #1
 800524e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005252:	e024      	b.n	800529e <HAL_RCC_OscConfig+0x522>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	2b05      	cmp	r3, #5
 800525a:	d110      	bne.n	800527e <HAL_RCC_OscConfig+0x502>
 800525c:	4b25      	ldr	r3, [pc, #148]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800525e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005262:	4a24      	ldr	r2, [pc, #144]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005264:	f043 0304 	orr.w	r3, r3, #4
 8005268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 800526e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005272:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800527c:	e00f      	b.n	800529e <HAL_RCC_OscConfig+0x522>
 800527e:	4b1d      	ldr	r3, [pc, #116]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005284:	4a1b      	ldr	r2, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800528e:	4b19      	ldr	r3, [pc, #100]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	4a17      	ldr	r2, [pc, #92]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 8005296:	f023 0304 	bic.w	r3, r3, #4
 800529a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fd fa4d 	bl	8002744 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fd fa49 	bl	8002744 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e139      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052c4:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_OscConfig+0x578>)
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0ed      	beq.n	80052ae <HAL_RCC_OscConfig+0x532>
 80052d2:	e01a      	b.n	800530a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d4:	f7fd fa36 	bl	8002744 <HAL_GetTick>
 80052d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052da:	e00f      	b.n	80052fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052dc:	f7fd fa32 	bl	8002744 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d906      	bls.n	80052fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e122      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052fc:	4b90      	ldr	r3, [pc, #576]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80052fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005302:	f003 0302 	and.w	r3, r3, #2
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1e8      	bne.n	80052dc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800530a:	7ffb      	ldrb	r3, [r7, #31]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d105      	bne.n	800531c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005310:	4b8b      	ldr	r3, [pc, #556]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005314:	4a8a      	ldr	r2, [pc, #552]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800531a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 8108 	beq.w	8005536 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	2b02      	cmp	r3, #2
 800532c:	f040 80d0 	bne.w	80054d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005330:	4b83      	ldr	r3, [pc, #524]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0203 	and.w	r2, r3, #3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005340:	429a      	cmp	r2, r3
 8005342:	d130      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	3b01      	subs	r3, #1
 8005350:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005352:	429a      	cmp	r2, r3
 8005354:	d127      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005360:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005362:	429a      	cmp	r2, r3
 8005364:	d11f      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005370:	2a07      	cmp	r2, #7
 8005372:	bf14      	ite	ne
 8005374:	2201      	movne	r2, #1
 8005376:	2200      	moveq	r2, #0
 8005378:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800537a:	4293      	cmp	r3, r2
 800537c:	d113      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005388:	085b      	lsrs	r3, r3, #1
 800538a:	3b01      	subs	r3, #1
 800538c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800538e:	429a      	cmp	r2, r3
 8005390:	d109      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	085b      	lsrs	r3, r3, #1
 800539e:	3b01      	subs	r3, #1
 80053a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d06e      	beq.n	8005484 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	d069      	beq.n	8005480 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053ac:	4b64      	ldr	r3, [pc, #400]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d105      	bne.n	80053c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80053b8:	4b61      	ldr	r3, [pc, #388]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0b7      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80053c8:	4b5d      	ldr	r3, [pc, #372]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d4:	f7fd f9b6 	bl	8002744 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fd f9b2 	bl	8002744 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e0a4      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053ee:	4b54      	ldr	r3, [pc, #336]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f0      	bne.n	80053dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053fa:	4b51      	ldr	r3, [pc, #324]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	4b51      	ldr	r3, [pc, #324]	; (8005544 <HAL_RCC_OscConfig+0x7c8>)
 8005400:	4013      	ands	r3, r2
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800540a:	3a01      	subs	r2, #1
 800540c:	0112      	lsls	r2, r2, #4
 800540e:	4311      	orrs	r1, r2
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005414:	0212      	lsls	r2, r2, #8
 8005416:	4311      	orrs	r1, r2
 8005418:	687a      	ldr	r2, [r7, #4]
 800541a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800541c:	0852      	lsrs	r2, r2, #1
 800541e:	3a01      	subs	r2, #1
 8005420:	0552      	lsls	r2, r2, #21
 8005422:	4311      	orrs	r1, r2
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005428:	0852      	lsrs	r2, r2, #1
 800542a:	3a01      	subs	r2, #1
 800542c:	0652      	lsls	r2, r2, #25
 800542e:	4311      	orrs	r1, r2
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005434:	0912      	lsrs	r2, r2, #4
 8005436:	0452      	lsls	r2, r2, #17
 8005438:	430a      	orrs	r2, r1
 800543a:	4941      	ldr	r1, [pc, #260]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 800543c:	4313      	orrs	r3, r2
 800543e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005440:	4b3f      	ldr	r3, [pc, #252]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a3e      	ldr	r2, [pc, #248]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005446:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800544c:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	4a3b      	ldr	r2, [pc, #236]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005458:	f7fd f974 	bl	8002744 <HAL_GetTick>
 800545c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800545e:	e008      	b.n	8005472 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005460:	f7fd f970 	bl	8002744 <HAL_GetTick>
 8005464:	4602      	mov	r2, r0
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	1ad3      	subs	r3, r2, r3
 800546a:	2b02      	cmp	r3, #2
 800546c:	d901      	bls.n	8005472 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800546e:	2303      	movs	r3, #3
 8005470:	e062      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005472:	4b33      	ldr	r3, [pc, #204]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d0f0      	beq.n	8005460 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800547e:	e05a      	b.n	8005536 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e059      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d152      	bne.n	8005536 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005490:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2a      	ldr	r2, [pc, #168]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005496:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800549a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800549c:	4b28      	ldr	r3, [pc, #160]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a27      	ldr	r2, [pc, #156]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80054a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054a8:	f7fd f94c 	bl	8002744 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054b0:	f7fd f948 	bl	8002744 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e03a      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054c2:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0x734>
 80054ce:	e032      	b.n	8005536 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b0c      	cmp	r3, #12
 80054d4:	d02d      	beq.n	8005532 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a19      	ldr	r2, [pc, #100]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d105      	bne.n	80054fa <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	4a13      	ldr	r2, [pc, #76]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054f4:	f023 0303 	bic.w	r3, r3, #3
 80054f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005500:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005508:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fd f91b 	bl	8002744 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005512:	f7fd f917 	bl	8002744 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e009      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <HAL_RCC_OscConfig+0x7c4>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1f0      	bne.n	8005512 <HAL_RCC_OscConfig+0x796>
 8005530:	e001      	b.n	8005536 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e000      	b.n	8005538 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40021000 	.word	0x40021000
 8005544:	f99d808c 	.word	0xf99d808c

08005548 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0c8      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800555c:	4b66      	ldr	r3, [pc, #408]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0307 	and.w	r3, r3, #7
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	429a      	cmp	r2, r3
 8005568:	d910      	bls.n	800558c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556a:	4b63      	ldr	r3, [pc, #396]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 0207 	bic.w	r2, r3, #7
 8005572:	4961      	ldr	r1, [pc, #388]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	4313      	orrs	r3, r2
 8005578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800557a:	4b5f      	ldr	r3, [pc, #380]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	683a      	ldr	r2, [r7, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d001      	beq.n	800558c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e0b0      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0301 	and.w	r3, r3, #1
 8005594:	2b00      	cmp	r3, #0
 8005596:	d04c      	beq.n	8005632 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b03      	cmp	r3, #3
 800559e:	d107      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055a0:	4b56      	ldr	r3, [pc, #344]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d121      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e09e      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b8:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d115      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e092      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055d0:	4b4a      	ldr	r3, [pc, #296]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d109      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e086      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055e0:	4b46      	ldr	r3, [pc, #280]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e07e      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055f0:	4b42      	ldr	r3, [pc, #264]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f023 0203 	bic.w	r2, r3, #3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	493f      	ldr	r1, [pc, #252]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005602:	f7fd f89f 	bl	8002744 <HAL_GetTick>
 8005606:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005608:	e00a      	b.n	8005620 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560a:	f7fd f89b 	bl	8002744 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	f241 3288 	movw	r2, #5000	; 0x1388
 8005618:	4293      	cmp	r3, r2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e066      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005620:	4b36      	ldr	r3, [pc, #216]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f003 020c 	and.w	r2, r3, #12
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	429a      	cmp	r2, r3
 8005630:	d1eb      	bne.n	800560a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800563e:	4b2f      	ldr	r3, [pc, #188]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	492c      	ldr	r1, [pc, #176]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800564c:	4313      	orrs	r3, r2
 800564e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005650:	4b29      	ldr	r3, [pc, #164]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d210      	bcs.n	8005680 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f023 0207 	bic.w	r2, r3, #7
 8005666:	4924      	ldr	r1, [pc, #144]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	4313      	orrs	r3, r2
 800566c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e036      	b.n	80056ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800568c:	4b1b      	ldr	r3, [pc, #108]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4918      	ldr	r1, [pc, #96]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 800569a:	4313      	orrs	r3, r2
 800569c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056aa:	4b14      	ldr	r3, [pc, #80]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	4910      	ldr	r1, [pc, #64]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056be:	f000 f825 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056c2:	4601      	mov	r1, r0
 80056c4:	4b0d      	ldr	r3, [pc, #52]	; (80056fc <HAL_RCC_ClockConfig+0x1b4>)
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	091b      	lsrs	r3, r3, #4
 80056ca:	f003 030f 	and.w	r3, r3, #15
 80056ce:	4a0c      	ldr	r2, [pc, #48]	; (8005700 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	5cd3      	ldrb	r3, [r2, r3]
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	fa21 f303 	lsr.w	r3, r1, r3
 80056da:	4a0a      	ldr	r2, [pc, #40]	; (8005704 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056de:	4b0a      	ldr	r3, [pc, #40]	; (8005708 <HAL_RCC_ClockConfig+0x1c0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7fc ffe2 	bl	80026ac <HAL_InitTick>
 80056e8:	4603      	mov	r3, r0
 80056ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80056ec:	7afb      	ldrb	r3, [r7, #11]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40022000 	.word	0x40022000
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800a9bc 	.word	0x0800a9bc
 8005704:	20000000 	.word	0x20000000
 8005708:	20000004 	.word	0x20000004

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	b089      	sub	sp, #36	; 0x24
 8005710:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005712:	2300      	movs	r3, #0
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800571a:	4b3d      	ldr	r3, [pc, #244]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	f003 030c 	and.w	r3, r3, #12
 8005722:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005724:	4b3a      	ldr	r3, [pc, #232]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	f003 0303 	and.w	r3, r3, #3
 800572c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d005      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 8005734:	693b      	ldr	r3, [r7, #16]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d121      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d11e      	bne.n	800577e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005740:	4b33      	ldr	r3, [pc, #204]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d107      	bne.n	800575c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800574c:	4b30      	ldr	r3, [pc, #192]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 800574e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	f003 030f 	and.w	r3, r3, #15
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800575c:	4b2c      	ldr	r3, [pc, #176]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	091b      	lsrs	r3, r3, #4
 8005762:	f003 030f 	and.w	r3, r3, #15
 8005766:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <HAL_RCC_GetSysClockFreq+0x108>)
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005770:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10d      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800577c:	e00a      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b04      	cmp	r3, #4
 8005782:	d102      	bne.n	800578a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005786:	61bb      	str	r3, [r7, #24]
 8005788:	e004      	b.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b08      	cmp	r3, #8
 800578e:	d101      	bne.n	8005794 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005790:	4b22      	ldr	r3, [pc, #136]	; (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 8005792:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d133      	bne.n	8005802 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800579a:	4b1d      	ldr	r3, [pc, #116]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d002      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0xa4>
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d003      	beq.n	80057b6 <HAL_RCC_GetSysClockFreq+0xaa>
 80057ae:	e005      	b.n	80057bc <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <HAL_RCC_GetSysClockFreq+0x10c>)
 80057b2:	617b      	str	r3, [r7, #20]
      break;
 80057b4:	e005      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80057b6:	4b19      	ldr	r3, [pc, #100]	; (800581c <HAL_RCC_GetSysClockFreq+0x110>)
 80057b8:	617b      	str	r3, [r7, #20]
      break;
 80057ba:	e002      	b.n	80057c2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	617b      	str	r3, [r7, #20]
      break;
 80057c0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	091b      	lsrs	r3, r3, #4
 80057c8:	f003 0307 	and.w	r3, r3, #7
 80057cc:	3301      	adds	r3, #1
 80057ce:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057d0:	4b0f      	ldr	r3, [pc, #60]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	0a1b      	lsrs	r3, r3, #8
 80057d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	fb02 f203 	mul.w	r2, r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057e8:	4b09      	ldr	r3, [pc, #36]	; (8005810 <HAL_RCC_GetSysClockFreq+0x104>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	0e5b      	lsrs	r3, r3, #25
 80057ee:	f003 0303 	and.w	r3, r3, #3
 80057f2:	3301      	adds	r3, #1
 80057f4:	005b      	lsls	r3, r3, #1
 80057f6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005800:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005802:	69bb      	ldr	r3, [r7, #24]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr
 8005810:	40021000 	.word	0x40021000
 8005814:	0800a9d4 	.word	0x0800a9d4
 8005818:	00f42400 	.word	0x00f42400
 800581c:	007a1200 	.word	0x007a1200

08005820 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005824:	4b03      	ldr	r3, [pc, #12]	; (8005834 <HAL_RCC_GetHCLKFreq+0x14>)
 8005826:	681b      	ldr	r3, [r3, #0]
}
 8005828:	4618      	mov	r0, r3
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
 8005832:	bf00      	nop
 8005834:	20000000 	.word	0x20000000

08005838 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800583c:	f7ff fff0 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 8005840:	4601      	mov	r1, r0
 8005842:	4b06      	ldr	r3, [pc, #24]	; (800585c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	0a1b      	lsrs	r3, r3, #8
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	4a04      	ldr	r2, [pc, #16]	; (8005860 <HAL_RCC_GetPCLK1Freq+0x28>)
 800584e:	5cd3      	ldrb	r3, [r2, r3]
 8005850:	f003 031f 	and.w	r3, r3, #31
 8005854:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005858:	4618      	mov	r0, r3
 800585a:	bd80      	pop	{r7, pc}
 800585c:	40021000 	.word	0x40021000
 8005860:	0800a9cc 	.word	0x0800a9cc

08005864 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005868:	f7ff ffda 	bl	8005820 <HAL_RCC_GetHCLKFreq>
 800586c:	4601      	mov	r1, r0
 800586e:	4b06      	ldr	r3, [pc, #24]	; (8005888 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	0adb      	lsrs	r3, r3, #11
 8005874:	f003 0307 	and.w	r3, r3, #7
 8005878:	4a04      	ldr	r2, [pc, #16]	; (800588c <HAL_RCC_GetPCLK2Freq+0x28>)
 800587a:	5cd3      	ldrb	r3, [r2, r3]
 800587c:	f003 031f 	and.w	r3, r3, #31
 8005880:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005884:	4618      	mov	r0, r3
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40021000 	.word	0x40021000
 800588c:	0800a9cc 	.word	0x0800a9cc

08005890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005898:	2300      	movs	r3, #0
 800589a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800589e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058a8:	f7ff fa04 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 80058ac:	6178      	str	r0, [r7, #20]
 80058ae:	e014      	b.n	80058da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058b0:	4b25      	ldr	r3, [pc, #148]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b4:	4a24      	ldr	r2, [pc, #144]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058ba:	6593      	str	r3, [r2, #88]	; 0x58
 80058bc:	4b22      	ldr	r3, [pc, #136]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058c8:	f7ff f9f4 	bl	8004cb4 <HAL_PWREx_GetVoltageRange>
 80058cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058ce:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058d2:	4a1d      	ldr	r2, [pc, #116]	; (8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d10b      	bne.n	80058fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b80      	cmp	r3, #128	; 0x80
 80058e6:	d919      	bls.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2ba0      	cmp	r3, #160	; 0xa0
 80058ec:	d902      	bls.n	80058f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058ee:	2302      	movs	r3, #2
 80058f0:	613b      	str	r3, [r7, #16]
 80058f2:	e013      	b.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058f4:	2301      	movs	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]
 80058f8:	e010      	b.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b80      	cmp	r3, #128	; 0x80
 80058fe:	d902      	bls.n	8005906 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005900:	2303      	movs	r3, #3
 8005902:	613b      	str	r3, [r7, #16]
 8005904:	e00a      	b.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2b80      	cmp	r3, #128	; 0x80
 800590a:	d102      	bne.n	8005912 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800590c:	2302      	movs	r3, #2
 800590e:	613b      	str	r3, [r7, #16]
 8005910:	e004      	b.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b70      	cmp	r3, #112	; 0x70
 8005916:	d101      	bne.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005918:	2301      	movs	r3, #1
 800591a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800591c:	4b0b      	ldr	r3, [pc, #44]	; (800594c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f023 0207 	bic.w	r2, r3, #7
 8005924:	4909      	ldr	r1, [pc, #36]	; (800594c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	429a      	cmp	r2, r3
 8005938:	d001      	beq.n	800593e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800593e:	2300      	movs	r3, #0
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40021000 	.word	0x40021000
 800594c:	40022000 	.word	0x40022000

08005950 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005958:	2300      	movs	r3, #0
 800595a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800595c:	2300      	movs	r3, #0
 800595e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005968:	2b00      	cmp	r3, #0
 800596a:	d03f      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005974:	d01c      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800597a:	d802      	bhi.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00e      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005980:	e01f      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005982:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005986:	d003      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005988:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800598c:	d01c      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800598e:	e018      	b.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005990:	4b85      	ldr	r3, [pc, #532]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	4a84      	ldr	r2, [pc, #528]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800599c:	e015      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	3304      	adds	r3, #4
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fab9 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059ae:	e00c      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	3320      	adds	r3, #32
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 fba0 	bl	80060fc <RCCEx_PLLSAI2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059c0:	e003      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	74fb      	strb	r3, [r7, #19]
      break;
 80059c6:	e000      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80059c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10b      	bne.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059d0:	4b75      	ldr	r3, [pc, #468]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059de:	4972      	ldr	r1, [pc, #456]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80059e0:	4313      	orrs	r3, r2
 80059e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059e6:	e001      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e8:	7cfb      	ldrb	r3, [r7, #19]
 80059ea:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d03f      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a00:	d01c      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005a02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a06:	d802      	bhi.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00e      	beq.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0xda>
 8005a0c:	e01f      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005a0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a12:	d003      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a18:	d01c      	beq.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8005a1a:	e018      	b.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a1c:	4b62      	ldr	r3, [pc, #392]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a61      	ldr	r2, [pc, #388]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a26:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a28:	e015      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2100      	movs	r1, #0
 8005a30:	4618      	mov	r0, r3
 8005a32:	f000 fa73 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005a36:	4603      	mov	r3, r0
 8005a38:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a3a:	e00c      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	3320      	adds	r3, #32
 8005a40:	2100      	movs	r1, #0
 8005a42:	4618      	mov	r0, r3
 8005a44:	f000 fb5a 	bl	80060fc <RCCEx_PLLSAI2_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a4c:	e003      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	74fb      	strb	r3, [r7, #19]
      break;
 8005a52:	e000      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a56:	7cfb      	ldrb	r3, [r7, #19]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a5c:	4b52      	ldr	r3, [pc, #328]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a62:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6a:	494f      	ldr	r1, [pc, #316]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a72:	e001      	b.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 80a0 	beq.w	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a86:	2300      	movs	r3, #0
 8005a88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a8a:	4b47      	ldr	r3, [pc, #284]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00d      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa0:	4b41      	ldr	r3, [pc, #260]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa4:	4a40      	ldr	r2, [pc, #256]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aaa:	6593      	str	r3, [r2, #88]	; 0x58
 8005aac:	4b3e      	ldr	r3, [pc, #248]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	60bb      	str	r3, [r7, #8]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005abc:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a3a      	ldr	r2, [pc, #232]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ac6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ac8:	f7fc fe3c 	bl	8002744 <HAL_GetTick>
 8005acc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ace:	e009      	b.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ad0:	f7fc fe38 	bl	8002744 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d902      	bls.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	74fb      	strb	r3, [r7, #19]
        break;
 8005ae2:	e005      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0ef      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d15c      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005af6:	4b2c      	ldr	r3, [pc, #176]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01f      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d019      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b14:	4b24      	ldr	r3, [pc, #144]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b20:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b26:	4a20      	ldr	r2, [pc, #128]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b30:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b36:	4a1c      	ldr	r2, [pc, #112]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b40:	4a19      	ldr	r2, [pc, #100]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f003 0301 	and.w	r3, r3, #1
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d016      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b52:	f7fc fdf7 	bl	8002744 <HAL_GetTick>
 8005b56:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b58:	e00b      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b5a:	f7fc fdf3 	bl	8002744 <HAL_GetTick>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	1ad3      	subs	r3, r2, r3
 8005b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d902      	bls.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	74fb      	strb	r3, [r7, #19]
            break;
 8005b70:	e006      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d0ec      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8005b80:	7cfb      	ldrb	r3, [r7, #19]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d10c      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b86:	4b08      	ldr	r3, [pc, #32]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b96:	4904      	ldr	r1, [pc, #16]	; (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b9e:	e009      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ba0:	7cfb      	ldrb	r3, [r7, #19]
 8005ba2:	74bb      	strb	r3, [r7, #18]
 8005ba4:	e006      	b.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8005ba6:	bf00      	nop
 8005ba8:	40021000 	.word	0x40021000
 8005bac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb4:	7c7b      	ldrb	r3, [r7, #17]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d105      	bne.n	8005bc6 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bba:	4b9e      	ldr	r3, [pc, #632]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbe:	4a9d      	ldr	r2, [pc, #628]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0301 	and.w	r3, r3, #1
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00a      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bd2:	4b98      	ldr	r3, [pc, #608]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bd8:	f023 0203 	bic.w	r2, r3, #3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	4994      	ldr	r1, [pc, #592]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d00a      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005bf4:	4b8f      	ldr	r3, [pc, #572]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	f023 020c 	bic.w	r2, r3, #12
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c02:	498c      	ldr	r1, [pc, #560]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0304 	and.w	r3, r3, #4
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d00a      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c16:	4b87      	ldr	r3, [pc, #540]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c24:	4983      	ldr	r1, [pc, #524]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00a      	beq.n	8005c4e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c38:	4b7e      	ldr	r3, [pc, #504]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c46:	497b      	ldr	r1, [pc, #492]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c5a:	4b76      	ldr	r3, [pc, #472]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c68:	4972      	ldr	r1, [pc, #456]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00a      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c7c:	4b6d      	ldr	r3, [pc, #436]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c8a:	496a      	ldr	r1, [pc, #424]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00a      	beq.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c9e:	4b65      	ldr	r3, [pc, #404]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cac:	4961      	ldr	r1, [pc, #388]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d00a      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cc0:	4b5c      	ldr	r3, [pc, #368]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cce:	4959      	ldr	r1, [pc, #356]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00a      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ce2:	4b54      	ldr	r3, [pc, #336]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cf0:	4950      	ldr	r1, [pc, #320]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005d04:	4b4b      	ldr	r3, [pc, #300]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d12:	4948      	ldr	r1, [pc, #288]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d00a      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d26:	4b43      	ldr	r3, [pc, #268]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d34:	493f      	ldr	r1, [pc, #252]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d36:	4313      	orrs	r3, r2
 8005d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d028      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d48:	4b3a      	ldr	r3, [pc, #232]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d56:	4937      	ldr	r1, [pc, #220]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d66:	d106      	bne.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d68:	4b32      	ldr	r3, [pc, #200]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	4a31      	ldr	r2, [pc, #196]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d72:	60d3      	str	r3, [r2, #12]
 8005d74:	e011      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d7e:	d10c      	bne.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	2101      	movs	r1, #1
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f8c8 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d90:	7cfb      	ldrb	r3, [r7, #19]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8005d96:	7cfb      	ldrb	r3, [r7, #19]
 8005d98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d028      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005da6:	4b23      	ldr	r3, [pc, #140]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db4:	491f      	ldr	r1, [pc, #124]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dc4:	d106      	bne.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dc6:	4b1b      	ldr	r3, [pc, #108]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	4a1a      	ldr	r2, [pc, #104]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dd0:	60d3      	str	r3, [r2, #12]
 8005dd2:	e011      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ddc:	d10c      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	3304      	adds	r3, #4
 8005de2:	2101      	movs	r1, #1
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 f899 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005dea:	4603      	mov	r3, r0
 8005dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dee:	7cfb      	ldrb	r3, [r7, #19]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d001      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8005df4:	7cfb      	ldrb	r3, [r7, #19]
 8005df6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d02b      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005e04:	4b0b      	ldr	r3, [pc, #44]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e12:	4908      	ldr	r1, [pc, #32]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e14:	4313      	orrs	r3, r2
 8005e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e22:	d109      	bne.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e24:	4b03      	ldr	r3, [pc, #12]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	4a02      	ldr	r2, [pc, #8]	; (8005e34 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8005e2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e2e:	60d3      	str	r3, [r2, #12]
 8005e30:	e014      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8005e32:	bf00      	nop
 8005e34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3304      	adds	r3, #4
 8005e46:	2101      	movs	r1, #1
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f000 f867 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e52:	7cfb      	ldrb	r3, [r7, #19]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d02f      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e68:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e76:	4928      	ldr	r1, [pc, #160]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e86:	d10d      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3304      	adds	r3, #4
 8005e8c:	2102      	movs	r1, #2
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f844 	bl	8005f1c <RCCEx_PLLSAI1_Config>
 8005e94:	4603      	mov	r3, r0
 8005e96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e98:	7cfb      	ldrb	r3, [r7, #19]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d014      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005e9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ea0:	74bb      	strb	r3, [r7, #18]
 8005ea2:	e011      	b.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3320      	adds	r3, #32
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f921 	bl	80060fc <RCCEx_PLLSAI2_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ebe:	7cfb      	ldrb	r3, [r7, #19]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ee2:	490d      	ldr	r1, [pc, #52]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00b      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f06:	4904      	ldr	r1, [pc, #16]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005f0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	40021000 	.word	0x40021000

08005f1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f2a:	4b73      	ldr	r3, [pc, #460]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f003 0303 	and.w	r3, r3, #3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d018      	beq.n	8005f68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f36:	4b70      	ldr	r3, [pc, #448]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0203 	and.w	r2, r3, #3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d10d      	bne.n	8005f62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
       ||
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d009      	beq.n	8005f62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	091b      	lsrs	r3, r3, #4
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d044      	beq.n	8005fec <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	73fb      	strb	r3, [r7, #15]
 8005f66:	e041      	b.n	8005fec <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2b02      	cmp	r3, #2
 8005f6e:	d00c      	beq.n	8005f8a <RCCEx_PLLSAI1_Config+0x6e>
 8005f70:	2b03      	cmp	r3, #3
 8005f72:	d013      	beq.n	8005f9c <RCCEx_PLLSAI1_Config+0x80>
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d120      	bne.n	8005fba <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f78:	4b5f      	ldr	r3, [pc, #380]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0302 	and.w	r3, r3, #2
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d11d      	bne.n	8005fc0 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f88:	e01a      	b.n	8005fc0 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f8a:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d116      	bne.n	8005fc4 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f9a:	e013      	b.n	8005fc4 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f9c:	4b56      	ldr	r3, [pc, #344]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10f      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005fa8:	4b53      	ldr	r3, [pc, #332]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d109      	bne.n	8005fc8 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fb8:	e006      	b.n	8005fc8 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fbe:	e004      	b.n	8005fca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fc0:	bf00      	nop
 8005fc2:	e002      	b.n	8005fca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fc4:	bf00      	nop
 8005fc6:	e000      	b.n	8005fca <RCCEx_PLLSAI1_Config+0xae>
      break;
 8005fc8:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fca:	7bfb      	ldrb	r3, [r7, #15]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d10d      	bne.n	8005fec <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fd0:	4b49      	ldr	r3, [pc, #292]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	430b      	orrs	r3, r1
 8005fe6:	4944      	ldr	r1, [pc, #272]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d17d      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ff2:	4b41      	ldr	r3, [pc, #260]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a40      	ldr	r2, [pc, #256]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005ff8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ffe:	f7fc fba1 	bl	8002744 <HAL_GetTick>
 8006002:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006004:	e009      	b.n	800601a <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006006:	f7fc fb9d 	bl	8002744 <HAL_GetTick>
 800600a:	4602      	mov	r2, r0
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	1ad3      	subs	r3, r2, r3
 8006010:	2b02      	cmp	r3, #2
 8006012:	d902      	bls.n	800601a <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	73fb      	strb	r3, [r7, #15]
        break;
 8006018:	e005      	b.n	8006026 <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800601a:	4b37      	ldr	r3, [pc, #220]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ef      	bne.n	8006006 <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d160      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d111      	bne.n	8006056 <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006032:	4b31      	ldr	r3, [pc, #196]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006034:	691b      	ldr	r3, [r3, #16]
 8006036:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6892      	ldr	r2, [r2, #8]
 8006042:	0211      	lsls	r1, r2, #8
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	68d2      	ldr	r2, [r2, #12]
 8006048:	0912      	lsrs	r2, r2, #4
 800604a:	0452      	lsls	r2, r2, #17
 800604c:	430a      	orrs	r2, r1
 800604e:	492a      	ldr	r1, [pc, #168]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006050:	4313      	orrs	r3, r2
 8006052:	610b      	str	r3, [r1, #16]
 8006054:	e027      	b.n	80060a6 <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d112      	bne.n	8006082 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800605c:	4b26      	ldr	r3, [pc, #152]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006064:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006068:	687a      	ldr	r2, [r7, #4]
 800606a:	6892      	ldr	r2, [r2, #8]
 800606c:	0211      	lsls	r1, r2, #8
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	6912      	ldr	r2, [r2, #16]
 8006072:	0852      	lsrs	r2, r2, #1
 8006074:	3a01      	subs	r2, #1
 8006076:	0552      	lsls	r2, r2, #21
 8006078:	430a      	orrs	r2, r1
 800607a:	491f      	ldr	r1, [pc, #124]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 800607c:	4313      	orrs	r3, r2
 800607e:	610b      	str	r3, [r1, #16]
 8006080:	e011      	b.n	80060a6 <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006082:	4b1d      	ldr	r3, [pc, #116]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800608a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6892      	ldr	r2, [r2, #8]
 8006092:	0211      	lsls	r1, r2, #8
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	6952      	ldr	r2, [r2, #20]
 8006098:	0852      	lsrs	r2, r2, #1
 800609a:	3a01      	subs	r2, #1
 800609c:	0652      	lsls	r2, r2, #25
 800609e:	430a      	orrs	r2, r1
 80060a0:	4915      	ldr	r1, [pc, #84]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80060a6:	4b14      	ldr	r3, [pc, #80]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a13      	ldr	r2, [pc, #76]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060b0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060b2:	f7fc fb47 	bl	8002744 <HAL_GetTick>
 80060b6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060b8:	e009      	b.n	80060ce <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ba:	f7fc fb43 	bl	8002744 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d902      	bls.n	80060ce <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	73fb      	strb	r3, [r7, #15]
          break;
 80060cc:	e005      	b.n	80060da <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060ce:	4b0a      	ldr	r3, [pc, #40]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d0ef      	beq.n	80060ba <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80060da:	7bfb      	ldrb	r3, [r7, #15]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d106      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060e0:	4b05      	ldr	r3, [pc, #20]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	4903      	ldr	r1, [pc, #12]	; (80060f8 <RCCEx_PLLSAI1_Config+0x1dc>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	40021000 	.word	0x40021000

080060fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006106:	2300      	movs	r3, #0
 8006108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800610a:	4b68      	ldr	r3, [pc, #416]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d018      	beq.n	8006148 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006116:	4b65      	ldr	r3, [pc, #404]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f003 0203 	and.w	r2, r3, #3
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d10d      	bne.n	8006142 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
       ||
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800612e:	4b5f      	ldr	r3, [pc, #380]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	091b      	lsrs	r3, r3, #4
 8006134:	f003 0307 	and.w	r3, r3, #7
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
       ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d044      	beq.n	80061cc <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	73fb      	strb	r3, [r7, #15]
 8006146:	e041      	b.n	80061cc <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d00c      	beq.n	800616a <RCCEx_PLLSAI2_Config+0x6e>
 8006150:	2b03      	cmp	r3, #3
 8006152:	d013      	beq.n	800617c <RCCEx_PLLSAI2_Config+0x80>
 8006154:	2b01      	cmp	r3, #1
 8006156:	d120      	bne.n	800619a <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006158:	4b54      	ldr	r3, [pc, #336]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d11d      	bne.n	80061a0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006168:	e01a      	b.n	80061a0 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800616a:	4b50      	ldr	r3, [pc, #320]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006172:	2b00      	cmp	r3, #0
 8006174:	d116      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800617a:	e013      	b.n	80061a4 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800617c:	4b4b      	ldr	r3, [pc, #300]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10f      	bne.n	80061a8 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006188:	4b48      	ldr	r3, [pc, #288]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d109      	bne.n	80061a8 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006198:	e006      	b.n	80061a8 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	73fb      	strb	r3, [r7, #15]
      break;
 800619e:	e004      	b.n	80061aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061a0:	bf00      	nop
 80061a2:	e002      	b.n	80061aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061a4:	bf00      	nop
 80061a6:	e000      	b.n	80061aa <RCCEx_PLLSAI2_Config+0xae>
      break;
 80061a8:	bf00      	nop
    }

    if(status == HAL_OK)
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10d      	bne.n	80061cc <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061b0:	4b3e      	ldr	r3, [pc, #248]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6819      	ldr	r1, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	3b01      	subs	r3, #1
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	430b      	orrs	r3, r1
 80061c6:	4939      	ldr	r1, [pc, #228]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80061c8:	4313      	orrs	r3, r2
 80061ca:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061cc:	7bfb      	ldrb	r3, [r7, #15]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d167      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061d2:	4b36      	ldr	r3, [pc, #216]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a35      	ldr	r2, [pc, #212]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80061d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061de:	f7fc fab1 	bl	8002744 <HAL_GetTick>
 80061e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061e4:	e009      	b.n	80061fa <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061e6:	f7fc faad 	bl	8002744 <HAL_GetTick>
 80061ea:	4602      	mov	r2, r0
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	1ad3      	subs	r3, r2, r3
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d902      	bls.n	80061fa <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	73fb      	strb	r3, [r7, #15]
        break;
 80061f8:	e005      	b.n	8006206 <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061fa:	4b2c      	ldr	r3, [pc, #176]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1ef      	bne.n	80061e6 <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d14a      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d111      	bne.n	8006236 <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006212:	4b26      	ldr	r3, [pc, #152]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800621a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6892      	ldr	r2, [r2, #8]
 8006222:	0211      	lsls	r1, r2, #8
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	68d2      	ldr	r2, [r2, #12]
 8006228:	0912      	lsrs	r2, r2, #4
 800622a:	0452      	lsls	r2, r2, #17
 800622c:	430a      	orrs	r2, r1
 800622e:	491f      	ldr	r1, [pc, #124]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006230:	4313      	orrs	r3, r2
 8006232:	614b      	str	r3, [r1, #20]
 8006234:	e011      	b.n	800625a <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006236:	4b1d      	ldr	r3, [pc, #116]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800623e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6892      	ldr	r2, [r2, #8]
 8006246:	0211      	lsls	r1, r2, #8
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	6912      	ldr	r2, [r2, #16]
 800624c:	0852      	lsrs	r2, r2, #1
 800624e:	3a01      	subs	r2, #1
 8006250:	0652      	lsls	r2, r2, #25
 8006252:	430a      	orrs	r2, r1
 8006254:	4915      	ldr	r1, [pc, #84]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006256:	4313      	orrs	r3, r2
 8006258:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800625a:	4b14      	ldr	r3, [pc, #80]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4a13      	ldr	r2, [pc, #76]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006264:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006266:	f7fc fa6d 	bl	8002744 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800626c:	e009      	b.n	8006282 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800626e:	f7fc fa69 	bl	8002744 <HAL_GetTick>
 8006272:	4602      	mov	r2, r0
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	2b02      	cmp	r3, #2
 800627a:	d902      	bls.n	8006282 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	73fb      	strb	r3, [r7, #15]
          break;
 8006280:	e005      	b.n	800628e <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006282:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0ef      	beq.n	800626e <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 800628e:	7bfb      	ldrb	r3, [r7, #15]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d106      	bne.n	80062a2 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 8006296:	695a      	ldr	r2, [r3, #20]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	4903      	ldr	r1, [pc, #12]	; (80062ac <RCCEx_PLLSAI2_Config+0x1b0>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	40021000 	.word	0x40021000

080062b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e040      	b.n	8006344 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fc f8ce 	bl	8002474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2224      	movs	r2, #36	; 0x24
 80062dc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0201 	bic.w	r2, r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8c0 	bl	8006474 <UART_SetConfig>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d101      	bne.n	80062fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e022      	b.n	8006344 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	2b00      	cmp	r3, #0
 8006304:	d002      	beq.n	800630c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fc26 	bl	8006b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800631a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800632a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0201 	orr.w	r2, r2, #1
 800633a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fcad 	bl	8006c9c <UART_CheckIdleState>
 8006342:	4603      	mov	r3, r0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3708      	adds	r7, #8
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b08a      	sub	sp, #40	; 0x28
 8006350:	af02      	add	r7, sp, #8
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006360:	2b20      	cmp	r3, #32
 8006362:	f040 8081 	bne.w	8006468 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d002      	beq.n	8006372 <HAL_UART_Transmit+0x26>
 800636c:	88fb      	ldrh	r3, [r7, #6]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d101      	bne.n	8006376 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e079      	b.n	800646a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <HAL_UART_Transmit+0x38>
 8006380:	2302      	movs	r3, #2
 8006382:	e072      	b.n	800646a <HAL_UART_Transmit+0x11e>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2221      	movs	r2, #33	; 0x21
 8006396:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006398:	f7fc f9d4 	bl	8002744 <HAL_GetTick>
 800639c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	88fa      	ldrh	r2, [r7, #6]
 80063a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	88fa      	ldrh	r2, [r7, #6]
 80063aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	d108      	bne.n	80063ca <HAL_UART_Transmit+0x7e>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d104      	bne.n	80063ca <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80063c0:	2300      	movs	r3, #0
 80063c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	61bb      	str	r3, [r7, #24]
 80063c8:	e003      	b.n	80063d2 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ce:	2300      	movs	r3, #0
 80063d0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80063da:	e02d      	b.n	8006438 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	2180      	movs	r1, #128	; 0x80
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 fc9d 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	e039      	b.n	800646a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10b      	bne.n	8006414 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	881a      	ldrh	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006408:	b292      	uxth	r2, r2
 800640a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	3302      	adds	r3, #2
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	e008      	b.n	8006426 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	781a      	ldrb	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	b292      	uxth	r2, r2
 800641e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006420:	69fb      	ldr	r3, [r7, #28]
 8006422:	3301      	adds	r3, #1
 8006424:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800642c:	b29b      	uxth	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800643e:	b29b      	uxth	r3, r3
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1cb      	bne.n	80063dc <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	2140      	movs	r1, #64	; 0x40
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fc69 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d001      	beq.n	800645e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e005      	b.n	800646a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2220      	movs	r2, #32
 8006462:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	e000      	b.n	800646a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
  }
}
 800646a:	4618      	mov	r0, r3
 800646c:	3720      	adds	r7, #32
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
	...

08006474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006474:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006478:	b08a      	sub	sp, #40	; 0x28
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006482:	2300      	movs	r3, #0
 8006484:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	431a      	orrs	r2, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	695b      	ldr	r3, [r3, #20]
 8006498:	431a      	orrs	r2, r3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	4313      	orrs	r3, r2
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4bb8      	ldr	r3, [pc, #736]	; (800678c <UART_SetConfig+0x318>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6812      	ldr	r2, [r2, #0]
 80064b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	699b      	ldr	r3, [r3, #24]
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4aae      	ldr	r2, [pc, #696]	; (8006790 <UART_SetConfig+0x31c>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d004      	beq.n	80064e6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a1b      	ldr	r3, [r3, #32]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	4313      	orrs	r3, r2
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f6:	430a      	orrs	r2, r1
 80064f8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4aa5      	ldr	r2, [pc, #660]	; (8006794 <UART_SetConfig+0x320>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d126      	bne.n	8006552 <UART_SetConfig+0xde>
 8006504:	4ba4      	ldr	r3, [pc, #656]	; (8006798 <UART_SetConfig+0x324>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	2b03      	cmp	r3, #3
 8006510:	d81a      	bhi.n	8006548 <UART_SetConfig+0xd4>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0xa4>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	08006529 	.word	0x08006529
 800651c:	08006539 	.word	0x08006539
 8006520:	08006531 	.word	0x08006531
 8006524:	08006541 	.word	0x08006541
 8006528:	2301      	movs	r3, #1
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652e:	e105      	b.n	800673c <UART_SetConfig+0x2c8>
 8006530:	2302      	movs	r3, #2
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006536:	e101      	b.n	800673c <UART_SetConfig+0x2c8>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653e:	e0fd      	b.n	800673c <UART_SetConfig+0x2c8>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006546:	e0f9      	b.n	800673c <UART_SetConfig+0x2c8>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654e:	bf00      	nop
 8006550:	e0f4      	b.n	800673c <UART_SetConfig+0x2c8>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a91      	ldr	r2, [pc, #580]	; (800679c <UART_SetConfig+0x328>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d138      	bne.n	80065ce <UART_SetConfig+0x15a>
 800655c:	4b8e      	ldr	r3, [pc, #568]	; (8006798 <UART_SetConfig+0x324>)
 800655e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b0c      	cmp	r3, #12
 8006568:	d82c      	bhi.n	80065c4 <UART_SetConfig+0x150>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0xfc>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	080065a5 	.word	0x080065a5
 8006574:	080065c5 	.word	0x080065c5
 8006578:	080065c5 	.word	0x080065c5
 800657c:	080065c5 	.word	0x080065c5
 8006580:	080065b5 	.word	0x080065b5
 8006584:	080065c5 	.word	0x080065c5
 8006588:	080065c5 	.word	0x080065c5
 800658c:	080065c5 	.word	0x080065c5
 8006590:	080065ad 	.word	0x080065ad
 8006594:	080065c5 	.word	0x080065c5
 8006598:	080065c5 	.word	0x080065c5
 800659c:	080065c5 	.word	0x080065c5
 80065a0:	080065bd 	.word	0x080065bd
 80065a4:	2300      	movs	r3, #0
 80065a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065aa:	e0c7      	b.n	800673c <UART_SetConfig+0x2c8>
 80065ac:	2302      	movs	r3, #2
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065b2:	e0c3      	b.n	800673c <UART_SetConfig+0x2c8>
 80065b4:	2304      	movs	r3, #4
 80065b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ba:	e0bf      	b.n	800673c <UART_SetConfig+0x2c8>
 80065bc:	2308      	movs	r3, #8
 80065be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065c2:	e0bb      	b.n	800673c <UART_SetConfig+0x2c8>
 80065c4:	2310      	movs	r3, #16
 80065c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065ca:	bf00      	nop
 80065cc:	e0b6      	b.n	800673c <UART_SetConfig+0x2c8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a73      	ldr	r2, [pc, #460]	; (80067a0 <UART_SetConfig+0x32c>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d125      	bne.n	8006624 <UART_SetConfig+0x1b0>
 80065d8:	4b6f      	ldr	r3, [pc, #444]	; (8006798 <UART_SetConfig+0x324>)
 80065da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065e2:	2b10      	cmp	r3, #16
 80065e4:	d011      	beq.n	800660a <UART_SetConfig+0x196>
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d802      	bhi.n	80065f0 <UART_SetConfig+0x17c>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d005      	beq.n	80065fa <UART_SetConfig+0x186>
 80065ee:	e014      	b.n	800661a <UART_SetConfig+0x1a6>
 80065f0:	2b20      	cmp	r3, #32
 80065f2:	d006      	beq.n	8006602 <UART_SetConfig+0x18e>
 80065f4:	2b30      	cmp	r3, #48	; 0x30
 80065f6:	d00c      	beq.n	8006612 <UART_SetConfig+0x19e>
 80065f8:	e00f      	b.n	800661a <UART_SetConfig+0x1a6>
 80065fa:	2300      	movs	r3, #0
 80065fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006600:	e09c      	b.n	800673c <UART_SetConfig+0x2c8>
 8006602:	2302      	movs	r3, #2
 8006604:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006608:	e098      	b.n	800673c <UART_SetConfig+0x2c8>
 800660a:	2304      	movs	r3, #4
 800660c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006610:	e094      	b.n	800673c <UART_SetConfig+0x2c8>
 8006612:	2308      	movs	r3, #8
 8006614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006618:	e090      	b.n	800673c <UART_SetConfig+0x2c8>
 800661a:	2310      	movs	r3, #16
 800661c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006620:	bf00      	nop
 8006622:	e08b      	b.n	800673c <UART_SetConfig+0x2c8>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a5e      	ldr	r2, [pc, #376]	; (80067a4 <UART_SetConfig+0x330>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d125      	bne.n	800667a <UART_SetConfig+0x206>
 800662e:	4b5a      	ldr	r3, [pc, #360]	; (8006798 <UART_SetConfig+0x324>)
 8006630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006638:	2b40      	cmp	r3, #64	; 0x40
 800663a:	d011      	beq.n	8006660 <UART_SetConfig+0x1ec>
 800663c:	2b40      	cmp	r3, #64	; 0x40
 800663e:	d802      	bhi.n	8006646 <UART_SetConfig+0x1d2>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <UART_SetConfig+0x1dc>
 8006644:	e014      	b.n	8006670 <UART_SetConfig+0x1fc>
 8006646:	2b80      	cmp	r3, #128	; 0x80
 8006648:	d006      	beq.n	8006658 <UART_SetConfig+0x1e4>
 800664a:	2bc0      	cmp	r3, #192	; 0xc0
 800664c:	d00c      	beq.n	8006668 <UART_SetConfig+0x1f4>
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x1fc>
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006656:	e071      	b.n	800673c <UART_SetConfig+0x2c8>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665e:	e06d      	b.n	800673c <UART_SetConfig+0x2c8>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006666:	e069      	b.n	800673c <UART_SetConfig+0x2c8>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666e:	e065      	b.n	800673c <UART_SetConfig+0x2c8>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006676:	bf00      	nop
 8006678:	e060      	b.n	800673c <UART_SetConfig+0x2c8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <UART_SetConfig+0x334>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d129      	bne.n	80066d8 <UART_SetConfig+0x264>
 8006684:	4b44      	ldr	r3, [pc, #272]	; (8006798 <UART_SetConfig+0x324>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006692:	d014      	beq.n	80066be <UART_SetConfig+0x24a>
 8006694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006698:	d802      	bhi.n	80066a0 <UART_SetConfig+0x22c>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d007      	beq.n	80066ae <UART_SetConfig+0x23a>
 800669e:	e016      	b.n	80066ce <UART_SetConfig+0x25a>
 80066a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066a4:	d007      	beq.n	80066b6 <UART_SetConfig+0x242>
 80066a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066aa:	d00c      	beq.n	80066c6 <UART_SetConfig+0x252>
 80066ac:	e00f      	b.n	80066ce <UART_SetConfig+0x25a>
 80066ae:	2300      	movs	r3, #0
 80066b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b4:	e042      	b.n	800673c <UART_SetConfig+0x2c8>
 80066b6:	2302      	movs	r3, #2
 80066b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066bc:	e03e      	b.n	800673c <UART_SetConfig+0x2c8>
 80066be:	2304      	movs	r3, #4
 80066c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c4:	e03a      	b.n	800673c <UART_SetConfig+0x2c8>
 80066c6:	2308      	movs	r3, #8
 80066c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066cc:	e036      	b.n	800673c <UART_SetConfig+0x2c8>
 80066ce:	2310      	movs	r3, #16
 80066d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d4:	bf00      	nop
 80066d6:	e031      	b.n	800673c <UART_SetConfig+0x2c8>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a2c      	ldr	r2, [pc, #176]	; (8006790 <UART_SetConfig+0x31c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d129      	bne.n	8006736 <UART_SetConfig+0x2c2>
 80066e2:	4b2d      	ldr	r3, [pc, #180]	; (8006798 <UART_SetConfig+0x324>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80066ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f0:	d014      	beq.n	800671c <UART_SetConfig+0x2a8>
 80066f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066f6:	d802      	bhi.n	80066fe <UART_SetConfig+0x28a>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d007      	beq.n	800670c <UART_SetConfig+0x298>
 80066fc:	e016      	b.n	800672c <UART_SetConfig+0x2b8>
 80066fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006702:	d007      	beq.n	8006714 <UART_SetConfig+0x2a0>
 8006704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006708:	d00c      	beq.n	8006724 <UART_SetConfig+0x2b0>
 800670a:	e00f      	b.n	800672c <UART_SetConfig+0x2b8>
 800670c:	2300      	movs	r3, #0
 800670e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006712:	e013      	b.n	800673c <UART_SetConfig+0x2c8>
 8006714:	2302      	movs	r3, #2
 8006716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671a:	e00f      	b.n	800673c <UART_SetConfig+0x2c8>
 800671c:	2304      	movs	r3, #4
 800671e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006722:	e00b      	b.n	800673c <UART_SetConfig+0x2c8>
 8006724:	2308      	movs	r3, #8
 8006726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672a:	e007      	b.n	800673c <UART_SetConfig+0x2c8>
 800672c:	2310      	movs	r3, #16
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <UART_SetConfig+0x2c8>
 8006736:	2310      	movs	r3, #16
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <UART_SetConfig+0x31c>)
 8006742:	4293      	cmp	r3, r2
 8006744:	f040 80fe 	bne.w	8006944 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006748:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800674c:	2b08      	cmp	r3, #8
 800674e:	d837      	bhi.n	80067c0 <UART_SetConfig+0x34c>
 8006750:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <UART_SetConfig+0x2e4>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	0800677d 	.word	0x0800677d
 800675c:	080067c1 	.word	0x080067c1
 8006760:	08006785 	.word	0x08006785
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067b1 	.word	0x080067b1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067b9 	.word	0x080067b9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800677c:	f7ff f85c 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8006780:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006782:	e020      	b.n	80067c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8006784:	4b09      	ldr	r3, [pc, #36]	; (80067ac <UART_SetConfig+0x338>)
 8006786:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006788:	e01d      	b.n	80067c6 <UART_SetConfig+0x352>
 800678a:	bf00      	nop
 800678c:	efff69f3 	.word	0xefff69f3
 8006790:	40008000 	.word	0x40008000
 8006794:	40013800 	.word	0x40013800
 8006798:	40021000 	.word	0x40021000
 800679c:	40004400 	.word	0x40004400
 80067a0:	40004800 	.word	0x40004800
 80067a4:	40004c00 	.word	0x40004c00
 80067a8:	40005000 	.word	0x40005000
 80067ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80067b0:	f7fe ffac 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80067b4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067b6:	e006      	b.n	80067c6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80067b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067bc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80067be:	e002      	b.n	80067c6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	76fb      	strb	r3, [r7, #27]
        break;
 80067c4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 81b9 	beq.w	8006b40 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	4613      	mov	r3, r2
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	4413      	add	r3, r2
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d305      	bcc.n	80067ea <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d902      	bls.n	80067f0 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	76fb      	strb	r3, [r7, #27]
 80067ee:	e1a7      	b.n	8006b40 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80067f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	f200 8092 	bhi.w	800691e <UART_SetConfig+0x4aa>
 80067fa:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0x38c>)
 80067fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006800:	08006825 	.word	0x08006825
 8006804:	0800691f 	.word	0x0800691f
 8006808:	08006873 	.word	0x08006873
 800680c:	0800691f 	.word	0x0800691f
 8006810:	080068a7 	.word	0x080068a7
 8006814:	0800691f 	.word	0x0800691f
 8006818:	0800691f 	.word	0x0800691f
 800681c:	0800691f 	.word	0x0800691f
 8006820:	080068f5 	.word	0x080068f5
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8006824:	f7ff f808 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8006828:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4619      	mov	r1, r3
 800682e:	f04f 0200 	mov.w	r2, #0
 8006832:	f04f 0300 	mov.w	r3, #0
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	0214      	lsls	r4, r2, #8
 800683c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006840:	020b      	lsls	r3, r1, #8
 8006842:	687a      	ldr	r2, [r7, #4]
 8006844:	6852      	ldr	r2, [r2, #4]
 8006846:	0852      	lsrs	r2, r2, #1
 8006848:	4611      	mov	r1, r2
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	eb13 0b01 	adds.w	fp, r3, r1
 8006852:	eb44 0c02 	adc.w	ip, r4, r2
 8006856:	4658      	mov	r0, fp
 8006858:	4661      	mov	r1, ip
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f04f 0400 	mov.w	r4, #0
 8006862:	461a      	mov	r2, r3
 8006864:	4623      	mov	r3, r4
 8006866:	f7fa fa5f 	bl	8000d28 <__aeabi_uldivmod>
 800686a:	4603      	mov	r3, r0
 800686c:	460c      	mov	r4, r1
 800686e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8006870:	e058      	b.n	8006924 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	085b      	lsrs	r3, r3, #1
 8006878:	f04f 0400 	mov.w	r4, #0
 800687c:	49ae      	ldr	r1, [pc, #696]	; (8006b38 <UART_SetConfig+0x6c4>)
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	eb13 0b01 	adds.w	fp, r3, r1
 8006886:	eb44 0c02 	adc.w	ip, r4, r2
 800688a:	4658      	mov	r0, fp
 800688c:	4661      	mov	r1, ip
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f04f 0400 	mov.w	r4, #0
 8006896:	461a      	mov	r2, r3
 8006898:	4623      	mov	r3, r4
 800689a:	f7fa fa45 	bl	8000d28 <__aeabi_uldivmod>
 800689e:	4603      	mov	r3, r0
 80068a0:	460c      	mov	r4, r1
 80068a2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80068a4:	e03e      	b.n	8006924 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80068a6:	f7fe ff31 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80068aa:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4619      	mov	r1, r3
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	f04f 0400 	mov.w	r4, #0
 80068bc:	0214      	lsls	r4, r2, #8
 80068be:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80068c2:	020b      	lsls	r3, r1, #8
 80068c4:	687a      	ldr	r2, [r7, #4]
 80068c6:	6852      	ldr	r2, [r2, #4]
 80068c8:	0852      	lsrs	r2, r2, #1
 80068ca:	4611      	mov	r1, r2
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	eb13 0b01 	adds.w	fp, r3, r1
 80068d4:	eb44 0c02 	adc.w	ip, r4, r2
 80068d8:	4658      	mov	r0, fp
 80068da:	4661      	mov	r1, ip
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	461a      	mov	r2, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	f7fa fa1e 	bl	8000d28 <__aeabi_uldivmod>
 80068ec:	4603      	mov	r3, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80068f2:	e017      	b.n	8006924 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	085b      	lsrs	r3, r3, #1
 80068fa:	f04f 0400 	mov.w	r4, #0
 80068fe:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 8006902:	f144 0100 	adc.w	r1, r4, #0
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f04f 0400 	mov.w	r4, #0
 800690e:	461a      	mov	r2, r3
 8006910:	4623      	mov	r3, r4
 8006912:	f7fa fa09 	bl	8000d28 <__aeabi_uldivmod>
 8006916:	4603      	mov	r3, r0
 8006918:	460c      	mov	r4, r1
 800691a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800691c:	e002      	b.n	8006924 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	76fb      	strb	r3, [r7, #27]
            break;
 8006922:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800692a:	d308      	bcc.n	800693e <UART_SetConfig+0x4ca>
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006932:	d204      	bcs.n	800693e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69fa      	ldr	r2, [r7, #28]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	e100      	b.n	8006b40 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	76fb      	strb	r3, [r7, #27]
 8006942:	e0fd      	b.n	8006b40 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	69db      	ldr	r3, [r3, #28]
 8006948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800694c:	f040 8084 	bne.w	8006a58 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8006950:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006954:	2b08      	cmp	r3, #8
 8006956:	d85f      	bhi.n	8006a18 <UART_SetConfig+0x5a4>
 8006958:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <UART_SetConfig+0x4ec>)
 800695a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695e:	bf00      	nop
 8006960:	08006985 	.word	0x08006985
 8006964:	080069a5 	.word	0x080069a5
 8006968:	080069c5 	.word	0x080069c5
 800696c:	08006a19 	.word	0x08006a19
 8006970:	080069e1 	.word	0x080069e1
 8006974:	08006a19 	.word	0x08006a19
 8006978:	08006a19 	.word	0x08006a19
 800697c:	08006a19 	.word	0x08006a19
 8006980:	08006a01 	.word	0x08006a01
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006984:	f7fe ff58 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8006988:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	005a      	lsls	r2, r3, #1
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	085b      	lsrs	r3, r3, #1
 8006994:	441a      	add	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	fbb2 f3f3 	udiv	r3, r2, r3
 800699e:	b29b      	uxth	r3, r3
 80069a0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069a2:	e03c      	b.n	8006a1e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a4:	f7fe ff5e 	bl	8005864 <HAL_RCC_GetPCLK2Freq>
 80069a8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	005a      	lsls	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	085b      	lsrs	r3, r3, #1
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80069be:	b29b      	uxth	r3, r3
 80069c0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069c2:	e02c      	b.n	8006a1e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	085b      	lsrs	r3, r3, #1
 80069ca:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80069ce:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	6852      	ldr	r2, [r2, #4]
 80069d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80069da:	b29b      	uxth	r3, r3
 80069dc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069de:	e01e      	b.n	8006a1e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069e0:	f7fe fe94 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80069e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	005a      	lsls	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	085b      	lsrs	r3, r3, #1
 80069f0:	441a      	add	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80069fe:	e00e      	b.n	8006a1e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	085b      	lsrs	r3, r3, #1
 8006a06:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006a16:	e002      	b.n	8006a1e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	76fb      	strb	r3, [r7, #27]
        break;
 8006a1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	2b0f      	cmp	r3, #15
 8006a22:	d916      	bls.n	8006a52 <UART_SetConfig+0x5de>
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a2a:	d212      	bcs.n	8006a52 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	f023 030f 	bic.w	r3, r3, #15
 8006a34:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	085b      	lsrs	r3, r3, #1
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	f003 0307 	and.w	r3, r3, #7
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	89fb      	ldrh	r3, [r7, #14]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	89fa      	ldrh	r2, [r7, #14]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e076      	b.n	8006b40 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	76fb      	strb	r3, [r7, #27]
 8006a56:	e073      	b.n	8006b40 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8006a58:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a5c:	2b08      	cmp	r3, #8
 8006a5e:	d85c      	bhi.n	8006b1a <UART_SetConfig+0x6a6>
 8006a60:	a201      	add	r2, pc, #4	; (adr r2, 8006a68 <UART_SetConfig+0x5f4>)
 8006a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a66:	bf00      	nop
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006aab 	.word	0x08006aab
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006b1b 	.word	0x08006b1b
 8006a78:	08006ae5 	.word	0x08006ae5
 8006a7c:	08006b1b 	.word	0x08006b1b
 8006a80:	08006b1b 	.word	0x08006b1b
 8006a84:	08006b1b 	.word	0x08006b1b
 8006a88:	08006b03 	.word	0x08006b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a8c:	f7fe fed4 	bl	8005838 <HAL_RCC_GetPCLK1Freq>
 8006a90:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	085a      	lsrs	r2, r3, #1
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006aa8:	e03a      	b.n	8006b20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aaa:	f7fe fedb 	bl	8005864 <HAL_RCC_GetPCLK2Freq>
 8006aae:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	085a      	lsrs	r2, r3, #1
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	441a      	add	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ac6:	e02b      	b.n	8006b20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	085b      	lsrs	r3, r3, #1
 8006ace:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006ad2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6852      	ldr	r2, [r2, #4]
 8006ada:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006ae2:	e01d      	b.n	8006b20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ae4:	f7fe fe12 	bl	800570c <HAL_RCC_GetSysClockFreq>
 8006ae8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	085a      	lsrs	r2, r3, #1
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	441a      	add	r2, r3
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b00:	e00e      	b.n	8006b20 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8006b18:	e002      	b.n	8006b20 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	76fb      	strb	r3, [r7, #27]
        break;
 8006b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2b0f      	cmp	r3, #15
 8006b24:	d90a      	bls.n	8006b3c <UART_SetConfig+0x6c8>
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2c:	d206      	bcs.n	8006b3c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e003      	b.n	8006b40 <UART_SetConfig+0x6cc>
 8006b38:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006b4c:	7efb      	ldrb	r3, [r7, #27]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3728      	adds	r7, #40	; 0x28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08006b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00a      	beq.n	8006b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b86:	f003 0302 	and.w	r3, r3, #2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00a      	beq.n	8006ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	430a      	orrs	r2, r1
 8006ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bec:	f003 0310 	and.w	r3, r3, #16
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00a      	beq.n	8006c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	430a      	orrs	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d00a      	beq.n	8006c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	430a      	orrs	r2, r1
 8006c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d01a      	beq.n	8006c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	430a      	orrs	r2, r1
 8006c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c56:	d10a      	bne.n	8006c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	430a      	orrs	r2, r1
 8006c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d00a      	beq.n	8006c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	430a      	orrs	r2, r1
 8006c8e:	605a      	str	r2, [r3, #4]
  }
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b086      	sub	sp, #24
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006caa:	f7fb fd4b 	bl	8002744 <HAL_GetTick>
 8006cae:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0308 	and.w	r3, r3, #8
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d10e      	bne.n	8006cdc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f82a 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e020      	b.n	8006d1e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0304 	and.w	r3, r3, #4
 8006ce6:	2b04      	cmp	r3, #4
 8006ce8:	d10e      	bne.n	8006d08 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f814 	bl	8006d26 <UART_WaitOnFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e00a      	b.n	8006d1e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2220      	movs	r2, #32
 8006d12:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3710      	adds	r7, #16
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b084      	sub	sp, #16
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	60f8      	str	r0, [r7, #12]
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	603b      	str	r3, [r7, #0]
 8006d32:	4613      	mov	r3, r2
 8006d34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d36:	e05d      	b.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d3e:	d059      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d40:	f7fb fd00 	bl	8002744 <HAL_GetTick>
 8006d44:	4602      	mov	r2, r0
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	1ad3      	subs	r3, r2, r3
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d302      	bcc.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d11b      	bne.n	8006d8e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d64:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0201 	bic.w	r2, r2, #1
 8006d74:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e042      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02b      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	69db      	ldr	r3, [r3, #28]
 8006da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006daa:	d123      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006db4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006dc4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 0201 	bic.w	r2, r2, #1
 8006dd4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2220      	movs	r2, #32
 8006de0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2220      	movs	r2, #32
 8006de6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e00f      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69da      	ldr	r2, [r3, #28]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d092      	beq.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <__errno>:
 8006e1c:	4b01      	ldr	r3, [pc, #4]	; (8006e24 <__errno+0x8>)
 8006e1e:	6818      	ldr	r0, [r3, #0]
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	2000000c 	.word	0x2000000c

08006e28 <__libc_init_array>:
 8006e28:	b570      	push	{r4, r5, r6, lr}
 8006e2a:	4e0d      	ldr	r6, [pc, #52]	; (8006e60 <__libc_init_array+0x38>)
 8006e2c:	4c0d      	ldr	r4, [pc, #52]	; (8006e64 <__libc_init_array+0x3c>)
 8006e2e:	1ba4      	subs	r4, r4, r6
 8006e30:	10a4      	asrs	r4, r4, #2
 8006e32:	2500      	movs	r5, #0
 8006e34:	42a5      	cmp	r5, r4
 8006e36:	d109      	bne.n	8006e4c <__libc_init_array+0x24>
 8006e38:	4e0b      	ldr	r6, [pc, #44]	; (8006e68 <__libc_init_array+0x40>)
 8006e3a:	4c0c      	ldr	r4, [pc, #48]	; (8006e6c <__libc_init_array+0x44>)
 8006e3c:	f003 fd56 	bl	800a8ec <_init>
 8006e40:	1ba4      	subs	r4, r4, r6
 8006e42:	10a4      	asrs	r4, r4, #2
 8006e44:	2500      	movs	r5, #0
 8006e46:	42a5      	cmp	r5, r4
 8006e48:	d105      	bne.n	8006e56 <__libc_init_array+0x2e>
 8006e4a:	bd70      	pop	{r4, r5, r6, pc}
 8006e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e50:	4798      	blx	r3
 8006e52:	3501      	adds	r5, #1
 8006e54:	e7ee      	b.n	8006e34 <__libc_init_array+0xc>
 8006e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e5a:	4798      	blx	r3
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	e7f2      	b.n	8006e46 <__libc_init_array+0x1e>
 8006e60:	0800acc0 	.word	0x0800acc0
 8006e64:	0800acc0 	.word	0x0800acc0
 8006e68:	0800acc0 	.word	0x0800acc0
 8006e6c:	0800acc4 	.word	0x0800acc4

08006e70 <memset>:
 8006e70:	4402      	add	r2, r0
 8006e72:	4603      	mov	r3, r0
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d100      	bne.n	8006e7a <memset+0xa>
 8006e78:	4770      	bx	lr
 8006e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e7e:	e7f9      	b.n	8006e74 <memset+0x4>

08006e80 <__cvt>:
 8006e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e84:	ec55 4b10 	vmov	r4, r5, d0
 8006e88:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006e8a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e8e:	2d00      	cmp	r5, #0
 8006e90:	460e      	mov	r6, r1
 8006e92:	4691      	mov	r9, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	bfb8      	it	lt
 8006e98:	4622      	movlt	r2, r4
 8006e9a:	462b      	mov	r3, r5
 8006e9c:	f027 0720 	bic.w	r7, r7, #32
 8006ea0:	bfbb      	ittet	lt
 8006ea2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006ea6:	461d      	movlt	r5, r3
 8006ea8:	2300      	movge	r3, #0
 8006eaa:	232d      	movlt	r3, #45	; 0x2d
 8006eac:	bfb8      	it	lt
 8006eae:	4614      	movlt	r4, r2
 8006eb0:	2f46      	cmp	r7, #70	; 0x46
 8006eb2:	700b      	strb	r3, [r1, #0]
 8006eb4:	d004      	beq.n	8006ec0 <__cvt+0x40>
 8006eb6:	2f45      	cmp	r7, #69	; 0x45
 8006eb8:	d100      	bne.n	8006ebc <__cvt+0x3c>
 8006eba:	3601      	adds	r6, #1
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	e000      	b.n	8006ec2 <__cvt+0x42>
 8006ec0:	2103      	movs	r1, #3
 8006ec2:	ab03      	add	r3, sp, #12
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	ab02      	add	r3, sp, #8
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	4632      	mov	r2, r6
 8006ecc:	4653      	mov	r3, sl
 8006ece:	ec45 4b10 	vmov	d0, r4, r5
 8006ed2:	f001 fd75 	bl	80089c0 <_dtoa_r>
 8006ed6:	2f47      	cmp	r7, #71	; 0x47
 8006ed8:	4680      	mov	r8, r0
 8006eda:	d102      	bne.n	8006ee2 <__cvt+0x62>
 8006edc:	f019 0f01 	tst.w	r9, #1
 8006ee0:	d026      	beq.n	8006f30 <__cvt+0xb0>
 8006ee2:	2f46      	cmp	r7, #70	; 0x46
 8006ee4:	eb08 0906 	add.w	r9, r8, r6
 8006ee8:	d111      	bne.n	8006f0e <__cvt+0x8e>
 8006eea:	f898 3000 	ldrb.w	r3, [r8]
 8006eee:	2b30      	cmp	r3, #48	; 0x30
 8006ef0:	d10a      	bne.n	8006f08 <__cvt+0x88>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	4629      	mov	r1, r5
 8006efa:	f7f9 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 8006efe:	b918      	cbnz	r0, 8006f08 <__cvt+0x88>
 8006f00:	f1c6 0601 	rsb	r6, r6, #1
 8006f04:	f8ca 6000 	str.w	r6, [sl]
 8006f08:	f8da 3000 	ldr.w	r3, [sl]
 8006f0c:	4499      	add	r9, r3
 8006f0e:	2200      	movs	r2, #0
 8006f10:	2300      	movs	r3, #0
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f1a:	b938      	cbnz	r0, 8006f2c <__cvt+0xac>
 8006f1c:	2230      	movs	r2, #48	; 0x30
 8006f1e:	9b03      	ldr	r3, [sp, #12]
 8006f20:	454b      	cmp	r3, r9
 8006f22:	d205      	bcs.n	8006f30 <__cvt+0xb0>
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	9103      	str	r1, [sp, #12]
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e7f8      	b.n	8006f1e <__cvt+0x9e>
 8006f2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f34:	eba3 0308 	sub.w	r3, r3, r8
 8006f38:	4640      	mov	r0, r8
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	b004      	add	sp, #16
 8006f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006f42 <__exponent>:
 8006f42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f44:	2900      	cmp	r1, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	bfba      	itte	lt
 8006f4a:	4249      	neglt	r1, r1
 8006f4c:	232d      	movlt	r3, #45	; 0x2d
 8006f4e:	232b      	movge	r3, #43	; 0x2b
 8006f50:	2909      	cmp	r1, #9
 8006f52:	f804 2b02 	strb.w	r2, [r4], #2
 8006f56:	7043      	strb	r3, [r0, #1]
 8006f58:	dd20      	ble.n	8006f9c <__exponent+0x5a>
 8006f5a:	f10d 0307 	add.w	r3, sp, #7
 8006f5e:	461f      	mov	r7, r3
 8006f60:	260a      	movs	r6, #10
 8006f62:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f66:	fb06 1115 	mls	r1, r6, r5, r1
 8006f6a:	3130      	adds	r1, #48	; 0x30
 8006f6c:	2d09      	cmp	r5, #9
 8006f6e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006f72:	f103 32ff 	add.w	r2, r3, #4294967295
 8006f76:	4629      	mov	r1, r5
 8006f78:	dc09      	bgt.n	8006f8e <__exponent+0x4c>
 8006f7a:	3130      	adds	r1, #48	; 0x30
 8006f7c:	3b02      	subs	r3, #2
 8006f7e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f82:	42bb      	cmp	r3, r7
 8006f84:	4622      	mov	r2, r4
 8006f86:	d304      	bcc.n	8006f92 <__exponent+0x50>
 8006f88:	1a10      	subs	r0, r2, r0
 8006f8a:	b003      	add	sp, #12
 8006f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f8e:	4613      	mov	r3, r2
 8006f90:	e7e7      	b.n	8006f62 <__exponent+0x20>
 8006f92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f96:	f804 2b01 	strb.w	r2, [r4], #1
 8006f9a:	e7f2      	b.n	8006f82 <__exponent+0x40>
 8006f9c:	2330      	movs	r3, #48	; 0x30
 8006f9e:	4419      	add	r1, r3
 8006fa0:	7083      	strb	r3, [r0, #2]
 8006fa2:	1d02      	adds	r2, r0, #4
 8006fa4:	70c1      	strb	r1, [r0, #3]
 8006fa6:	e7ef      	b.n	8006f88 <__exponent+0x46>

08006fa8 <_printf_float>:
 8006fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fac:	b08d      	sub	sp, #52	; 0x34
 8006fae:	460c      	mov	r4, r1
 8006fb0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	461f      	mov	r7, r3
 8006fb8:	4605      	mov	r5, r0
 8006fba:	f002 fde5 	bl	8009b88 <_localeconv_r>
 8006fbe:	6803      	ldr	r3, [r0, #0]
 8006fc0:	9304      	str	r3, [sp, #16]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7f9 f904 	bl	80001d0 <strlen>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	930a      	str	r3, [sp, #40]	; 0x28
 8006fcc:	f8d8 3000 	ldr.w	r3, [r8]
 8006fd0:	9005      	str	r0, [sp, #20]
 8006fd2:	3307      	adds	r3, #7
 8006fd4:	f023 0307 	bic.w	r3, r3, #7
 8006fd8:	f103 0208 	add.w	r2, r3, #8
 8006fdc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006fe0:	f8d4 b000 	ldr.w	fp, [r4]
 8006fe4:	f8c8 2000 	str.w	r2, [r8]
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006ff0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006ff4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8007002:	4ba7      	ldr	r3, [pc, #668]	; (80072a0 <_printf_float+0x2f8>)
 8007004:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007008:	f7f9 fd90 	bl	8000b2c <__aeabi_dcmpun>
 800700c:	bb70      	cbnz	r0, 800706c <_printf_float+0xc4>
 800700e:	f04f 32ff 	mov.w	r2, #4294967295
 8007012:	4ba3      	ldr	r3, [pc, #652]	; (80072a0 <_printf_float+0x2f8>)
 8007014:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007018:	f7f9 fd6a 	bl	8000af0 <__aeabi_dcmple>
 800701c:	bb30      	cbnz	r0, 800706c <_printf_float+0xc4>
 800701e:	2200      	movs	r2, #0
 8007020:	2300      	movs	r3, #0
 8007022:	4640      	mov	r0, r8
 8007024:	4649      	mov	r1, r9
 8007026:	f7f9 fd59 	bl	8000adc <__aeabi_dcmplt>
 800702a:	b110      	cbz	r0, 8007032 <_printf_float+0x8a>
 800702c:	232d      	movs	r3, #45	; 0x2d
 800702e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007032:	4a9c      	ldr	r2, [pc, #624]	; (80072a4 <_printf_float+0x2fc>)
 8007034:	4b9c      	ldr	r3, [pc, #624]	; (80072a8 <_printf_float+0x300>)
 8007036:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800703a:	bf8c      	ite	hi
 800703c:	4690      	movhi	r8, r2
 800703e:	4698      	movls	r8, r3
 8007040:	2303      	movs	r3, #3
 8007042:	f02b 0204 	bic.w	r2, fp, #4
 8007046:	6123      	str	r3, [r4, #16]
 8007048:	6022      	str	r2, [r4, #0]
 800704a:	f04f 0900 	mov.w	r9, #0
 800704e:	9700      	str	r7, [sp, #0]
 8007050:	4633      	mov	r3, r6
 8007052:	aa0b      	add	r2, sp, #44	; 0x2c
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f9e6 	bl	8007428 <_printf_common>
 800705c:	3001      	adds	r0, #1
 800705e:	f040 808d 	bne.w	800717c <_printf_float+0x1d4>
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	b00d      	add	sp, #52	; 0x34
 8007068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	4640      	mov	r0, r8
 8007072:	4649      	mov	r1, r9
 8007074:	f7f9 fd5a 	bl	8000b2c <__aeabi_dcmpun>
 8007078:	b110      	cbz	r0, 8007080 <_printf_float+0xd8>
 800707a:	4a8c      	ldr	r2, [pc, #560]	; (80072ac <_printf_float+0x304>)
 800707c:	4b8c      	ldr	r3, [pc, #560]	; (80072b0 <_printf_float+0x308>)
 800707e:	e7da      	b.n	8007036 <_printf_float+0x8e>
 8007080:	6861      	ldr	r1, [r4, #4]
 8007082:	1c4b      	adds	r3, r1, #1
 8007084:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007088:	a80a      	add	r0, sp, #40	; 0x28
 800708a:	d13e      	bne.n	800710a <_printf_float+0x162>
 800708c:	2306      	movs	r3, #6
 800708e:	6063      	str	r3, [r4, #4]
 8007090:	2300      	movs	r3, #0
 8007092:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007096:	ab09      	add	r3, sp, #36	; 0x24
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	ec49 8b10 	vmov	d0, r8, r9
 800709e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070a2:	6022      	str	r2, [r4, #0]
 80070a4:	f8cd a004 	str.w	sl, [sp, #4]
 80070a8:	6861      	ldr	r1, [r4, #4]
 80070aa:	4628      	mov	r0, r5
 80070ac:	f7ff fee8 	bl	8006e80 <__cvt>
 80070b0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80070b4:	2b47      	cmp	r3, #71	; 0x47
 80070b6:	4680      	mov	r8, r0
 80070b8:	d109      	bne.n	80070ce <_printf_float+0x126>
 80070ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070bc:	1cd8      	adds	r0, r3, #3
 80070be:	db02      	blt.n	80070c6 <_printf_float+0x11e>
 80070c0:	6862      	ldr	r2, [r4, #4]
 80070c2:	4293      	cmp	r3, r2
 80070c4:	dd47      	ble.n	8007156 <_printf_float+0x1ae>
 80070c6:	f1aa 0a02 	sub.w	sl, sl, #2
 80070ca:	fa5f fa8a 	uxtb.w	sl, sl
 80070ce:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80070d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070d4:	d824      	bhi.n	8007120 <_printf_float+0x178>
 80070d6:	3901      	subs	r1, #1
 80070d8:	4652      	mov	r2, sl
 80070da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80070de:	9109      	str	r1, [sp, #36]	; 0x24
 80070e0:	f7ff ff2f 	bl	8006f42 <__exponent>
 80070e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070e6:	1813      	adds	r3, r2, r0
 80070e8:	2a01      	cmp	r2, #1
 80070ea:	4681      	mov	r9, r0
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	dc02      	bgt.n	80070f6 <_printf_float+0x14e>
 80070f0:	6822      	ldr	r2, [r4, #0]
 80070f2:	07d1      	lsls	r1, r2, #31
 80070f4:	d501      	bpl.n	80070fa <_printf_float+0x152>
 80070f6:	3301      	adds	r3, #1
 80070f8:	6123      	str	r3, [r4, #16]
 80070fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0a5      	beq.n	800704e <_printf_float+0xa6>
 8007102:	232d      	movs	r3, #45	; 0x2d
 8007104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007108:	e7a1      	b.n	800704e <_printf_float+0xa6>
 800710a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800710e:	f000 8177 	beq.w	8007400 <_printf_float+0x458>
 8007112:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8007116:	d1bb      	bne.n	8007090 <_printf_float+0xe8>
 8007118:	2900      	cmp	r1, #0
 800711a:	d1b9      	bne.n	8007090 <_printf_float+0xe8>
 800711c:	2301      	movs	r3, #1
 800711e:	e7b6      	b.n	800708e <_printf_float+0xe6>
 8007120:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8007124:	d119      	bne.n	800715a <_printf_float+0x1b2>
 8007126:	2900      	cmp	r1, #0
 8007128:	6863      	ldr	r3, [r4, #4]
 800712a:	dd0c      	ble.n	8007146 <_printf_float+0x19e>
 800712c:	6121      	str	r1, [r4, #16]
 800712e:	b913      	cbnz	r3, 8007136 <_printf_float+0x18e>
 8007130:	6822      	ldr	r2, [r4, #0]
 8007132:	07d2      	lsls	r2, r2, #31
 8007134:	d502      	bpl.n	800713c <_printf_float+0x194>
 8007136:	3301      	adds	r3, #1
 8007138:	440b      	add	r3, r1
 800713a:	6123      	str	r3, [r4, #16]
 800713c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800713e:	65a3      	str	r3, [r4, #88]	; 0x58
 8007140:	f04f 0900 	mov.w	r9, #0
 8007144:	e7d9      	b.n	80070fa <_printf_float+0x152>
 8007146:	b913      	cbnz	r3, 800714e <_printf_float+0x1a6>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	07d0      	lsls	r0, r2, #31
 800714c:	d501      	bpl.n	8007152 <_printf_float+0x1aa>
 800714e:	3302      	adds	r3, #2
 8007150:	e7f3      	b.n	800713a <_printf_float+0x192>
 8007152:	2301      	movs	r3, #1
 8007154:	e7f1      	b.n	800713a <_printf_float+0x192>
 8007156:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800715a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800715e:	4293      	cmp	r3, r2
 8007160:	db05      	blt.n	800716e <_printf_float+0x1c6>
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	07d1      	lsls	r1, r2, #31
 8007168:	d5e8      	bpl.n	800713c <_printf_float+0x194>
 800716a:	3301      	adds	r3, #1
 800716c:	e7e5      	b.n	800713a <_printf_float+0x192>
 800716e:	2b00      	cmp	r3, #0
 8007170:	bfd4      	ite	le
 8007172:	f1c3 0302 	rsble	r3, r3, #2
 8007176:	2301      	movgt	r3, #1
 8007178:	4413      	add	r3, r2
 800717a:	e7de      	b.n	800713a <_printf_float+0x192>
 800717c:	6823      	ldr	r3, [r4, #0]
 800717e:	055a      	lsls	r2, r3, #21
 8007180:	d407      	bmi.n	8007192 <_printf_float+0x1ea>
 8007182:	6923      	ldr	r3, [r4, #16]
 8007184:	4642      	mov	r2, r8
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d12b      	bne.n	80071e8 <_printf_float+0x240>
 8007190:	e767      	b.n	8007062 <_printf_float+0xba>
 8007192:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007196:	f240 80dc 	bls.w	8007352 <_printf_float+0x3aa>
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071a2:	f7f9 fc91 	bl	8000ac8 <__aeabi_dcmpeq>
 80071a6:	2800      	cmp	r0, #0
 80071a8:	d033      	beq.n	8007212 <_printf_float+0x26a>
 80071aa:	2301      	movs	r3, #1
 80071ac:	4a41      	ldr	r2, [pc, #260]	; (80072b4 <_printf_float+0x30c>)
 80071ae:	4631      	mov	r1, r6
 80071b0:	4628      	mov	r0, r5
 80071b2:	47b8      	blx	r7
 80071b4:	3001      	adds	r0, #1
 80071b6:	f43f af54 	beq.w	8007062 <_printf_float+0xba>
 80071ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071be:	429a      	cmp	r2, r3
 80071c0:	db02      	blt.n	80071c8 <_printf_float+0x220>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	07d8      	lsls	r0, r3, #31
 80071c6:	d50f      	bpl.n	80071e8 <_printf_float+0x240>
 80071c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	f43f af45 	beq.w	8007062 <_printf_float+0xba>
 80071d8:	f04f 0800 	mov.w	r8, #0
 80071dc:	f104 091a 	add.w	r9, r4, #26
 80071e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e2:	3b01      	subs	r3, #1
 80071e4:	4543      	cmp	r3, r8
 80071e6:	dc09      	bgt.n	80071fc <_printf_float+0x254>
 80071e8:	6823      	ldr	r3, [r4, #0]
 80071ea:	079b      	lsls	r3, r3, #30
 80071ec:	f100 8103 	bmi.w	80073f6 <_printf_float+0x44e>
 80071f0:	68e0      	ldr	r0, [r4, #12]
 80071f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071f4:	4298      	cmp	r0, r3
 80071f6:	bfb8      	it	lt
 80071f8:	4618      	movlt	r0, r3
 80071fa:	e734      	b.n	8007066 <_printf_float+0xbe>
 80071fc:	2301      	movs	r3, #1
 80071fe:	464a      	mov	r2, r9
 8007200:	4631      	mov	r1, r6
 8007202:	4628      	mov	r0, r5
 8007204:	47b8      	blx	r7
 8007206:	3001      	adds	r0, #1
 8007208:	f43f af2b 	beq.w	8007062 <_printf_float+0xba>
 800720c:	f108 0801 	add.w	r8, r8, #1
 8007210:	e7e6      	b.n	80071e0 <_printf_float+0x238>
 8007212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007214:	2b00      	cmp	r3, #0
 8007216:	dc2b      	bgt.n	8007270 <_printf_float+0x2c8>
 8007218:	2301      	movs	r3, #1
 800721a:	4a26      	ldr	r2, [pc, #152]	; (80072b4 <_printf_float+0x30c>)
 800721c:	4631      	mov	r1, r6
 800721e:	4628      	mov	r0, r5
 8007220:	47b8      	blx	r7
 8007222:	3001      	adds	r0, #1
 8007224:	f43f af1d 	beq.w	8007062 <_printf_float+0xba>
 8007228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722a:	b923      	cbnz	r3, 8007236 <_printf_float+0x28e>
 800722c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722e:	b913      	cbnz	r3, 8007236 <_printf_float+0x28e>
 8007230:	6823      	ldr	r3, [r4, #0]
 8007232:	07d9      	lsls	r1, r3, #31
 8007234:	d5d8      	bpl.n	80071e8 <_printf_float+0x240>
 8007236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800723a:	4631      	mov	r1, r6
 800723c:	4628      	mov	r0, r5
 800723e:	47b8      	blx	r7
 8007240:	3001      	adds	r0, #1
 8007242:	f43f af0e 	beq.w	8007062 <_printf_float+0xba>
 8007246:	f04f 0900 	mov.w	r9, #0
 800724a:	f104 0a1a 	add.w	sl, r4, #26
 800724e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007250:	425b      	negs	r3, r3
 8007252:	454b      	cmp	r3, r9
 8007254:	dc01      	bgt.n	800725a <_printf_float+0x2b2>
 8007256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007258:	e794      	b.n	8007184 <_printf_float+0x1dc>
 800725a:	2301      	movs	r3, #1
 800725c:	4652      	mov	r2, sl
 800725e:	4631      	mov	r1, r6
 8007260:	4628      	mov	r0, r5
 8007262:	47b8      	blx	r7
 8007264:	3001      	adds	r0, #1
 8007266:	f43f aefc 	beq.w	8007062 <_printf_float+0xba>
 800726a:	f109 0901 	add.w	r9, r9, #1
 800726e:	e7ee      	b.n	800724e <_printf_float+0x2a6>
 8007270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007274:	429a      	cmp	r2, r3
 8007276:	bfa8      	it	ge
 8007278:	461a      	movge	r2, r3
 800727a:	2a00      	cmp	r2, #0
 800727c:	4691      	mov	r9, r2
 800727e:	dd07      	ble.n	8007290 <_printf_float+0x2e8>
 8007280:	4613      	mov	r3, r2
 8007282:	4631      	mov	r1, r6
 8007284:	4642      	mov	r2, r8
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f aee9 	beq.w	8007062 <_printf_float+0xba>
 8007290:	f104 031a 	add.w	r3, r4, #26
 8007294:	f04f 0b00 	mov.w	fp, #0
 8007298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800729c:	9306      	str	r3, [sp, #24]
 800729e:	e015      	b.n	80072cc <_printf_float+0x324>
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	0800aa08 	.word	0x0800aa08
 80072a8:	0800aa04 	.word	0x0800aa04
 80072ac:	0800aa10 	.word	0x0800aa10
 80072b0:	0800aa0c 	.word	0x0800aa0c
 80072b4:	0800aa14 	.word	0x0800aa14
 80072b8:	2301      	movs	r3, #1
 80072ba:	9a06      	ldr	r2, [sp, #24]
 80072bc:	4631      	mov	r1, r6
 80072be:	4628      	mov	r0, r5
 80072c0:	47b8      	blx	r7
 80072c2:	3001      	adds	r0, #1
 80072c4:	f43f aecd 	beq.w	8007062 <_printf_float+0xba>
 80072c8:	f10b 0b01 	add.w	fp, fp, #1
 80072cc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80072d0:	ebaa 0309 	sub.w	r3, sl, r9
 80072d4:	455b      	cmp	r3, fp
 80072d6:	dcef      	bgt.n	80072b8 <_printf_float+0x310>
 80072d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072dc:	429a      	cmp	r2, r3
 80072de:	44d0      	add	r8, sl
 80072e0:	db15      	blt.n	800730e <_printf_float+0x366>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	07da      	lsls	r2, r3, #31
 80072e6:	d412      	bmi.n	800730e <_printf_float+0x366>
 80072e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072ec:	eba3 020a 	sub.w	r2, r3, sl
 80072f0:	eba3 0a01 	sub.w	sl, r3, r1
 80072f4:	4592      	cmp	sl, r2
 80072f6:	bfa8      	it	ge
 80072f8:	4692      	movge	sl, r2
 80072fa:	f1ba 0f00 	cmp.w	sl, #0
 80072fe:	dc0e      	bgt.n	800731e <_printf_float+0x376>
 8007300:	f04f 0800 	mov.w	r8, #0
 8007304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007308:	f104 091a 	add.w	r9, r4, #26
 800730c:	e019      	b.n	8007342 <_printf_float+0x39a>
 800730e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007312:	4631      	mov	r1, r6
 8007314:	4628      	mov	r0, r5
 8007316:	47b8      	blx	r7
 8007318:	3001      	adds	r0, #1
 800731a:	d1e5      	bne.n	80072e8 <_printf_float+0x340>
 800731c:	e6a1      	b.n	8007062 <_printf_float+0xba>
 800731e:	4653      	mov	r3, sl
 8007320:	4642      	mov	r2, r8
 8007322:	4631      	mov	r1, r6
 8007324:	4628      	mov	r0, r5
 8007326:	47b8      	blx	r7
 8007328:	3001      	adds	r0, #1
 800732a:	d1e9      	bne.n	8007300 <_printf_float+0x358>
 800732c:	e699      	b.n	8007062 <_printf_float+0xba>
 800732e:	2301      	movs	r3, #1
 8007330:	464a      	mov	r2, r9
 8007332:	4631      	mov	r1, r6
 8007334:	4628      	mov	r0, r5
 8007336:	47b8      	blx	r7
 8007338:	3001      	adds	r0, #1
 800733a:	f43f ae92 	beq.w	8007062 <_printf_float+0xba>
 800733e:	f108 0801 	add.w	r8, r8, #1
 8007342:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007346:	1a9b      	subs	r3, r3, r2
 8007348:	eba3 030a 	sub.w	r3, r3, sl
 800734c:	4543      	cmp	r3, r8
 800734e:	dcee      	bgt.n	800732e <_printf_float+0x386>
 8007350:	e74a      	b.n	80071e8 <_printf_float+0x240>
 8007352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007354:	2a01      	cmp	r2, #1
 8007356:	dc01      	bgt.n	800735c <_printf_float+0x3b4>
 8007358:	07db      	lsls	r3, r3, #31
 800735a:	d53a      	bpl.n	80073d2 <_printf_float+0x42a>
 800735c:	2301      	movs	r3, #1
 800735e:	4642      	mov	r2, r8
 8007360:	4631      	mov	r1, r6
 8007362:	4628      	mov	r0, r5
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f ae7b 	beq.w	8007062 <_printf_float+0xba>
 800736c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007370:	4631      	mov	r1, r6
 8007372:	4628      	mov	r0, r5
 8007374:	47b8      	blx	r7
 8007376:	3001      	adds	r0, #1
 8007378:	f108 0801 	add.w	r8, r8, #1
 800737c:	f43f ae71 	beq.w	8007062 <_printf_float+0xba>
 8007380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007382:	2200      	movs	r2, #0
 8007384:	f103 3aff 	add.w	sl, r3, #4294967295
 8007388:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800738c:	2300      	movs	r3, #0
 800738e:	f7f9 fb9b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007392:	b9c8      	cbnz	r0, 80073c8 <_printf_float+0x420>
 8007394:	4653      	mov	r3, sl
 8007396:	4642      	mov	r2, r8
 8007398:	4631      	mov	r1, r6
 800739a:	4628      	mov	r0, r5
 800739c:	47b8      	blx	r7
 800739e:	3001      	adds	r0, #1
 80073a0:	d10e      	bne.n	80073c0 <_printf_float+0x418>
 80073a2:	e65e      	b.n	8007062 <_printf_float+0xba>
 80073a4:	2301      	movs	r3, #1
 80073a6:	4652      	mov	r2, sl
 80073a8:	4631      	mov	r1, r6
 80073aa:	4628      	mov	r0, r5
 80073ac:	47b8      	blx	r7
 80073ae:	3001      	adds	r0, #1
 80073b0:	f43f ae57 	beq.w	8007062 <_printf_float+0xba>
 80073b4:	f108 0801 	add.w	r8, r8, #1
 80073b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ba:	3b01      	subs	r3, #1
 80073bc:	4543      	cmp	r3, r8
 80073be:	dcf1      	bgt.n	80073a4 <_printf_float+0x3fc>
 80073c0:	464b      	mov	r3, r9
 80073c2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073c6:	e6de      	b.n	8007186 <_printf_float+0x1de>
 80073c8:	f04f 0800 	mov.w	r8, #0
 80073cc:	f104 0a1a 	add.w	sl, r4, #26
 80073d0:	e7f2      	b.n	80073b8 <_printf_float+0x410>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e7df      	b.n	8007396 <_printf_float+0x3ee>
 80073d6:	2301      	movs	r3, #1
 80073d8:	464a      	mov	r2, r9
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f ae3e 	beq.w	8007062 <_printf_float+0xba>
 80073e6:	f108 0801 	add.w	r8, r8, #1
 80073ea:	68e3      	ldr	r3, [r4, #12]
 80073ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073ee:	1a9b      	subs	r3, r3, r2
 80073f0:	4543      	cmp	r3, r8
 80073f2:	dcf0      	bgt.n	80073d6 <_printf_float+0x42e>
 80073f4:	e6fc      	b.n	80071f0 <_printf_float+0x248>
 80073f6:	f04f 0800 	mov.w	r8, #0
 80073fa:	f104 0919 	add.w	r9, r4, #25
 80073fe:	e7f4      	b.n	80073ea <_printf_float+0x442>
 8007400:	2900      	cmp	r1, #0
 8007402:	f43f ae8b 	beq.w	800711c <_printf_float+0x174>
 8007406:	2300      	movs	r3, #0
 8007408:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800740c:	ab09      	add	r3, sp, #36	; 0x24
 800740e:	9300      	str	r3, [sp, #0]
 8007410:	ec49 8b10 	vmov	d0, r8, r9
 8007414:	6022      	str	r2, [r4, #0]
 8007416:	f8cd a004 	str.w	sl, [sp, #4]
 800741a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800741e:	4628      	mov	r0, r5
 8007420:	f7ff fd2e 	bl	8006e80 <__cvt>
 8007424:	4680      	mov	r8, r0
 8007426:	e648      	b.n	80070ba <_printf_float+0x112>

08007428 <_printf_common>:
 8007428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800742c:	4691      	mov	r9, r2
 800742e:	461f      	mov	r7, r3
 8007430:	688a      	ldr	r2, [r1, #8]
 8007432:	690b      	ldr	r3, [r1, #16]
 8007434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007438:	4293      	cmp	r3, r2
 800743a:	bfb8      	it	lt
 800743c:	4613      	movlt	r3, r2
 800743e:	f8c9 3000 	str.w	r3, [r9]
 8007442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007446:	4606      	mov	r6, r0
 8007448:	460c      	mov	r4, r1
 800744a:	b112      	cbz	r2, 8007452 <_printf_common+0x2a>
 800744c:	3301      	adds	r3, #1
 800744e:	f8c9 3000 	str.w	r3, [r9]
 8007452:	6823      	ldr	r3, [r4, #0]
 8007454:	0699      	lsls	r1, r3, #26
 8007456:	bf42      	ittt	mi
 8007458:	f8d9 3000 	ldrmi.w	r3, [r9]
 800745c:	3302      	addmi	r3, #2
 800745e:	f8c9 3000 	strmi.w	r3, [r9]
 8007462:	6825      	ldr	r5, [r4, #0]
 8007464:	f015 0506 	ands.w	r5, r5, #6
 8007468:	d107      	bne.n	800747a <_printf_common+0x52>
 800746a:	f104 0a19 	add.w	sl, r4, #25
 800746e:	68e3      	ldr	r3, [r4, #12]
 8007470:	f8d9 2000 	ldr.w	r2, [r9]
 8007474:	1a9b      	subs	r3, r3, r2
 8007476:	42ab      	cmp	r3, r5
 8007478:	dc28      	bgt.n	80074cc <_printf_common+0xa4>
 800747a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800747e:	6822      	ldr	r2, [r4, #0]
 8007480:	3300      	adds	r3, #0
 8007482:	bf18      	it	ne
 8007484:	2301      	movne	r3, #1
 8007486:	0692      	lsls	r2, r2, #26
 8007488:	d42d      	bmi.n	80074e6 <_printf_common+0xbe>
 800748a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800748e:	4639      	mov	r1, r7
 8007490:	4630      	mov	r0, r6
 8007492:	47c0      	blx	r8
 8007494:	3001      	adds	r0, #1
 8007496:	d020      	beq.n	80074da <_printf_common+0xb2>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	68e5      	ldr	r5, [r4, #12]
 800749c:	f8d9 2000 	ldr.w	r2, [r9]
 80074a0:	f003 0306 	and.w	r3, r3, #6
 80074a4:	2b04      	cmp	r3, #4
 80074a6:	bf08      	it	eq
 80074a8:	1aad      	subeq	r5, r5, r2
 80074aa:	68a3      	ldr	r3, [r4, #8]
 80074ac:	6922      	ldr	r2, [r4, #16]
 80074ae:	bf0c      	ite	eq
 80074b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074b4:	2500      	movne	r5, #0
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bfc4      	itt	gt
 80074ba:	1a9b      	subgt	r3, r3, r2
 80074bc:	18ed      	addgt	r5, r5, r3
 80074be:	f04f 0900 	mov.w	r9, #0
 80074c2:	341a      	adds	r4, #26
 80074c4:	454d      	cmp	r5, r9
 80074c6:	d11a      	bne.n	80074fe <_printf_common+0xd6>
 80074c8:	2000      	movs	r0, #0
 80074ca:	e008      	b.n	80074de <_printf_common+0xb6>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4652      	mov	r2, sl
 80074d0:	4639      	mov	r1, r7
 80074d2:	4630      	mov	r0, r6
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d103      	bne.n	80074e2 <_printf_common+0xba>
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	3501      	adds	r5, #1
 80074e4:	e7c3      	b.n	800746e <_printf_common+0x46>
 80074e6:	18e1      	adds	r1, r4, r3
 80074e8:	1c5a      	adds	r2, r3, #1
 80074ea:	2030      	movs	r0, #48	; 0x30
 80074ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074f0:	4422      	add	r2, r4
 80074f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074fa:	3302      	adds	r3, #2
 80074fc:	e7c5      	b.n	800748a <_printf_common+0x62>
 80074fe:	2301      	movs	r3, #1
 8007500:	4622      	mov	r2, r4
 8007502:	4639      	mov	r1, r7
 8007504:	4630      	mov	r0, r6
 8007506:	47c0      	blx	r8
 8007508:	3001      	adds	r0, #1
 800750a:	d0e6      	beq.n	80074da <_printf_common+0xb2>
 800750c:	f109 0901 	add.w	r9, r9, #1
 8007510:	e7d8      	b.n	80074c4 <_printf_common+0x9c>
	...

08007514 <_printf_i>:
 8007514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007518:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800751c:	460c      	mov	r4, r1
 800751e:	7e09      	ldrb	r1, [r1, #24]
 8007520:	b085      	sub	sp, #20
 8007522:	296e      	cmp	r1, #110	; 0x6e
 8007524:	4617      	mov	r7, r2
 8007526:	4606      	mov	r6, r0
 8007528:	4698      	mov	r8, r3
 800752a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800752c:	f000 80b3 	beq.w	8007696 <_printf_i+0x182>
 8007530:	d822      	bhi.n	8007578 <_printf_i+0x64>
 8007532:	2963      	cmp	r1, #99	; 0x63
 8007534:	d036      	beq.n	80075a4 <_printf_i+0x90>
 8007536:	d80a      	bhi.n	800754e <_printf_i+0x3a>
 8007538:	2900      	cmp	r1, #0
 800753a:	f000 80b9 	beq.w	80076b0 <_printf_i+0x19c>
 800753e:	2958      	cmp	r1, #88	; 0x58
 8007540:	f000 8083 	beq.w	800764a <_printf_i+0x136>
 8007544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007548:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800754c:	e032      	b.n	80075b4 <_printf_i+0xa0>
 800754e:	2964      	cmp	r1, #100	; 0x64
 8007550:	d001      	beq.n	8007556 <_printf_i+0x42>
 8007552:	2969      	cmp	r1, #105	; 0x69
 8007554:	d1f6      	bne.n	8007544 <_printf_i+0x30>
 8007556:	6820      	ldr	r0, [r4, #0]
 8007558:	6813      	ldr	r3, [r2, #0]
 800755a:	0605      	lsls	r5, r0, #24
 800755c:	f103 0104 	add.w	r1, r3, #4
 8007560:	d52a      	bpl.n	80075b8 <_printf_i+0xa4>
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6011      	str	r1, [r2, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	da03      	bge.n	8007572 <_printf_i+0x5e>
 800756a:	222d      	movs	r2, #45	; 0x2d
 800756c:	425b      	negs	r3, r3
 800756e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007572:	486f      	ldr	r0, [pc, #444]	; (8007730 <_printf_i+0x21c>)
 8007574:	220a      	movs	r2, #10
 8007576:	e039      	b.n	80075ec <_printf_i+0xd8>
 8007578:	2973      	cmp	r1, #115	; 0x73
 800757a:	f000 809d 	beq.w	80076b8 <_printf_i+0x1a4>
 800757e:	d808      	bhi.n	8007592 <_printf_i+0x7e>
 8007580:	296f      	cmp	r1, #111	; 0x6f
 8007582:	d020      	beq.n	80075c6 <_printf_i+0xb2>
 8007584:	2970      	cmp	r1, #112	; 0x70
 8007586:	d1dd      	bne.n	8007544 <_printf_i+0x30>
 8007588:	6823      	ldr	r3, [r4, #0]
 800758a:	f043 0320 	orr.w	r3, r3, #32
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	e003      	b.n	800759a <_printf_i+0x86>
 8007592:	2975      	cmp	r1, #117	; 0x75
 8007594:	d017      	beq.n	80075c6 <_printf_i+0xb2>
 8007596:	2978      	cmp	r1, #120	; 0x78
 8007598:	d1d4      	bne.n	8007544 <_printf_i+0x30>
 800759a:	2378      	movs	r3, #120	; 0x78
 800759c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075a0:	4864      	ldr	r0, [pc, #400]	; (8007734 <_printf_i+0x220>)
 80075a2:	e055      	b.n	8007650 <_printf_i+0x13c>
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	1d19      	adds	r1, r3, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6011      	str	r1, [r2, #0]
 80075ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075b4:	2301      	movs	r3, #1
 80075b6:	e08c      	b.n	80076d2 <_printf_i+0x1be>
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6011      	str	r1, [r2, #0]
 80075bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075c0:	bf18      	it	ne
 80075c2:	b21b      	sxthne	r3, r3
 80075c4:	e7cf      	b.n	8007566 <_printf_i+0x52>
 80075c6:	6813      	ldr	r3, [r2, #0]
 80075c8:	6825      	ldr	r5, [r4, #0]
 80075ca:	1d18      	adds	r0, r3, #4
 80075cc:	6010      	str	r0, [r2, #0]
 80075ce:	0628      	lsls	r0, r5, #24
 80075d0:	d501      	bpl.n	80075d6 <_printf_i+0xc2>
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	e002      	b.n	80075dc <_printf_i+0xc8>
 80075d6:	0668      	lsls	r0, r5, #25
 80075d8:	d5fb      	bpl.n	80075d2 <_printf_i+0xbe>
 80075da:	881b      	ldrh	r3, [r3, #0]
 80075dc:	4854      	ldr	r0, [pc, #336]	; (8007730 <_printf_i+0x21c>)
 80075de:	296f      	cmp	r1, #111	; 0x6f
 80075e0:	bf14      	ite	ne
 80075e2:	220a      	movne	r2, #10
 80075e4:	2208      	moveq	r2, #8
 80075e6:	2100      	movs	r1, #0
 80075e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ec:	6865      	ldr	r5, [r4, #4]
 80075ee:	60a5      	str	r5, [r4, #8]
 80075f0:	2d00      	cmp	r5, #0
 80075f2:	f2c0 8095 	blt.w	8007720 <_printf_i+0x20c>
 80075f6:	6821      	ldr	r1, [r4, #0]
 80075f8:	f021 0104 	bic.w	r1, r1, #4
 80075fc:	6021      	str	r1, [r4, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d13d      	bne.n	800767e <_printf_i+0x16a>
 8007602:	2d00      	cmp	r5, #0
 8007604:	f040 808e 	bne.w	8007724 <_printf_i+0x210>
 8007608:	4665      	mov	r5, ip
 800760a:	2a08      	cmp	r2, #8
 800760c:	d10b      	bne.n	8007626 <_printf_i+0x112>
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	07db      	lsls	r3, r3, #31
 8007612:	d508      	bpl.n	8007626 <_printf_i+0x112>
 8007614:	6923      	ldr	r3, [r4, #16]
 8007616:	6862      	ldr	r2, [r4, #4]
 8007618:	429a      	cmp	r2, r3
 800761a:	bfde      	ittt	le
 800761c:	2330      	movle	r3, #48	; 0x30
 800761e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007622:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007626:	ebac 0305 	sub.w	r3, ip, r5
 800762a:	6123      	str	r3, [r4, #16]
 800762c:	f8cd 8000 	str.w	r8, [sp]
 8007630:	463b      	mov	r3, r7
 8007632:	aa03      	add	r2, sp, #12
 8007634:	4621      	mov	r1, r4
 8007636:	4630      	mov	r0, r6
 8007638:	f7ff fef6 	bl	8007428 <_printf_common>
 800763c:	3001      	adds	r0, #1
 800763e:	d14d      	bne.n	80076dc <_printf_i+0x1c8>
 8007640:	f04f 30ff 	mov.w	r0, #4294967295
 8007644:	b005      	add	sp, #20
 8007646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800764a:	4839      	ldr	r0, [pc, #228]	; (8007730 <_printf_i+0x21c>)
 800764c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007650:	6813      	ldr	r3, [r2, #0]
 8007652:	6821      	ldr	r1, [r4, #0]
 8007654:	1d1d      	adds	r5, r3, #4
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6015      	str	r5, [r2, #0]
 800765a:	060a      	lsls	r2, r1, #24
 800765c:	d50b      	bpl.n	8007676 <_printf_i+0x162>
 800765e:	07ca      	lsls	r2, r1, #31
 8007660:	bf44      	itt	mi
 8007662:	f041 0120 	orrmi.w	r1, r1, #32
 8007666:	6021      	strmi	r1, [r4, #0]
 8007668:	b91b      	cbnz	r3, 8007672 <_printf_i+0x15e>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	f022 0220 	bic.w	r2, r2, #32
 8007670:	6022      	str	r2, [r4, #0]
 8007672:	2210      	movs	r2, #16
 8007674:	e7b7      	b.n	80075e6 <_printf_i+0xd2>
 8007676:	064d      	lsls	r5, r1, #25
 8007678:	bf48      	it	mi
 800767a:	b29b      	uxthmi	r3, r3
 800767c:	e7ef      	b.n	800765e <_printf_i+0x14a>
 800767e:	4665      	mov	r5, ip
 8007680:	fbb3 f1f2 	udiv	r1, r3, r2
 8007684:	fb02 3311 	mls	r3, r2, r1, r3
 8007688:	5cc3      	ldrb	r3, [r0, r3]
 800768a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800768e:	460b      	mov	r3, r1
 8007690:	2900      	cmp	r1, #0
 8007692:	d1f5      	bne.n	8007680 <_printf_i+0x16c>
 8007694:	e7b9      	b.n	800760a <_printf_i+0xf6>
 8007696:	6813      	ldr	r3, [r2, #0]
 8007698:	6825      	ldr	r5, [r4, #0]
 800769a:	6961      	ldr	r1, [r4, #20]
 800769c:	1d18      	adds	r0, r3, #4
 800769e:	6010      	str	r0, [r2, #0]
 80076a0:	0628      	lsls	r0, r5, #24
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	d501      	bpl.n	80076aa <_printf_i+0x196>
 80076a6:	6019      	str	r1, [r3, #0]
 80076a8:	e002      	b.n	80076b0 <_printf_i+0x19c>
 80076aa:	066a      	lsls	r2, r5, #25
 80076ac:	d5fb      	bpl.n	80076a6 <_printf_i+0x192>
 80076ae:	8019      	strh	r1, [r3, #0]
 80076b0:	2300      	movs	r3, #0
 80076b2:	6123      	str	r3, [r4, #16]
 80076b4:	4665      	mov	r5, ip
 80076b6:	e7b9      	b.n	800762c <_printf_i+0x118>
 80076b8:	6813      	ldr	r3, [r2, #0]
 80076ba:	1d19      	adds	r1, r3, #4
 80076bc:	6011      	str	r1, [r2, #0]
 80076be:	681d      	ldr	r5, [r3, #0]
 80076c0:	6862      	ldr	r2, [r4, #4]
 80076c2:	2100      	movs	r1, #0
 80076c4:	4628      	mov	r0, r5
 80076c6:	f7f8 fd8b 	bl	80001e0 <memchr>
 80076ca:	b108      	cbz	r0, 80076d0 <_printf_i+0x1bc>
 80076cc:	1b40      	subs	r0, r0, r5
 80076ce:	6060      	str	r0, [r4, #4]
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	6123      	str	r3, [r4, #16]
 80076d4:	2300      	movs	r3, #0
 80076d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076da:	e7a7      	b.n	800762c <_printf_i+0x118>
 80076dc:	6923      	ldr	r3, [r4, #16]
 80076de:	462a      	mov	r2, r5
 80076e0:	4639      	mov	r1, r7
 80076e2:	4630      	mov	r0, r6
 80076e4:	47c0      	blx	r8
 80076e6:	3001      	adds	r0, #1
 80076e8:	d0aa      	beq.n	8007640 <_printf_i+0x12c>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	079b      	lsls	r3, r3, #30
 80076ee:	d413      	bmi.n	8007718 <_printf_i+0x204>
 80076f0:	68e0      	ldr	r0, [r4, #12]
 80076f2:	9b03      	ldr	r3, [sp, #12]
 80076f4:	4298      	cmp	r0, r3
 80076f6:	bfb8      	it	lt
 80076f8:	4618      	movlt	r0, r3
 80076fa:	e7a3      	b.n	8007644 <_printf_i+0x130>
 80076fc:	2301      	movs	r3, #1
 80076fe:	464a      	mov	r2, r9
 8007700:	4639      	mov	r1, r7
 8007702:	4630      	mov	r0, r6
 8007704:	47c0      	blx	r8
 8007706:	3001      	adds	r0, #1
 8007708:	d09a      	beq.n	8007640 <_printf_i+0x12c>
 800770a:	3501      	adds	r5, #1
 800770c:	68e3      	ldr	r3, [r4, #12]
 800770e:	9a03      	ldr	r2, [sp, #12]
 8007710:	1a9b      	subs	r3, r3, r2
 8007712:	42ab      	cmp	r3, r5
 8007714:	dcf2      	bgt.n	80076fc <_printf_i+0x1e8>
 8007716:	e7eb      	b.n	80076f0 <_printf_i+0x1dc>
 8007718:	2500      	movs	r5, #0
 800771a:	f104 0919 	add.w	r9, r4, #25
 800771e:	e7f5      	b.n	800770c <_printf_i+0x1f8>
 8007720:	2b00      	cmp	r3, #0
 8007722:	d1ac      	bne.n	800767e <_printf_i+0x16a>
 8007724:	7803      	ldrb	r3, [r0, #0]
 8007726:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800772a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800772e:	e76c      	b.n	800760a <_printf_i+0xf6>
 8007730:	0800aa16 	.word	0x0800aa16
 8007734:	0800aa27 	.word	0x0800aa27

08007738 <_scanf_float>:
 8007738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800773c:	469a      	mov	sl, r3
 800773e:	688b      	ldr	r3, [r1, #8]
 8007740:	4616      	mov	r6, r2
 8007742:	1e5a      	subs	r2, r3, #1
 8007744:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007748:	b087      	sub	sp, #28
 800774a:	bf83      	ittte	hi
 800774c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007750:	189b      	addhi	r3, r3, r2
 8007752:	9301      	strhi	r3, [sp, #4]
 8007754:	2300      	movls	r3, #0
 8007756:	bf86      	itte	hi
 8007758:	f240 135d 	movwhi	r3, #349	; 0x15d
 800775c:	608b      	strhi	r3, [r1, #8]
 800775e:	9301      	strls	r3, [sp, #4]
 8007760:	680b      	ldr	r3, [r1, #0]
 8007762:	4688      	mov	r8, r1
 8007764:	f04f 0b00 	mov.w	fp, #0
 8007768:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800776c:	f848 3b1c 	str.w	r3, [r8], #28
 8007770:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8007774:	4607      	mov	r7, r0
 8007776:	460c      	mov	r4, r1
 8007778:	4645      	mov	r5, r8
 800777a:	465a      	mov	r2, fp
 800777c:	46d9      	mov	r9, fp
 800777e:	f8cd b008 	str.w	fp, [sp, #8]
 8007782:	68a1      	ldr	r1, [r4, #8]
 8007784:	b181      	cbz	r1, 80077a8 <_scanf_float+0x70>
 8007786:	6833      	ldr	r3, [r6, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	2b49      	cmp	r3, #73	; 0x49
 800778c:	d071      	beq.n	8007872 <_scanf_float+0x13a>
 800778e:	d84d      	bhi.n	800782c <_scanf_float+0xf4>
 8007790:	2b39      	cmp	r3, #57	; 0x39
 8007792:	d840      	bhi.n	8007816 <_scanf_float+0xde>
 8007794:	2b31      	cmp	r3, #49	; 0x31
 8007796:	f080 8088 	bcs.w	80078aa <_scanf_float+0x172>
 800779a:	2b2d      	cmp	r3, #45	; 0x2d
 800779c:	f000 8090 	beq.w	80078c0 <_scanf_float+0x188>
 80077a0:	d815      	bhi.n	80077ce <_scanf_float+0x96>
 80077a2:	2b2b      	cmp	r3, #43	; 0x2b
 80077a4:	f000 808c 	beq.w	80078c0 <_scanf_float+0x188>
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	d003      	beq.n	80077b6 <_scanf_float+0x7e>
 80077ae:	6823      	ldr	r3, [r4, #0]
 80077b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077b4:	6023      	str	r3, [r4, #0]
 80077b6:	3a01      	subs	r2, #1
 80077b8:	2a01      	cmp	r2, #1
 80077ba:	f200 80ea 	bhi.w	8007992 <_scanf_float+0x25a>
 80077be:	4545      	cmp	r5, r8
 80077c0:	f200 80dc 	bhi.w	800797c <_scanf_float+0x244>
 80077c4:	2601      	movs	r6, #1
 80077c6:	4630      	mov	r0, r6
 80077c8:	b007      	add	sp, #28
 80077ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077ce:	2b2e      	cmp	r3, #46	; 0x2e
 80077d0:	f000 809f 	beq.w	8007912 <_scanf_float+0x1da>
 80077d4:	2b30      	cmp	r3, #48	; 0x30
 80077d6:	d1e7      	bne.n	80077a8 <_scanf_float+0x70>
 80077d8:	6820      	ldr	r0, [r4, #0]
 80077da:	f410 7f80 	tst.w	r0, #256	; 0x100
 80077de:	d064      	beq.n	80078aa <_scanf_float+0x172>
 80077e0:	9b01      	ldr	r3, [sp, #4]
 80077e2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80077e6:	6020      	str	r0, [r4, #0]
 80077e8:	f109 0901 	add.w	r9, r9, #1
 80077ec:	b11b      	cbz	r3, 80077f6 <_scanf_float+0xbe>
 80077ee:	3b01      	subs	r3, #1
 80077f0:	3101      	adds	r1, #1
 80077f2:	9301      	str	r3, [sp, #4]
 80077f4:	60a1      	str	r1, [r4, #8]
 80077f6:	68a3      	ldr	r3, [r4, #8]
 80077f8:	3b01      	subs	r3, #1
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	6923      	ldr	r3, [r4, #16]
 80077fe:	3301      	adds	r3, #1
 8007800:	6123      	str	r3, [r4, #16]
 8007802:	6873      	ldr	r3, [r6, #4]
 8007804:	3b01      	subs	r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	6073      	str	r3, [r6, #4]
 800780a:	f340 80ac 	ble.w	8007966 <_scanf_float+0x22e>
 800780e:	6833      	ldr	r3, [r6, #0]
 8007810:	3301      	adds	r3, #1
 8007812:	6033      	str	r3, [r6, #0]
 8007814:	e7b5      	b.n	8007782 <_scanf_float+0x4a>
 8007816:	2b45      	cmp	r3, #69	; 0x45
 8007818:	f000 8085 	beq.w	8007926 <_scanf_float+0x1ee>
 800781c:	2b46      	cmp	r3, #70	; 0x46
 800781e:	d06a      	beq.n	80078f6 <_scanf_float+0x1be>
 8007820:	2b41      	cmp	r3, #65	; 0x41
 8007822:	d1c1      	bne.n	80077a8 <_scanf_float+0x70>
 8007824:	2a01      	cmp	r2, #1
 8007826:	d1bf      	bne.n	80077a8 <_scanf_float+0x70>
 8007828:	2202      	movs	r2, #2
 800782a:	e046      	b.n	80078ba <_scanf_float+0x182>
 800782c:	2b65      	cmp	r3, #101	; 0x65
 800782e:	d07a      	beq.n	8007926 <_scanf_float+0x1ee>
 8007830:	d818      	bhi.n	8007864 <_scanf_float+0x12c>
 8007832:	2b54      	cmp	r3, #84	; 0x54
 8007834:	d066      	beq.n	8007904 <_scanf_float+0x1cc>
 8007836:	d811      	bhi.n	800785c <_scanf_float+0x124>
 8007838:	2b4e      	cmp	r3, #78	; 0x4e
 800783a:	d1b5      	bne.n	80077a8 <_scanf_float+0x70>
 800783c:	2a00      	cmp	r2, #0
 800783e:	d146      	bne.n	80078ce <_scanf_float+0x196>
 8007840:	f1b9 0f00 	cmp.w	r9, #0
 8007844:	d145      	bne.n	80078d2 <_scanf_float+0x19a>
 8007846:	6821      	ldr	r1, [r4, #0]
 8007848:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800784c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007850:	d13f      	bne.n	80078d2 <_scanf_float+0x19a>
 8007852:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007856:	6021      	str	r1, [r4, #0]
 8007858:	2201      	movs	r2, #1
 800785a:	e02e      	b.n	80078ba <_scanf_float+0x182>
 800785c:	2b59      	cmp	r3, #89	; 0x59
 800785e:	d01e      	beq.n	800789e <_scanf_float+0x166>
 8007860:	2b61      	cmp	r3, #97	; 0x61
 8007862:	e7de      	b.n	8007822 <_scanf_float+0xea>
 8007864:	2b6e      	cmp	r3, #110	; 0x6e
 8007866:	d0e9      	beq.n	800783c <_scanf_float+0x104>
 8007868:	d815      	bhi.n	8007896 <_scanf_float+0x15e>
 800786a:	2b66      	cmp	r3, #102	; 0x66
 800786c:	d043      	beq.n	80078f6 <_scanf_float+0x1be>
 800786e:	2b69      	cmp	r3, #105	; 0x69
 8007870:	d19a      	bne.n	80077a8 <_scanf_float+0x70>
 8007872:	f1bb 0f00 	cmp.w	fp, #0
 8007876:	d138      	bne.n	80078ea <_scanf_float+0x1b2>
 8007878:	f1b9 0f00 	cmp.w	r9, #0
 800787c:	d197      	bne.n	80077ae <_scanf_float+0x76>
 800787e:	6821      	ldr	r1, [r4, #0]
 8007880:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8007884:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007888:	d195      	bne.n	80077b6 <_scanf_float+0x7e>
 800788a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800788e:	6021      	str	r1, [r4, #0]
 8007890:	f04f 0b01 	mov.w	fp, #1
 8007894:	e011      	b.n	80078ba <_scanf_float+0x182>
 8007896:	2b74      	cmp	r3, #116	; 0x74
 8007898:	d034      	beq.n	8007904 <_scanf_float+0x1cc>
 800789a:	2b79      	cmp	r3, #121	; 0x79
 800789c:	d184      	bne.n	80077a8 <_scanf_float+0x70>
 800789e:	f1bb 0f07 	cmp.w	fp, #7
 80078a2:	d181      	bne.n	80077a8 <_scanf_float+0x70>
 80078a4:	f04f 0b08 	mov.w	fp, #8
 80078a8:	e007      	b.n	80078ba <_scanf_float+0x182>
 80078aa:	eb12 0f0b 	cmn.w	r2, fp
 80078ae:	f47f af7b 	bne.w	80077a8 <_scanf_float+0x70>
 80078b2:	6821      	ldr	r1, [r4, #0]
 80078b4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80078b8:	6021      	str	r1, [r4, #0]
 80078ba:	702b      	strb	r3, [r5, #0]
 80078bc:	3501      	adds	r5, #1
 80078be:	e79a      	b.n	80077f6 <_scanf_float+0xbe>
 80078c0:	6821      	ldr	r1, [r4, #0]
 80078c2:	0608      	lsls	r0, r1, #24
 80078c4:	f57f af70 	bpl.w	80077a8 <_scanf_float+0x70>
 80078c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80078cc:	e7f4      	b.n	80078b8 <_scanf_float+0x180>
 80078ce:	2a02      	cmp	r2, #2
 80078d0:	d047      	beq.n	8007962 <_scanf_float+0x22a>
 80078d2:	f1bb 0f01 	cmp.w	fp, #1
 80078d6:	d003      	beq.n	80078e0 <_scanf_float+0x1a8>
 80078d8:	f1bb 0f04 	cmp.w	fp, #4
 80078dc:	f47f af64 	bne.w	80077a8 <_scanf_float+0x70>
 80078e0:	f10b 0b01 	add.w	fp, fp, #1
 80078e4:	fa5f fb8b 	uxtb.w	fp, fp
 80078e8:	e7e7      	b.n	80078ba <_scanf_float+0x182>
 80078ea:	f1bb 0f03 	cmp.w	fp, #3
 80078ee:	d0f7      	beq.n	80078e0 <_scanf_float+0x1a8>
 80078f0:	f1bb 0f05 	cmp.w	fp, #5
 80078f4:	e7f2      	b.n	80078dc <_scanf_float+0x1a4>
 80078f6:	f1bb 0f02 	cmp.w	fp, #2
 80078fa:	f47f af55 	bne.w	80077a8 <_scanf_float+0x70>
 80078fe:	f04f 0b03 	mov.w	fp, #3
 8007902:	e7da      	b.n	80078ba <_scanf_float+0x182>
 8007904:	f1bb 0f06 	cmp.w	fp, #6
 8007908:	f47f af4e 	bne.w	80077a8 <_scanf_float+0x70>
 800790c:	f04f 0b07 	mov.w	fp, #7
 8007910:	e7d3      	b.n	80078ba <_scanf_float+0x182>
 8007912:	6821      	ldr	r1, [r4, #0]
 8007914:	0588      	lsls	r0, r1, #22
 8007916:	f57f af47 	bpl.w	80077a8 <_scanf_float+0x70>
 800791a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800791e:	6021      	str	r1, [r4, #0]
 8007920:	f8cd 9008 	str.w	r9, [sp, #8]
 8007924:	e7c9      	b.n	80078ba <_scanf_float+0x182>
 8007926:	6821      	ldr	r1, [r4, #0]
 8007928:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800792c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007930:	d006      	beq.n	8007940 <_scanf_float+0x208>
 8007932:	0548      	lsls	r0, r1, #21
 8007934:	f57f af38 	bpl.w	80077a8 <_scanf_float+0x70>
 8007938:	f1b9 0f00 	cmp.w	r9, #0
 800793c:	f43f af3b 	beq.w	80077b6 <_scanf_float+0x7e>
 8007940:	0588      	lsls	r0, r1, #22
 8007942:	bf58      	it	pl
 8007944:	9802      	ldrpl	r0, [sp, #8]
 8007946:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800794a:	bf58      	it	pl
 800794c:	eba9 0000 	subpl.w	r0, r9, r0
 8007950:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007954:	bf58      	it	pl
 8007956:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800795a:	6021      	str	r1, [r4, #0]
 800795c:	f04f 0900 	mov.w	r9, #0
 8007960:	e7ab      	b.n	80078ba <_scanf_float+0x182>
 8007962:	2203      	movs	r2, #3
 8007964:	e7a9      	b.n	80078ba <_scanf_float+0x182>
 8007966:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800796a:	9205      	str	r2, [sp, #20]
 800796c:	4631      	mov	r1, r6
 800796e:	4638      	mov	r0, r7
 8007970:	4798      	blx	r3
 8007972:	9a05      	ldr	r2, [sp, #20]
 8007974:	2800      	cmp	r0, #0
 8007976:	f43f af04 	beq.w	8007782 <_scanf_float+0x4a>
 800797a:	e715      	b.n	80077a8 <_scanf_float+0x70>
 800797c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007980:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007984:	4632      	mov	r2, r6
 8007986:	4638      	mov	r0, r7
 8007988:	4798      	blx	r3
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	3b01      	subs	r3, #1
 800798e:	6123      	str	r3, [r4, #16]
 8007990:	e715      	b.n	80077be <_scanf_float+0x86>
 8007992:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007996:	2b06      	cmp	r3, #6
 8007998:	d80a      	bhi.n	80079b0 <_scanf_float+0x278>
 800799a:	f1bb 0f02 	cmp.w	fp, #2
 800799e:	d968      	bls.n	8007a72 <_scanf_float+0x33a>
 80079a0:	f1ab 0b03 	sub.w	fp, fp, #3
 80079a4:	fa5f fb8b 	uxtb.w	fp, fp
 80079a8:	eba5 0b0b 	sub.w	fp, r5, fp
 80079ac:	455d      	cmp	r5, fp
 80079ae:	d14b      	bne.n	8007a48 <_scanf_float+0x310>
 80079b0:	6823      	ldr	r3, [r4, #0]
 80079b2:	05da      	lsls	r2, r3, #23
 80079b4:	d51f      	bpl.n	80079f6 <_scanf_float+0x2be>
 80079b6:	055b      	lsls	r3, r3, #21
 80079b8:	d468      	bmi.n	8007a8c <_scanf_float+0x354>
 80079ba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	2965      	cmp	r1, #101	; 0x65
 80079c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80079c6:	f105 3bff 	add.w	fp, r5, #4294967295
 80079ca:	6123      	str	r3, [r4, #16]
 80079cc:	d00d      	beq.n	80079ea <_scanf_float+0x2b2>
 80079ce:	2945      	cmp	r1, #69	; 0x45
 80079d0:	d00b      	beq.n	80079ea <_scanf_float+0x2b2>
 80079d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079d6:	4632      	mov	r2, r6
 80079d8:	4638      	mov	r0, r7
 80079da:	4798      	blx	r3
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80079e2:	3b01      	subs	r3, #1
 80079e4:	f1a5 0b02 	sub.w	fp, r5, #2
 80079e8:	6123      	str	r3, [r4, #16]
 80079ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80079ee:	4632      	mov	r2, r6
 80079f0:	4638      	mov	r0, r7
 80079f2:	4798      	blx	r3
 80079f4:	465d      	mov	r5, fp
 80079f6:	6826      	ldr	r6, [r4, #0]
 80079f8:	f016 0610 	ands.w	r6, r6, #16
 80079fc:	d17a      	bne.n	8007af4 <_scanf_float+0x3bc>
 80079fe:	702e      	strb	r6, [r5, #0]
 8007a00:	6823      	ldr	r3, [r4, #0]
 8007a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a0a:	d142      	bne.n	8007a92 <_scanf_float+0x35a>
 8007a0c:	9b02      	ldr	r3, [sp, #8]
 8007a0e:	eba9 0303 	sub.w	r3, r9, r3
 8007a12:	425a      	negs	r2, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d149      	bne.n	8007aac <_scanf_float+0x374>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4641      	mov	r1, r8
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f000 fea3 	bl	8008768 <_strtod_r>
 8007a22:	6825      	ldr	r5, [r4, #0]
 8007a24:	f8da 3000 	ldr.w	r3, [sl]
 8007a28:	f015 0f02 	tst.w	r5, #2
 8007a2c:	f103 0204 	add.w	r2, r3, #4
 8007a30:	ec59 8b10 	vmov	r8, r9, d0
 8007a34:	f8ca 2000 	str.w	r2, [sl]
 8007a38:	d043      	beq.n	8007ac2 <_scanf_float+0x38a>
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	e9c3 8900 	strd	r8, r9, [r3]
 8007a40:	68e3      	ldr	r3, [r4, #12]
 8007a42:	3301      	adds	r3, #1
 8007a44:	60e3      	str	r3, [r4, #12]
 8007a46:	e6be      	b.n	80077c6 <_scanf_float+0x8e>
 8007a48:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a4c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007a50:	4632      	mov	r2, r6
 8007a52:	4638      	mov	r0, r7
 8007a54:	4798      	blx	r3
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	6123      	str	r3, [r4, #16]
 8007a5c:	e7a6      	b.n	80079ac <_scanf_float+0x274>
 8007a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a62:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007a66:	4632      	mov	r2, r6
 8007a68:	4638      	mov	r0, r7
 8007a6a:	4798      	blx	r3
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	4545      	cmp	r5, r8
 8007a74:	d8f3      	bhi.n	8007a5e <_scanf_float+0x326>
 8007a76:	e6a5      	b.n	80077c4 <_scanf_float+0x8c>
 8007a78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007a7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007a80:	4632      	mov	r2, r6
 8007a82:	4638      	mov	r0, r7
 8007a84:	4798      	blx	r3
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	4545      	cmp	r5, r8
 8007a8e:	d8f3      	bhi.n	8007a78 <_scanf_float+0x340>
 8007a90:	e698      	b.n	80077c4 <_scanf_float+0x8c>
 8007a92:	9b03      	ldr	r3, [sp, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d0bf      	beq.n	8007a18 <_scanf_float+0x2e0>
 8007a98:	9904      	ldr	r1, [sp, #16]
 8007a9a:	230a      	movs	r3, #10
 8007a9c:	4632      	mov	r2, r6
 8007a9e:	3101      	adds	r1, #1
 8007aa0:	4638      	mov	r0, r7
 8007aa2:	f000 feed 	bl	8008880 <_strtol_r>
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	9d04      	ldr	r5, [sp, #16]
 8007aaa:	1ac2      	subs	r2, r0, r3
 8007aac:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ab0:	429d      	cmp	r5, r3
 8007ab2:	bf28      	it	cs
 8007ab4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8007ab8:	490f      	ldr	r1, [pc, #60]	; (8007af8 <_scanf_float+0x3c0>)
 8007aba:	4628      	mov	r0, r5
 8007abc:	f000 f824 	bl	8007b08 <siprintf>
 8007ac0:	e7aa      	b.n	8007a18 <_scanf_float+0x2e0>
 8007ac2:	f015 0504 	ands.w	r5, r5, #4
 8007ac6:	d1b8      	bne.n	8007a3a <_scanf_float+0x302>
 8007ac8:	681f      	ldr	r7, [r3, #0]
 8007aca:	ee10 2a10 	vmov	r2, s0
 8007ace:	464b      	mov	r3, r9
 8007ad0:	ee10 0a10 	vmov	r0, s0
 8007ad4:	4649      	mov	r1, r9
 8007ad6:	f7f9 f829 	bl	8000b2c <__aeabi_dcmpun>
 8007ada:	b128      	cbz	r0, 8007ae8 <_scanf_float+0x3b0>
 8007adc:	4628      	mov	r0, r5
 8007ade:	f000 f80d 	bl	8007afc <nanf>
 8007ae2:	ed87 0a00 	vstr	s0, [r7]
 8007ae6:	e7ab      	b.n	8007a40 <_scanf_float+0x308>
 8007ae8:	4640      	mov	r0, r8
 8007aea:	4649      	mov	r1, r9
 8007aec:	f7f9 f87c 	bl	8000be8 <__aeabi_d2f>
 8007af0:	6038      	str	r0, [r7, #0]
 8007af2:	e7a5      	b.n	8007a40 <_scanf_float+0x308>
 8007af4:	2600      	movs	r6, #0
 8007af6:	e666      	b.n	80077c6 <_scanf_float+0x8e>
 8007af8:	0800aa38 	.word	0x0800aa38

08007afc <nanf>:
 8007afc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007b04 <nanf+0x8>
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	7fc00000 	.word	0x7fc00000

08007b08 <siprintf>:
 8007b08:	b40e      	push	{r1, r2, r3}
 8007b0a:	b500      	push	{lr}
 8007b0c:	b09c      	sub	sp, #112	; 0x70
 8007b0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007b10:	9002      	str	r0, [sp, #8]
 8007b12:	9006      	str	r0, [sp, #24]
 8007b14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b18:	4809      	ldr	r0, [pc, #36]	; (8007b40 <siprintf+0x38>)
 8007b1a:	9107      	str	r1, [sp, #28]
 8007b1c:	9104      	str	r1, [sp, #16]
 8007b1e:	4909      	ldr	r1, [pc, #36]	; (8007b44 <siprintf+0x3c>)
 8007b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b24:	9105      	str	r1, [sp, #20]
 8007b26:	6800      	ldr	r0, [r0, #0]
 8007b28:	9301      	str	r3, [sp, #4]
 8007b2a:	a902      	add	r1, sp, #8
 8007b2c:	f002 fd6e 	bl	800a60c <_svfiprintf_r>
 8007b30:	9b02      	ldr	r3, [sp, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	701a      	strb	r2, [r3, #0]
 8007b36:	b01c      	add	sp, #112	; 0x70
 8007b38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b3c:	b003      	add	sp, #12
 8007b3e:	4770      	bx	lr
 8007b40:	2000000c 	.word	0x2000000c
 8007b44:	ffff0208 	.word	0xffff0208

08007b48 <sulp>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	460d      	mov	r5, r1
 8007b4e:	ec45 4b10 	vmov	d0, r4, r5
 8007b52:	4616      	mov	r6, r2
 8007b54:	f002 fb16 	bl	800a184 <__ulp>
 8007b58:	ec51 0b10 	vmov	r0, r1, d0
 8007b5c:	b17e      	cbz	r6, 8007b7e <sulp+0x36>
 8007b5e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007b62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	dd09      	ble.n	8007b7e <sulp+0x36>
 8007b6a:	051b      	lsls	r3, r3, #20
 8007b6c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007b70:	2400      	movs	r4, #0
 8007b72:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007b76:	4622      	mov	r2, r4
 8007b78:	462b      	mov	r3, r5
 8007b7a:	f7f8 fd3d 	bl	80005f8 <__aeabi_dmul>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}

08007b80 <_strtod_l>:
 8007b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b84:	461f      	mov	r7, r3
 8007b86:	b0a1      	sub	sp, #132	; 0x84
 8007b88:	2300      	movs	r3, #0
 8007b8a:	4681      	mov	r9, r0
 8007b8c:	4638      	mov	r0, r7
 8007b8e:	460e      	mov	r6, r1
 8007b90:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b92:	931c      	str	r3, [sp, #112]	; 0x70
 8007b94:	f001 fff5 	bl	8009b82 <__localeconv_l>
 8007b98:	4680      	mov	r8, r0
 8007b9a:	6800      	ldr	r0, [r0, #0]
 8007b9c:	f7f8 fb18 	bl	80001d0 <strlen>
 8007ba0:	f04f 0a00 	mov.w	sl, #0
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	f04f 0b00 	mov.w	fp, #0
 8007baa:	961b      	str	r6, [sp, #108]	; 0x6c
 8007bac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007bae:	781a      	ldrb	r2, [r3, #0]
 8007bb0:	2a0d      	cmp	r2, #13
 8007bb2:	d832      	bhi.n	8007c1a <_strtod_l+0x9a>
 8007bb4:	2a09      	cmp	r2, #9
 8007bb6:	d236      	bcs.n	8007c26 <_strtod_l+0xa6>
 8007bb8:	2a00      	cmp	r2, #0
 8007bba:	d03e      	beq.n	8007c3a <_strtod_l+0xba>
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	930d      	str	r3, [sp, #52]	; 0x34
 8007bc0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007bc2:	782b      	ldrb	r3, [r5, #0]
 8007bc4:	2b30      	cmp	r3, #48	; 0x30
 8007bc6:	f040 80ac 	bne.w	8007d22 <_strtod_l+0x1a2>
 8007bca:	786b      	ldrb	r3, [r5, #1]
 8007bcc:	2b58      	cmp	r3, #88	; 0x58
 8007bce:	d001      	beq.n	8007bd4 <_strtod_l+0x54>
 8007bd0:	2b78      	cmp	r3, #120	; 0x78
 8007bd2:	d167      	bne.n	8007ca4 <_strtod_l+0x124>
 8007bd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	ab1c      	add	r3, sp, #112	; 0x70
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	9702      	str	r7, [sp, #8]
 8007bde:	ab1d      	add	r3, sp, #116	; 0x74
 8007be0:	4a88      	ldr	r2, [pc, #544]	; (8007e04 <_strtod_l+0x284>)
 8007be2:	a91b      	add	r1, sp, #108	; 0x6c
 8007be4:	4648      	mov	r0, r9
 8007be6:	f001 fcf2 	bl	80095ce <__gethex>
 8007bea:	f010 0407 	ands.w	r4, r0, #7
 8007bee:	4606      	mov	r6, r0
 8007bf0:	d005      	beq.n	8007bfe <_strtod_l+0x7e>
 8007bf2:	2c06      	cmp	r4, #6
 8007bf4:	d12b      	bne.n	8007c4e <_strtod_l+0xce>
 8007bf6:	3501      	adds	r5, #1
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	951b      	str	r5, [sp, #108]	; 0x6c
 8007bfc:	930d      	str	r3, [sp, #52]	; 0x34
 8007bfe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f040 859a 	bne.w	800873a <_strtod_l+0xbba>
 8007c06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c08:	b1e3      	cbz	r3, 8007c44 <_strtod_l+0xc4>
 8007c0a:	4652      	mov	r2, sl
 8007c0c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007c10:	ec43 2b10 	vmov	d0, r2, r3
 8007c14:	b021      	add	sp, #132	; 0x84
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	2a2b      	cmp	r2, #43	; 0x2b
 8007c1c:	d015      	beq.n	8007c4a <_strtod_l+0xca>
 8007c1e:	2a2d      	cmp	r2, #45	; 0x2d
 8007c20:	d004      	beq.n	8007c2c <_strtod_l+0xac>
 8007c22:	2a20      	cmp	r2, #32
 8007c24:	d1ca      	bne.n	8007bbc <_strtod_l+0x3c>
 8007c26:	3301      	adds	r3, #1
 8007c28:	931b      	str	r3, [sp, #108]	; 0x6c
 8007c2a:	e7bf      	b.n	8007bac <_strtod_l+0x2c>
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	920d      	str	r2, [sp, #52]	; 0x34
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	921b      	str	r2, [sp, #108]	; 0x6c
 8007c34:	785b      	ldrb	r3, [r3, #1]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1c2      	bne.n	8007bc0 <_strtod_l+0x40>
 8007c3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c3c:	961b      	str	r6, [sp, #108]	; 0x6c
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8579 	bne.w	8008736 <_strtod_l+0xbb6>
 8007c44:	4652      	mov	r2, sl
 8007c46:	465b      	mov	r3, fp
 8007c48:	e7e2      	b.n	8007c10 <_strtod_l+0x90>
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	e7ef      	b.n	8007c2e <_strtod_l+0xae>
 8007c4e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007c50:	b13a      	cbz	r2, 8007c62 <_strtod_l+0xe2>
 8007c52:	2135      	movs	r1, #53	; 0x35
 8007c54:	a81e      	add	r0, sp, #120	; 0x78
 8007c56:	f002 fb8d 	bl	800a374 <__copybits>
 8007c5a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007c5c:	4648      	mov	r0, r9
 8007c5e:	f001 fffa 	bl	8009c56 <_Bfree>
 8007c62:	3c01      	subs	r4, #1
 8007c64:	2c04      	cmp	r4, #4
 8007c66:	d806      	bhi.n	8007c76 <_strtod_l+0xf6>
 8007c68:	e8df f004 	tbb	[pc, r4]
 8007c6c:	1714030a 	.word	0x1714030a
 8007c70:	0a          	.byte	0x0a
 8007c71:	00          	.byte	0x00
 8007c72:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8007c76:	0730      	lsls	r0, r6, #28
 8007c78:	d5c1      	bpl.n	8007bfe <_strtod_l+0x7e>
 8007c7a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007c7e:	e7be      	b.n	8007bfe <_strtod_l+0x7e>
 8007c80:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8007c84:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8007c86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007c8a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007c8e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007c92:	e7f0      	b.n	8007c76 <_strtod_l+0xf6>
 8007c94:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007e08 <_strtod_l+0x288>
 8007c98:	e7ed      	b.n	8007c76 <_strtod_l+0xf6>
 8007c9a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007c9e:	f04f 3aff 	mov.w	sl, #4294967295
 8007ca2:	e7e8      	b.n	8007c76 <_strtod_l+0xf6>
 8007ca4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ca6:	1c5a      	adds	r2, r3, #1
 8007ca8:	921b      	str	r2, [sp, #108]	; 0x6c
 8007caa:	785b      	ldrb	r3, [r3, #1]
 8007cac:	2b30      	cmp	r3, #48	; 0x30
 8007cae:	d0f9      	beq.n	8007ca4 <_strtod_l+0x124>
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0a4      	beq.n	8007bfe <_strtod_l+0x7e>
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	2500      	movs	r5, #0
 8007cb8:	9306      	str	r3, [sp, #24]
 8007cba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007cbc:	9308      	str	r3, [sp, #32]
 8007cbe:	9507      	str	r5, [sp, #28]
 8007cc0:	9505      	str	r5, [sp, #20]
 8007cc2:	220a      	movs	r2, #10
 8007cc4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007cc6:	7807      	ldrb	r7, [r0, #0]
 8007cc8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8007ccc:	b2d9      	uxtb	r1, r3
 8007cce:	2909      	cmp	r1, #9
 8007cd0:	d929      	bls.n	8007d26 <_strtod_l+0x1a6>
 8007cd2:	4622      	mov	r2, r4
 8007cd4:	f8d8 1000 	ldr.w	r1, [r8]
 8007cd8:	f002 fda0 	bl	800a81c <strncmp>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d031      	beq.n	8007d44 <_strtod_l+0x1c4>
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	9c05      	ldr	r4, [sp, #20]
 8007ce4:	9004      	str	r0, [sp, #16]
 8007ce6:	463b      	mov	r3, r7
 8007ce8:	4602      	mov	r2, r0
 8007cea:	2b65      	cmp	r3, #101	; 0x65
 8007cec:	d001      	beq.n	8007cf2 <_strtod_l+0x172>
 8007cee:	2b45      	cmp	r3, #69	; 0x45
 8007cf0:	d114      	bne.n	8007d1c <_strtod_l+0x19c>
 8007cf2:	b924      	cbnz	r4, 8007cfe <_strtod_l+0x17e>
 8007cf4:	b910      	cbnz	r0, 8007cfc <_strtod_l+0x17c>
 8007cf6:	9b06      	ldr	r3, [sp, #24]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d09e      	beq.n	8007c3a <_strtod_l+0xba>
 8007cfc:	2400      	movs	r4, #0
 8007cfe:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007d00:	1c73      	adds	r3, r6, #1
 8007d02:	931b      	str	r3, [sp, #108]	; 0x6c
 8007d04:	7873      	ldrb	r3, [r6, #1]
 8007d06:	2b2b      	cmp	r3, #43	; 0x2b
 8007d08:	d078      	beq.n	8007dfc <_strtod_l+0x27c>
 8007d0a:	2b2d      	cmp	r3, #45	; 0x2d
 8007d0c:	d070      	beq.n	8007df0 <_strtod_l+0x270>
 8007d0e:	f04f 0c00 	mov.w	ip, #0
 8007d12:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007d16:	2f09      	cmp	r7, #9
 8007d18:	d97c      	bls.n	8007e14 <_strtod_l+0x294>
 8007d1a:	961b      	str	r6, [sp, #108]	; 0x6c
 8007d1c:	f04f 0e00 	mov.w	lr, #0
 8007d20:	e09a      	b.n	8007e58 <_strtod_l+0x2d8>
 8007d22:	2300      	movs	r3, #0
 8007d24:	e7c7      	b.n	8007cb6 <_strtod_l+0x136>
 8007d26:	9905      	ldr	r1, [sp, #20]
 8007d28:	2908      	cmp	r1, #8
 8007d2a:	bfdd      	ittte	le
 8007d2c:	9907      	ldrle	r1, [sp, #28]
 8007d2e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007d32:	9307      	strle	r3, [sp, #28]
 8007d34:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007d38:	9b05      	ldr	r3, [sp, #20]
 8007d3a:	3001      	adds	r0, #1
 8007d3c:	3301      	adds	r3, #1
 8007d3e:	9305      	str	r3, [sp, #20]
 8007d40:	901b      	str	r0, [sp, #108]	; 0x6c
 8007d42:	e7bf      	b.n	8007cc4 <_strtod_l+0x144>
 8007d44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d46:	191a      	adds	r2, r3, r4
 8007d48:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d4a:	9a05      	ldr	r2, [sp, #20]
 8007d4c:	5d1b      	ldrb	r3, [r3, r4]
 8007d4e:	2a00      	cmp	r2, #0
 8007d50:	d037      	beq.n	8007dc2 <_strtod_l+0x242>
 8007d52:	9c05      	ldr	r4, [sp, #20]
 8007d54:	4602      	mov	r2, r0
 8007d56:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8007d5a:	2909      	cmp	r1, #9
 8007d5c:	d913      	bls.n	8007d86 <_strtod_l+0x206>
 8007d5e:	2101      	movs	r1, #1
 8007d60:	9104      	str	r1, [sp, #16]
 8007d62:	e7c2      	b.n	8007cea <_strtod_l+0x16a>
 8007d64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	921b      	str	r2, [sp, #108]	; 0x6c
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	3001      	adds	r0, #1
 8007d6e:	2b30      	cmp	r3, #48	; 0x30
 8007d70:	d0f8      	beq.n	8007d64 <_strtod_l+0x1e4>
 8007d72:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8007d76:	2a08      	cmp	r2, #8
 8007d78:	f200 84e4 	bhi.w	8008744 <_strtod_l+0xbc4>
 8007d7c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007d7e:	9208      	str	r2, [sp, #32]
 8007d80:	4602      	mov	r2, r0
 8007d82:	2000      	movs	r0, #0
 8007d84:	4604      	mov	r4, r0
 8007d86:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8007d8a:	f100 0101 	add.w	r1, r0, #1
 8007d8e:	d012      	beq.n	8007db6 <_strtod_l+0x236>
 8007d90:	440a      	add	r2, r1
 8007d92:	eb00 0c04 	add.w	ip, r0, r4
 8007d96:	4621      	mov	r1, r4
 8007d98:	270a      	movs	r7, #10
 8007d9a:	458c      	cmp	ip, r1
 8007d9c:	d113      	bne.n	8007dc6 <_strtod_l+0x246>
 8007d9e:	1821      	adds	r1, r4, r0
 8007da0:	2908      	cmp	r1, #8
 8007da2:	f104 0401 	add.w	r4, r4, #1
 8007da6:	4404      	add	r4, r0
 8007da8:	dc19      	bgt.n	8007dde <_strtod_l+0x25e>
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	210a      	movs	r1, #10
 8007dae:	fb01 e303 	mla	r3, r1, r3, lr
 8007db2:	9307      	str	r3, [sp, #28]
 8007db4:	2100      	movs	r1, #0
 8007db6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db8:	1c58      	adds	r0, r3, #1
 8007dba:	901b      	str	r0, [sp, #108]	; 0x6c
 8007dbc:	785b      	ldrb	r3, [r3, #1]
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	e7c9      	b.n	8007d56 <_strtod_l+0x1d6>
 8007dc2:	9805      	ldr	r0, [sp, #20]
 8007dc4:	e7d3      	b.n	8007d6e <_strtod_l+0x1ee>
 8007dc6:	2908      	cmp	r1, #8
 8007dc8:	f101 0101 	add.w	r1, r1, #1
 8007dcc:	dc03      	bgt.n	8007dd6 <_strtod_l+0x256>
 8007dce:	9b07      	ldr	r3, [sp, #28]
 8007dd0:	437b      	muls	r3, r7
 8007dd2:	9307      	str	r3, [sp, #28]
 8007dd4:	e7e1      	b.n	8007d9a <_strtod_l+0x21a>
 8007dd6:	2910      	cmp	r1, #16
 8007dd8:	bfd8      	it	le
 8007dda:	437d      	mulle	r5, r7
 8007ddc:	e7dd      	b.n	8007d9a <_strtod_l+0x21a>
 8007dde:	2c10      	cmp	r4, #16
 8007de0:	bfdc      	itt	le
 8007de2:	210a      	movle	r1, #10
 8007de4:	fb01 e505 	mlale	r5, r1, r5, lr
 8007de8:	e7e4      	b.n	8007db4 <_strtod_l+0x234>
 8007dea:	2301      	movs	r3, #1
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	e781      	b.n	8007cf4 <_strtod_l+0x174>
 8007df0:	f04f 0c01 	mov.w	ip, #1
 8007df4:	1cb3      	adds	r3, r6, #2
 8007df6:	931b      	str	r3, [sp, #108]	; 0x6c
 8007df8:	78b3      	ldrb	r3, [r6, #2]
 8007dfa:	e78a      	b.n	8007d12 <_strtod_l+0x192>
 8007dfc:	f04f 0c00 	mov.w	ip, #0
 8007e00:	e7f8      	b.n	8007df4 <_strtod_l+0x274>
 8007e02:	bf00      	nop
 8007e04:	0800aa40 	.word	0x0800aa40
 8007e08:	7ff00000 	.word	0x7ff00000
 8007e0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e0e:	1c5f      	adds	r7, r3, #1
 8007e10:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b30      	cmp	r3, #48	; 0x30
 8007e16:	d0f9      	beq.n	8007e0c <_strtod_l+0x28c>
 8007e18:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8007e1c:	2f08      	cmp	r7, #8
 8007e1e:	f63f af7d 	bhi.w	8007d1c <_strtod_l+0x19c>
 8007e22:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007e26:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e28:	930a      	str	r3, [sp, #40]	; 0x28
 8007e2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e2c:	1c5f      	adds	r7, r3, #1
 8007e2e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007e30:	785b      	ldrb	r3, [r3, #1]
 8007e32:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007e36:	f1b8 0f09 	cmp.w	r8, #9
 8007e3a:	d937      	bls.n	8007eac <_strtod_l+0x32c>
 8007e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007e3e:	1a7f      	subs	r7, r7, r1
 8007e40:	2f08      	cmp	r7, #8
 8007e42:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007e46:	dc37      	bgt.n	8007eb8 <_strtod_l+0x338>
 8007e48:	45be      	cmp	lr, r7
 8007e4a:	bfa8      	it	ge
 8007e4c:	46be      	movge	lr, r7
 8007e4e:	f1bc 0f00 	cmp.w	ip, #0
 8007e52:	d001      	beq.n	8007e58 <_strtod_l+0x2d8>
 8007e54:	f1ce 0e00 	rsb	lr, lr, #0
 8007e58:	2c00      	cmp	r4, #0
 8007e5a:	d151      	bne.n	8007f00 <_strtod_l+0x380>
 8007e5c:	2800      	cmp	r0, #0
 8007e5e:	f47f aece 	bne.w	8007bfe <_strtod_l+0x7e>
 8007e62:	9a06      	ldr	r2, [sp, #24]
 8007e64:	2a00      	cmp	r2, #0
 8007e66:	f47f aeca 	bne.w	8007bfe <_strtod_l+0x7e>
 8007e6a:	9a04      	ldr	r2, [sp, #16]
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	f47f aee4 	bne.w	8007c3a <_strtod_l+0xba>
 8007e72:	2b4e      	cmp	r3, #78	; 0x4e
 8007e74:	d027      	beq.n	8007ec6 <_strtod_l+0x346>
 8007e76:	dc21      	bgt.n	8007ebc <_strtod_l+0x33c>
 8007e78:	2b49      	cmp	r3, #73	; 0x49
 8007e7a:	f47f aede 	bne.w	8007c3a <_strtod_l+0xba>
 8007e7e:	49a0      	ldr	r1, [pc, #640]	; (8008100 <_strtod_l+0x580>)
 8007e80:	a81b      	add	r0, sp, #108	; 0x6c
 8007e82:	f001 fdd7 	bl	8009a34 <__match>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	f43f aed7 	beq.w	8007c3a <_strtod_l+0xba>
 8007e8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e8e:	499d      	ldr	r1, [pc, #628]	; (8008104 <_strtod_l+0x584>)
 8007e90:	3b01      	subs	r3, #1
 8007e92:	a81b      	add	r0, sp, #108	; 0x6c
 8007e94:	931b      	str	r3, [sp, #108]	; 0x6c
 8007e96:	f001 fdcd 	bl	8009a34 <__match>
 8007e9a:	b910      	cbnz	r0, 8007ea2 <_strtod_l+0x322>
 8007e9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007ea2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8008118 <_strtod_l+0x598>
 8007ea6:	f04f 0a00 	mov.w	sl, #0
 8007eaa:	e6a8      	b.n	8007bfe <_strtod_l+0x7e>
 8007eac:	210a      	movs	r1, #10
 8007eae:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007eb2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007eb6:	e7b8      	b.n	8007e2a <_strtod_l+0x2aa>
 8007eb8:	46be      	mov	lr, r7
 8007eba:	e7c8      	b.n	8007e4e <_strtod_l+0x2ce>
 8007ebc:	2b69      	cmp	r3, #105	; 0x69
 8007ebe:	d0de      	beq.n	8007e7e <_strtod_l+0x2fe>
 8007ec0:	2b6e      	cmp	r3, #110	; 0x6e
 8007ec2:	f47f aeba 	bne.w	8007c3a <_strtod_l+0xba>
 8007ec6:	4990      	ldr	r1, [pc, #576]	; (8008108 <_strtod_l+0x588>)
 8007ec8:	a81b      	add	r0, sp, #108	; 0x6c
 8007eca:	f001 fdb3 	bl	8009a34 <__match>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	f43f aeb3 	beq.w	8007c3a <_strtod_l+0xba>
 8007ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	2b28      	cmp	r3, #40	; 0x28
 8007eda:	d10e      	bne.n	8007efa <_strtod_l+0x37a>
 8007edc:	aa1e      	add	r2, sp, #120	; 0x78
 8007ede:	498b      	ldr	r1, [pc, #556]	; (800810c <_strtod_l+0x58c>)
 8007ee0:	a81b      	add	r0, sp, #108	; 0x6c
 8007ee2:	f001 fdbb 	bl	8009a5c <__hexnan>
 8007ee6:	2805      	cmp	r0, #5
 8007ee8:	d107      	bne.n	8007efa <_strtod_l+0x37a>
 8007eea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007eec:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007ef0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007ef4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007ef8:	e681      	b.n	8007bfe <_strtod_l+0x7e>
 8007efa:	f8df b224 	ldr.w	fp, [pc, #548]	; 8008120 <_strtod_l+0x5a0>
 8007efe:	e7d2      	b.n	8007ea6 <_strtod_l+0x326>
 8007f00:	ebae 0302 	sub.w	r3, lr, r2
 8007f04:	9306      	str	r3, [sp, #24]
 8007f06:	9b05      	ldr	r3, [sp, #20]
 8007f08:	9807      	ldr	r0, [sp, #28]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	bf08      	it	eq
 8007f0e:	4623      	moveq	r3, r4
 8007f10:	2c10      	cmp	r4, #16
 8007f12:	9305      	str	r3, [sp, #20]
 8007f14:	46a0      	mov	r8, r4
 8007f16:	bfa8      	it	ge
 8007f18:	f04f 0810 	movge.w	r8, #16
 8007f1c:	f7f8 faf2 	bl	8000504 <__aeabi_ui2d>
 8007f20:	2c09      	cmp	r4, #9
 8007f22:	4682      	mov	sl, r0
 8007f24:	468b      	mov	fp, r1
 8007f26:	dc13      	bgt.n	8007f50 <_strtod_l+0x3d0>
 8007f28:	9b06      	ldr	r3, [sp, #24]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f43f ae67 	beq.w	8007bfe <_strtod_l+0x7e>
 8007f30:	9b06      	ldr	r3, [sp, #24]
 8007f32:	dd7a      	ble.n	800802a <_strtod_l+0x4aa>
 8007f34:	2b16      	cmp	r3, #22
 8007f36:	dc61      	bgt.n	8007ffc <_strtod_l+0x47c>
 8007f38:	4a75      	ldr	r2, [pc, #468]	; (8008110 <_strtod_l+0x590>)
 8007f3a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007f3e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f7f8 fb57 	bl	80005f8 <__aeabi_dmul>
 8007f4a:	4682      	mov	sl, r0
 8007f4c:	468b      	mov	fp, r1
 8007f4e:	e656      	b.n	8007bfe <_strtod_l+0x7e>
 8007f50:	4b6f      	ldr	r3, [pc, #444]	; (8008110 <_strtod_l+0x590>)
 8007f52:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007f56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007f5a:	f7f8 fb4d 	bl	80005f8 <__aeabi_dmul>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	4628      	mov	r0, r5
 8007f62:	460f      	mov	r7, r1
 8007f64:	f7f8 face 	bl	8000504 <__aeabi_ui2d>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	4639      	mov	r1, r7
 8007f70:	f7f8 f98c 	bl	800028c <__adddf3>
 8007f74:	2c0f      	cmp	r4, #15
 8007f76:	4682      	mov	sl, r0
 8007f78:	468b      	mov	fp, r1
 8007f7a:	ddd5      	ble.n	8007f28 <_strtod_l+0x3a8>
 8007f7c:	9b06      	ldr	r3, [sp, #24]
 8007f7e:	eba4 0808 	sub.w	r8, r4, r8
 8007f82:	4498      	add	r8, r3
 8007f84:	f1b8 0f00 	cmp.w	r8, #0
 8007f88:	f340 8096 	ble.w	80080b8 <_strtod_l+0x538>
 8007f8c:	f018 030f 	ands.w	r3, r8, #15
 8007f90:	d00a      	beq.n	8007fa8 <_strtod_l+0x428>
 8007f92:	495f      	ldr	r1, [pc, #380]	; (8008110 <_strtod_l+0x590>)
 8007f94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007f98:	4652      	mov	r2, sl
 8007f9a:	465b      	mov	r3, fp
 8007f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fa0:	f7f8 fb2a 	bl	80005f8 <__aeabi_dmul>
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	468b      	mov	fp, r1
 8007fa8:	f038 080f 	bics.w	r8, r8, #15
 8007fac:	d073      	beq.n	8008096 <_strtod_l+0x516>
 8007fae:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007fb2:	dd47      	ble.n	8008044 <_strtod_l+0x4c4>
 8007fb4:	2400      	movs	r4, #0
 8007fb6:	46a0      	mov	r8, r4
 8007fb8:	9407      	str	r4, [sp, #28]
 8007fba:	9405      	str	r4, [sp, #20]
 8007fbc:	2322      	movs	r3, #34	; 0x22
 8007fbe:	f8df b158 	ldr.w	fp, [pc, #344]	; 8008118 <_strtod_l+0x598>
 8007fc2:	f8c9 3000 	str.w	r3, [r9]
 8007fc6:	f04f 0a00 	mov.w	sl, #0
 8007fca:	9b07      	ldr	r3, [sp, #28]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f43f ae16 	beq.w	8007bfe <_strtod_l+0x7e>
 8007fd2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007fd4:	4648      	mov	r0, r9
 8007fd6:	f001 fe3e 	bl	8009c56 <_Bfree>
 8007fda:	9905      	ldr	r1, [sp, #20]
 8007fdc:	4648      	mov	r0, r9
 8007fde:	f001 fe3a 	bl	8009c56 <_Bfree>
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	4648      	mov	r0, r9
 8007fe6:	f001 fe36 	bl	8009c56 <_Bfree>
 8007fea:	9907      	ldr	r1, [sp, #28]
 8007fec:	4648      	mov	r0, r9
 8007fee:	f001 fe32 	bl	8009c56 <_Bfree>
 8007ff2:	4621      	mov	r1, r4
 8007ff4:	4648      	mov	r0, r9
 8007ff6:	f001 fe2e 	bl	8009c56 <_Bfree>
 8007ffa:	e600      	b.n	8007bfe <_strtod_l+0x7e>
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8008002:	4293      	cmp	r3, r2
 8008004:	dbba      	blt.n	8007f7c <_strtod_l+0x3fc>
 8008006:	4d42      	ldr	r5, [pc, #264]	; (8008110 <_strtod_l+0x590>)
 8008008:	f1c4 040f 	rsb	r4, r4, #15
 800800c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8008010:	4652      	mov	r2, sl
 8008012:	465b      	mov	r3, fp
 8008014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008018:	f7f8 faee 	bl	80005f8 <__aeabi_dmul>
 800801c:	9b06      	ldr	r3, [sp, #24]
 800801e:	1b1c      	subs	r4, r3, r4
 8008020:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8008024:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008028:	e78d      	b.n	8007f46 <_strtod_l+0x3c6>
 800802a:	f113 0f16 	cmn.w	r3, #22
 800802e:	dba5      	blt.n	8007f7c <_strtod_l+0x3fc>
 8008030:	4a37      	ldr	r2, [pc, #220]	; (8008110 <_strtod_l+0x590>)
 8008032:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8008036:	e9d2 2300 	ldrd	r2, r3, [r2]
 800803a:	4650      	mov	r0, sl
 800803c:	4659      	mov	r1, fp
 800803e:	f7f8 fc05 	bl	800084c <__aeabi_ddiv>
 8008042:	e782      	b.n	8007f4a <_strtod_l+0x3ca>
 8008044:	2300      	movs	r3, #0
 8008046:	4e33      	ldr	r6, [pc, #204]	; (8008114 <_strtod_l+0x594>)
 8008048:	ea4f 1828 	mov.w	r8, r8, asr #4
 800804c:	4650      	mov	r0, sl
 800804e:	4659      	mov	r1, fp
 8008050:	461d      	mov	r5, r3
 8008052:	f1b8 0f01 	cmp.w	r8, #1
 8008056:	dc21      	bgt.n	800809c <_strtod_l+0x51c>
 8008058:	b10b      	cbz	r3, 800805e <_strtod_l+0x4de>
 800805a:	4682      	mov	sl, r0
 800805c:	468b      	mov	fp, r1
 800805e:	4b2d      	ldr	r3, [pc, #180]	; (8008114 <_strtod_l+0x594>)
 8008060:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008064:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008070:	f7f8 fac2 	bl	80005f8 <__aeabi_dmul>
 8008074:	4b28      	ldr	r3, [pc, #160]	; (8008118 <_strtod_l+0x598>)
 8008076:	460a      	mov	r2, r1
 8008078:	400b      	ands	r3, r1
 800807a:	4928      	ldr	r1, [pc, #160]	; (800811c <_strtod_l+0x59c>)
 800807c:	428b      	cmp	r3, r1
 800807e:	4682      	mov	sl, r0
 8008080:	d898      	bhi.n	8007fb4 <_strtod_l+0x434>
 8008082:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008086:	428b      	cmp	r3, r1
 8008088:	bf86      	itte	hi
 800808a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008124 <_strtod_l+0x5a4>
 800808e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008092:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008096:	2300      	movs	r3, #0
 8008098:	9304      	str	r3, [sp, #16]
 800809a:	e077      	b.n	800818c <_strtod_l+0x60c>
 800809c:	f018 0f01 	tst.w	r8, #1
 80080a0:	d006      	beq.n	80080b0 <_strtod_l+0x530>
 80080a2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80080a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080aa:	f7f8 faa5 	bl	80005f8 <__aeabi_dmul>
 80080ae:	2301      	movs	r3, #1
 80080b0:	3501      	adds	r5, #1
 80080b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80080b6:	e7cc      	b.n	8008052 <_strtod_l+0x4d2>
 80080b8:	d0ed      	beq.n	8008096 <_strtod_l+0x516>
 80080ba:	f1c8 0800 	rsb	r8, r8, #0
 80080be:	f018 020f 	ands.w	r2, r8, #15
 80080c2:	d00a      	beq.n	80080da <_strtod_l+0x55a>
 80080c4:	4b12      	ldr	r3, [pc, #72]	; (8008110 <_strtod_l+0x590>)
 80080c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ca:	4650      	mov	r0, sl
 80080cc:	4659      	mov	r1, fp
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 fbbb 	bl	800084c <__aeabi_ddiv>
 80080d6:	4682      	mov	sl, r0
 80080d8:	468b      	mov	fp, r1
 80080da:	ea5f 1828 	movs.w	r8, r8, asr #4
 80080de:	d0da      	beq.n	8008096 <_strtod_l+0x516>
 80080e0:	f1b8 0f1f 	cmp.w	r8, #31
 80080e4:	dd20      	ble.n	8008128 <_strtod_l+0x5a8>
 80080e6:	2400      	movs	r4, #0
 80080e8:	46a0      	mov	r8, r4
 80080ea:	9407      	str	r4, [sp, #28]
 80080ec:	9405      	str	r4, [sp, #20]
 80080ee:	2322      	movs	r3, #34	; 0x22
 80080f0:	f04f 0a00 	mov.w	sl, #0
 80080f4:	f04f 0b00 	mov.w	fp, #0
 80080f8:	f8c9 3000 	str.w	r3, [r9]
 80080fc:	e765      	b.n	8007fca <_strtod_l+0x44a>
 80080fe:	bf00      	nop
 8008100:	0800aa09 	.word	0x0800aa09
 8008104:	0800aa93 	.word	0x0800aa93
 8008108:	0800aa11 	.word	0x0800aa11
 800810c:	0800aa54 	.word	0x0800aa54
 8008110:	0800aad0 	.word	0x0800aad0
 8008114:	0800aaa8 	.word	0x0800aaa8
 8008118:	7ff00000 	.word	0x7ff00000
 800811c:	7ca00000 	.word	0x7ca00000
 8008120:	fff80000 	.word	0xfff80000
 8008124:	7fefffff 	.word	0x7fefffff
 8008128:	f018 0310 	ands.w	r3, r8, #16
 800812c:	bf18      	it	ne
 800812e:	236a      	movne	r3, #106	; 0x6a
 8008130:	4da0      	ldr	r5, [pc, #640]	; (80083b4 <_strtod_l+0x834>)
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	4650      	mov	r0, sl
 8008136:	4659      	mov	r1, fp
 8008138:	2300      	movs	r3, #0
 800813a:	f1b8 0f00 	cmp.w	r8, #0
 800813e:	f300 810a 	bgt.w	8008356 <_strtod_l+0x7d6>
 8008142:	b10b      	cbz	r3, 8008148 <_strtod_l+0x5c8>
 8008144:	4682      	mov	sl, r0
 8008146:	468b      	mov	fp, r1
 8008148:	9b04      	ldr	r3, [sp, #16]
 800814a:	b1bb      	cbz	r3, 800817c <_strtod_l+0x5fc>
 800814c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008150:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008154:	2b00      	cmp	r3, #0
 8008156:	4659      	mov	r1, fp
 8008158:	dd10      	ble.n	800817c <_strtod_l+0x5fc>
 800815a:	2b1f      	cmp	r3, #31
 800815c:	f340 8107 	ble.w	800836e <_strtod_l+0x7ee>
 8008160:	2b34      	cmp	r3, #52	; 0x34
 8008162:	bfde      	ittt	le
 8008164:	3b20      	suble	r3, #32
 8008166:	f04f 32ff 	movle.w	r2, #4294967295
 800816a:	fa02 f303 	lslle.w	r3, r2, r3
 800816e:	f04f 0a00 	mov.w	sl, #0
 8008172:	bfcc      	ite	gt
 8008174:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008178:	ea03 0b01 	andle.w	fp, r3, r1
 800817c:	2200      	movs	r2, #0
 800817e:	2300      	movs	r3, #0
 8008180:	4650      	mov	r0, sl
 8008182:	4659      	mov	r1, fp
 8008184:	f7f8 fca0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008188:	2800      	cmp	r0, #0
 800818a:	d1ac      	bne.n	80080e6 <_strtod_l+0x566>
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	9a05      	ldr	r2, [sp, #20]
 8008192:	9908      	ldr	r1, [sp, #32]
 8008194:	4623      	mov	r3, r4
 8008196:	4648      	mov	r0, r9
 8008198:	f001 fdaf 	bl	8009cfa <__s2b>
 800819c:	9007      	str	r0, [sp, #28]
 800819e:	2800      	cmp	r0, #0
 80081a0:	f43f af08 	beq.w	8007fb4 <_strtod_l+0x434>
 80081a4:	9a06      	ldr	r2, [sp, #24]
 80081a6:	9b06      	ldr	r3, [sp, #24]
 80081a8:	2a00      	cmp	r2, #0
 80081aa:	f1c3 0300 	rsb	r3, r3, #0
 80081ae:	bfa8      	it	ge
 80081b0:	2300      	movge	r3, #0
 80081b2:	930e      	str	r3, [sp, #56]	; 0x38
 80081b4:	2400      	movs	r4, #0
 80081b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80081ba:	9316      	str	r3, [sp, #88]	; 0x58
 80081bc:	46a0      	mov	r8, r4
 80081be:	9b07      	ldr	r3, [sp, #28]
 80081c0:	4648      	mov	r0, r9
 80081c2:	6859      	ldr	r1, [r3, #4]
 80081c4:	f001 fd13 	bl	8009bee <_Balloc>
 80081c8:	9005      	str	r0, [sp, #20]
 80081ca:	2800      	cmp	r0, #0
 80081cc:	f43f aef6 	beq.w	8007fbc <_strtod_l+0x43c>
 80081d0:	9b07      	ldr	r3, [sp, #28]
 80081d2:	691a      	ldr	r2, [r3, #16]
 80081d4:	3202      	adds	r2, #2
 80081d6:	f103 010c 	add.w	r1, r3, #12
 80081da:	0092      	lsls	r2, r2, #2
 80081dc:	300c      	adds	r0, #12
 80081de:	f001 fcfb 	bl	8009bd8 <memcpy>
 80081e2:	aa1e      	add	r2, sp, #120	; 0x78
 80081e4:	a91d      	add	r1, sp, #116	; 0x74
 80081e6:	ec4b ab10 	vmov	d0, sl, fp
 80081ea:	4648      	mov	r0, r9
 80081ec:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80081f0:	f002 f83e 	bl	800a270 <__d2b>
 80081f4:	901c      	str	r0, [sp, #112]	; 0x70
 80081f6:	2800      	cmp	r0, #0
 80081f8:	f43f aee0 	beq.w	8007fbc <_strtod_l+0x43c>
 80081fc:	2101      	movs	r1, #1
 80081fe:	4648      	mov	r0, r9
 8008200:	f001 fe07 	bl	8009e12 <__i2b>
 8008204:	4680      	mov	r8, r0
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f aed8 	beq.w	8007fbc <_strtod_l+0x43c>
 800820c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800820e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008210:	2e00      	cmp	r6, #0
 8008212:	bfab      	itete	ge
 8008214:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8008216:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8008218:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800821a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800821c:	bfac      	ite	ge
 800821e:	18f7      	addge	r7, r6, r3
 8008220:	1b9d      	sublt	r5, r3, r6
 8008222:	9b04      	ldr	r3, [sp, #16]
 8008224:	1af6      	subs	r6, r6, r3
 8008226:	4416      	add	r6, r2
 8008228:	4b63      	ldr	r3, [pc, #396]	; (80083b8 <_strtod_l+0x838>)
 800822a:	3e01      	subs	r6, #1
 800822c:	429e      	cmp	r6, r3
 800822e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008232:	f280 80af 	bge.w	8008394 <_strtod_l+0x814>
 8008236:	1b9b      	subs	r3, r3, r6
 8008238:	2b1f      	cmp	r3, #31
 800823a:	eba2 0203 	sub.w	r2, r2, r3
 800823e:	f04f 0101 	mov.w	r1, #1
 8008242:	f300 809b 	bgt.w	800837c <_strtod_l+0x7fc>
 8008246:	fa01 f303 	lsl.w	r3, r1, r3
 800824a:	930f      	str	r3, [sp, #60]	; 0x3c
 800824c:	2300      	movs	r3, #0
 800824e:	930a      	str	r3, [sp, #40]	; 0x28
 8008250:	18be      	adds	r6, r7, r2
 8008252:	9b04      	ldr	r3, [sp, #16]
 8008254:	42b7      	cmp	r7, r6
 8008256:	4415      	add	r5, r2
 8008258:	441d      	add	r5, r3
 800825a:	463b      	mov	r3, r7
 800825c:	bfa8      	it	ge
 800825e:	4633      	movge	r3, r6
 8008260:	42ab      	cmp	r3, r5
 8008262:	bfa8      	it	ge
 8008264:	462b      	movge	r3, r5
 8008266:	2b00      	cmp	r3, #0
 8008268:	bfc2      	ittt	gt
 800826a:	1af6      	subgt	r6, r6, r3
 800826c:	1aed      	subgt	r5, r5, r3
 800826e:	1aff      	subgt	r7, r7, r3
 8008270:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008272:	b1bb      	cbz	r3, 80082a4 <_strtod_l+0x724>
 8008274:	4641      	mov	r1, r8
 8008276:	461a      	mov	r2, r3
 8008278:	4648      	mov	r0, r9
 800827a:	f001 fe69 	bl	8009f50 <__pow5mult>
 800827e:	4680      	mov	r8, r0
 8008280:	2800      	cmp	r0, #0
 8008282:	f43f ae9b 	beq.w	8007fbc <_strtod_l+0x43c>
 8008286:	4601      	mov	r1, r0
 8008288:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800828a:	4648      	mov	r0, r9
 800828c:	f001 fdca 	bl	8009e24 <__multiply>
 8008290:	900c      	str	r0, [sp, #48]	; 0x30
 8008292:	2800      	cmp	r0, #0
 8008294:	f43f ae92 	beq.w	8007fbc <_strtod_l+0x43c>
 8008298:	991c      	ldr	r1, [sp, #112]	; 0x70
 800829a:	4648      	mov	r0, r9
 800829c:	f001 fcdb 	bl	8009c56 <_Bfree>
 80082a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082a2:	931c      	str	r3, [sp, #112]	; 0x70
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	dc7a      	bgt.n	800839e <_strtod_l+0x81e>
 80082a8:	9b06      	ldr	r3, [sp, #24]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd08      	ble.n	80082c0 <_strtod_l+0x740>
 80082ae:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80082b0:	9905      	ldr	r1, [sp, #20]
 80082b2:	4648      	mov	r0, r9
 80082b4:	f001 fe4c 	bl	8009f50 <__pow5mult>
 80082b8:	9005      	str	r0, [sp, #20]
 80082ba:	2800      	cmp	r0, #0
 80082bc:	f43f ae7e 	beq.w	8007fbc <_strtod_l+0x43c>
 80082c0:	2d00      	cmp	r5, #0
 80082c2:	dd08      	ble.n	80082d6 <_strtod_l+0x756>
 80082c4:	462a      	mov	r2, r5
 80082c6:	9905      	ldr	r1, [sp, #20]
 80082c8:	4648      	mov	r0, r9
 80082ca:	f001 fe8f 	bl	8009fec <__lshift>
 80082ce:	9005      	str	r0, [sp, #20]
 80082d0:	2800      	cmp	r0, #0
 80082d2:	f43f ae73 	beq.w	8007fbc <_strtod_l+0x43c>
 80082d6:	2f00      	cmp	r7, #0
 80082d8:	dd08      	ble.n	80082ec <_strtod_l+0x76c>
 80082da:	4641      	mov	r1, r8
 80082dc:	463a      	mov	r2, r7
 80082de:	4648      	mov	r0, r9
 80082e0:	f001 fe84 	bl	8009fec <__lshift>
 80082e4:	4680      	mov	r8, r0
 80082e6:	2800      	cmp	r0, #0
 80082e8:	f43f ae68 	beq.w	8007fbc <_strtod_l+0x43c>
 80082ec:	9a05      	ldr	r2, [sp, #20]
 80082ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 80082f0:	4648      	mov	r0, r9
 80082f2:	f001 fee9 	bl	800a0c8 <__mdiff>
 80082f6:	4604      	mov	r4, r0
 80082f8:	2800      	cmp	r0, #0
 80082fa:	f43f ae5f 	beq.w	8007fbc <_strtod_l+0x43c>
 80082fe:	68c3      	ldr	r3, [r0, #12]
 8008300:	930c      	str	r3, [sp, #48]	; 0x30
 8008302:	2300      	movs	r3, #0
 8008304:	60c3      	str	r3, [r0, #12]
 8008306:	4641      	mov	r1, r8
 8008308:	f001 fec4 	bl	800a094 <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	da55      	bge.n	80083bc <_strtod_l+0x83c>
 8008310:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008312:	b9e3      	cbnz	r3, 800834e <_strtod_l+0x7ce>
 8008314:	f1ba 0f00 	cmp.w	sl, #0
 8008318:	d119      	bne.n	800834e <_strtod_l+0x7ce>
 800831a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800831e:	b9b3      	cbnz	r3, 800834e <_strtod_l+0x7ce>
 8008320:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008324:	0d1b      	lsrs	r3, r3, #20
 8008326:	051b      	lsls	r3, r3, #20
 8008328:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800832c:	d90f      	bls.n	800834e <_strtod_l+0x7ce>
 800832e:	6963      	ldr	r3, [r4, #20]
 8008330:	b913      	cbnz	r3, 8008338 <_strtod_l+0x7b8>
 8008332:	6923      	ldr	r3, [r4, #16]
 8008334:	2b01      	cmp	r3, #1
 8008336:	dd0a      	ble.n	800834e <_strtod_l+0x7ce>
 8008338:	4621      	mov	r1, r4
 800833a:	2201      	movs	r2, #1
 800833c:	4648      	mov	r0, r9
 800833e:	f001 fe55 	bl	8009fec <__lshift>
 8008342:	4641      	mov	r1, r8
 8008344:	4604      	mov	r4, r0
 8008346:	f001 fea5 	bl	800a094 <__mcmp>
 800834a:	2800      	cmp	r0, #0
 800834c:	dc67      	bgt.n	800841e <_strtod_l+0x89e>
 800834e:	9b04      	ldr	r3, [sp, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d171      	bne.n	8008438 <_strtod_l+0x8b8>
 8008354:	e63d      	b.n	8007fd2 <_strtod_l+0x452>
 8008356:	f018 0f01 	tst.w	r8, #1
 800835a:	d004      	beq.n	8008366 <_strtod_l+0x7e6>
 800835c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008360:	f7f8 f94a 	bl	80005f8 <__aeabi_dmul>
 8008364:	2301      	movs	r3, #1
 8008366:	ea4f 0868 	mov.w	r8, r8, asr #1
 800836a:	3508      	adds	r5, #8
 800836c:	e6e5      	b.n	800813a <_strtod_l+0x5ba>
 800836e:	f04f 32ff 	mov.w	r2, #4294967295
 8008372:	fa02 f303 	lsl.w	r3, r2, r3
 8008376:	ea03 0a0a 	and.w	sl, r3, sl
 800837a:	e6ff      	b.n	800817c <_strtod_l+0x5fc>
 800837c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8008380:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008384:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008388:	36e2      	adds	r6, #226	; 0xe2
 800838a:	fa01 f306 	lsl.w	r3, r1, r6
 800838e:	930a      	str	r3, [sp, #40]	; 0x28
 8008390:	910f      	str	r1, [sp, #60]	; 0x3c
 8008392:	e75d      	b.n	8008250 <_strtod_l+0x6d0>
 8008394:	2300      	movs	r3, #0
 8008396:	930a      	str	r3, [sp, #40]	; 0x28
 8008398:	2301      	movs	r3, #1
 800839a:	930f      	str	r3, [sp, #60]	; 0x3c
 800839c:	e758      	b.n	8008250 <_strtod_l+0x6d0>
 800839e:	4632      	mov	r2, r6
 80083a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80083a2:	4648      	mov	r0, r9
 80083a4:	f001 fe22 	bl	8009fec <__lshift>
 80083a8:	901c      	str	r0, [sp, #112]	; 0x70
 80083aa:	2800      	cmp	r0, #0
 80083ac:	f47f af7c 	bne.w	80082a8 <_strtod_l+0x728>
 80083b0:	e604      	b.n	8007fbc <_strtod_l+0x43c>
 80083b2:	bf00      	nop
 80083b4:	0800aa68 	.word	0x0800aa68
 80083b8:	fffffc02 	.word	0xfffffc02
 80083bc:	465d      	mov	r5, fp
 80083be:	f040 8086 	bne.w	80084ce <_strtod_l+0x94e>
 80083c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083c8:	b32a      	cbz	r2, 8008416 <_strtod_l+0x896>
 80083ca:	4aaf      	ldr	r2, [pc, #700]	; (8008688 <_strtod_l+0xb08>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d153      	bne.n	8008478 <_strtod_l+0x8f8>
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	4650      	mov	r0, sl
 80083d4:	b1d3      	cbz	r3, 800840c <_strtod_l+0x88c>
 80083d6:	4aad      	ldr	r2, [pc, #692]	; (800868c <_strtod_l+0xb0c>)
 80083d8:	402a      	ands	r2, r5
 80083da:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80083de:	f04f 31ff 	mov.w	r1, #4294967295
 80083e2:	d816      	bhi.n	8008412 <_strtod_l+0x892>
 80083e4:	0d12      	lsrs	r2, r2, #20
 80083e6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80083ea:	fa01 f303 	lsl.w	r3, r1, r3
 80083ee:	4298      	cmp	r0, r3
 80083f0:	d142      	bne.n	8008478 <_strtod_l+0x8f8>
 80083f2:	4ba7      	ldr	r3, [pc, #668]	; (8008690 <_strtod_l+0xb10>)
 80083f4:	429d      	cmp	r5, r3
 80083f6:	d102      	bne.n	80083fe <_strtod_l+0x87e>
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f addf 	beq.w	8007fbc <_strtod_l+0x43c>
 80083fe:	4ba3      	ldr	r3, [pc, #652]	; (800868c <_strtod_l+0xb0c>)
 8008400:	402b      	ands	r3, r5
 8008402:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008406:	f04f 0a00 	mov.w	sl, #0
 800840a:	e7a0      	b.n	800834e <_strtod_l+0x7ce>
 800840c:	f04f 33ff 	mov.w	r3, #4294967295
 8008410:	e7ed      	b.n	80083ee <_strtod_l+0x86e>
 8008412:	460b      	mov	r3, r1
 8008414:	e7eb      	b.n	80083ee <_strtod_l+0x86e>
 8008416:	bb7b      	cbnz	r3, 8008478 <_strtod_l+0x8f8>
 8008418:	f1ba 0f00 	cmp.w	sl, #0
 800841c:	d12c      	bne.n	8008478 <_strtod_l+0x8f8>
 800841e:	9904      	ldr	r1, [sp, #16]
 8008420:	4a9a      	ldr	r2, [pc, #616]	; (800868c <_strtod_l+0xb0c>)
 8008422:	465b      	mov	r3, fp
 8008424:	b1f1      	cbz	r1, 8008464 <_strtod_l+0x8e4>
 8008426:	ea02 010b 	and.w	r1, r2, fp
 800842a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800842e:	dc19      	bgt.n	8008464 <_strtod_l+0x8e4>
 8008430:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008434:	f77f ae5b 	ble.w	80080ee <_strtod_l+0x56e>
 8008438:	4a96      	ldr	r2, [pc, #600]	; (8008694 <_strtod_l+0xb14>)
 800843a:	2300      	movs	r3, #0
 800843c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8008440:	4650      	mov	r0, sl
 8008442:	4659      	mov	r1, fp
 8008444:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008448:	f7f8 f8d6 	bl	80005f8 <__aeabi_dmul>
 800844c:	4682      	mov	sl, r0
 800844e:	468b      	mov	fp, r1
 8008450:	2900      	cmp	r1, #0
 8008452:	f47f adbe 	bne.w	8007fd2 <_strtod_l+0x452>
 8008456:	2800      	cmp	r0, #0
 8008458:	f47f adbb 	bne.w	8007fd2 <_strtod_l+0x452>
 800845c:	2322      	movs	r3, #34	; 0x22
 800845e:	f8c9 3000 	str.w	r3, [r9]
 8008462:	e5b6      	b.n	8007fd2 <_strtod_l+0x452>
 8008464:	4013      	ands	r3, r2
 8008466:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800846a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800846e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008472:	f04f 3aff 	mov.w	sl, #4294967295
 8008476:	e76a      	b.n	800834e <_strtod_l+0x7ce>
 8008478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800847a:	b193      	cbz	r3, 80084a2 <_strtod_l+0x922>
 800847c:	422b      	tst	r3, r5
 800847e:	f43f af66 	beq.w	800834e <_strtod_l+0x7ce>
 8008482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008484:	9a04      	ldr	r2, [sp, #16]
 8008486:	4650      	mov	r0, sl
 8008488:	4659      	mov	r1, fp
 800848a:	b173      	cbz	r3, 80084aa <_strtod_l+0x92a>
 800848c:	f7ff fb5c 	bl	8007b48 <sulp>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008498:	f7f7 fef8 	bl	800028c <__adddf3>
 800849c:	4682      	mov	sl, r0
 800849e:	468b      	mov	fp, r1
 80084a0:	e755      	b.n	800834e <_strtod_l+0x7ce>
 80084a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084a4:	ea13 0f0a 	tst.w	r3, sl
 80084a8:	e7e9      	b.n	800847e <_strtod_l+0x8fe>
 80084aa:	f7ff fb4d 	bl	8007b48 <sulp>
 80084ae:	4602      	mov	r2, r0
 80084b0:	460b      	mov	r3, r1
 80084b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80084b6:	f7f7 fee7 	bl	8000288 <__aeabi_dsub>
 80084ba:	2200      	movs	r2, #0
 80084bc:	2300      	movs	r3, #0
 80084be:	4682      	mov	sl, r0
 80084c0:	468b      	mov	fp, r1
 80084c2:	f7f8 fb01 	bl	8000ac8 <__aeabi_dcmpeq>
 80084c6:	2800      	cmp	r0, #0
 80084c8:	f47f ae11 	bne.w	80080ee <_strtod_l+0x56e>
 80084cc:	e73f      	b.n	800834e <_strtod_l+0x7ce>
 80084ce:	4641      	mov	r1, r8
 80084d0:	4620      	mov	r0, r4
 80084d2:	f001 ff1c 	bl	800a30e <__ratio>
 80084d6:	ec57 6b10 	vmov	r6, r7, d0
 80084da:	2200      	movs	r2, #0
 80084dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80084e0:	ee10 0a10 	vmov	r0, s0
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f8 fb03 	bl	8000af0 <__aeabi_dcmple>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d077      	beq.n	80085de <_strtod_l+0xa5e>
 80084ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d04a      	beq.n	800858a <_strtod_l+0xa0a>
 80084f4:	4b68      	ldr	r3, [pc, #416]	; (8008698 <_strtod_l+0xb18>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80084fc:	4f66      	ldr	r7, [pc, #408]	; (8008698 <_strtod_l+0xb18>)
 80084fe:	2600      	movs	r6, #0
 8008500:	4b62      	ldr	r3, [pc, #392]	; (800868c <_strtod_l+0xb0c>)
 8008502:	402b      	ands	r3, r5
 8008504:	930f      	str	r3, [sp, #60]	; 0x3c
 8008506:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008508:	4b64      	ldr	r3, [pc, #400]	; (800869c <_strtod_l+0xb1c>)
 800850a:	429a      	cmp	r2, r3
 800850c:	f040 80ce 	bne.w	80086ac <_strtod_l+0xb2c>
 8008510:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008514:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008518:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800851c:	ec4b ab10 	vmov	d0, sl, fp
 8008520:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008524:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008528:	f001 fe2c 	bl	800a184 <__ulp>
 800852c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008530:	ec53 2b10 	vmov	r2, r3, d0
 8008534:	f7f8 f860 	bl	80005f8 <__aeabi_dmul>
 8008538:	4652      	mov	r2, sl
 800853a:	465b      	mov	r3, fp
 800853c:	f7f7 fea6 	bl	800028c <__adddf3>
 8008540:	460b      	mov	r3, r1
 8008542:	4952      	ldr	r1, [pc, #328]	; (800868c <_strtod_l+0xb0c>)
 8008544:	4a56      	ldr	r2, [pc, #344]	; (80086a0 <_strtod_l+0xb20>)
 8008546:	4019      	ands	r1, r3
 8008548:	4291      	cmp	r1, r2
 800854a:	4682      	mov	sl, r0
 800854c:	d95b      	bls.n	8008606 <_strtod_l+0xa86>
 800854e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008550:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008554:	4293      	cmp	r3, r2
 8008556:	d103      	bne.n	8008560 <_strtod_l+0x9e0>
 8008558:	9b08      	ldr	r3, [sp, #32]
 800855a:	3301      	adds	r3, #1
 800855c:	f43f ad2e 	beq.w	8007fbc <_strtod_l+0x43c>
 8008560:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8008690 <_strtod_l+0xb10>
 8008564:	f04f 3aff 	mov.w	sl, #4294967295
 8008568:	991c      	ldr	r1, [sp, #112]	; 0x70
 800856a:	4648      	mov	r0, r9
 800856c:	f001 fb73 	bl	8009c56 <_Bfree>
 8008570:	9905      	ldr	r1, [sp, #20]
 8008572:	4648      	mov	r0, r9
 8008574:	f001 fb6f 	bl	8009c56 <_Bfree>
 8008578:	4641      	mov	r1, r8
 800857a:	4648      	mov	r0, r9
 800857c:	f001 fb6b 	bl	8009c56 <_Bfree>
 8008580:	4621      	mov	r1, r4
 8008582:	4648      	mov	r0, r9
 8008584:	f001 fb67 	bl	8009c56 <_Bfree>
 8008588:	e619      	b.n	80081be <_strtod_l+0x63e>
 800858a:	f1ba 0f00 	cmp.w	sl, #0
 800858e:	d11a      	bne.n	80085c6 <_strtod_l+0xa46>
 8008590:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008594:	b9eb      	cbnz	r3, 80085d2 <_strtod_l+0xa52>
 8008596:	2200      	movs	r2, #0
 8008598:	4b3f      	ldr	r3, [pc, #252]	; (8008698 <_strtod_l+0xb18>)
 800859a:	4630      	mov	r0, r6
 800859c:	4639      	mov	r1, r7
 800859e:	f7f8 fa9d 	bl	8000adc <__aeabi_dcmplt>
 80085a2:	b9c8      	cbnz	r0, 80085d8 <_strtod_l+0xa58>
 80085a4:	4630      	mov	r0, r6
 80085a6:	4639      	mov	r1, r7
 80085a8:	2200      	movs	r2, #0
 80085aa:	4b3e      	ldr	r3, [pc, #248]	; (80086a4 <_strtod_l+0xb24>)
 80085ac:	f7f8 f824 	bl	80005f8 <__aeabi_dmul>
 80085b0:	4606      	mov	r6, r0
 80085b2:	460f      	mov	r7, r1
 80085b4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80085b8:	9618      	str	r6, [sp, #96]	; 0x60
 80085ba:	9319      	str	r3, [sp, #100]	; 0x64
 80085bc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80085c0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80085c4:	e79c      	b.n	8008500 <_strtod_l+0x980>
 80085c6:	f1ba 0f01 	cmp.w	sl, #1
 80085ca:	d102      	bne.n	80085d2 <_strtod_l+0xa52>
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f43f ad8e 	beq.w	80080ee <_strtod_l+0x56e>
 80085d2:	2200      	movs	r2, #0
 80085d4:	4b34      	ldr	r3, [pc, #208]	; (80086a8 <_strtod_l+0xb28>)
 80085d6:	e78f      	b.n	80084f8 <_strtod_l+0x978>
 80085d8:	2600      	movs	r6, #0
 80085da:	4f32      	ldr	r7, [pc, #200]	; (80086a4 <_strtod_l+0xb24>)
 80085dc:	e7ea      	b.n	80085b4 <_strtod_l+0xa34>
 80085de:	4b31      	ldr	r3, [pc, #196]	; (80086a4 <_strtod_l+0xb24>)
 80085e0:	4630      	mov	r0, r6
 80085e2:	4639      	mov	r1, r7
 80085e4:	2200      	movs	r2, #0
 80085e6:	f7f8 f807 	bl	80005f8 <__aeabi_dmul>
 80085ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ec:	4606      	mov	r6, r0
 80085ee:	460f      	mov	r7, r1
 80085f0:	b933      	cbnz	r3, 8008600 <_strtod_l+0xa80>
 80085f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085f6:	9010      	str	r0, [sp, #64]	; 0x40
 80085f8:	9311      	str	r3, [sp, #68]	; 0x44
 80085fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085fe:	e7df      	b.n	80085c0 <_strtod_l+0xa40>
 8008600:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008604:	e7f9      	b.n	80085fa <_strtod_l+0xa7a>
 8008606:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800860a:	9b04      	ldr	r3, [sp, #16]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1ab      	bne.n	8008568 <_strtod_l+0x9e8>
 8008610:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008614:	0d1b      	lsrs	r3, r3, #20
 8008616:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008618:	051b      	lsls	r3, r3, #20
 800861a:	429a      	cmp	r2, r3
 800861c:	465d      	mov	r5, fp
 800861e:	d1a3      	bne.n	8008568 <_strtod_l+0x9e8>
 8008620:	4639      	mov	r1, r7
 8008622:	4630      	mov	r0, r6
 8008624:	f7f8 fa98 	bl	8000b58 <__aeabi_d2iz>
 8008628:	f7f7 ff7c 	bl	8000524 <__aeabi_i2d>
 800862c:	460b      	mov	r3, r1
 800862e:	4602      	mov	r2, r0
 8008630:	4639      	mov	r1, r7
 8008632:	4630      	mov	r0, r6
 8008634:	f7f7 fe28 	bl	8000288 <__aeabi_dsub>
 8008638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863a:	4606      	mov	r6, r0
 800863c:	460f      	mov	r7, r1
 800863e:	b933      	cbnz	r3, 800864e <_strtod_l+0xace>
 8008640:	f1ba 0f00 	cmp.w	sl, #0
 8008644:	d103      	bne.n	800864e <_strtod_l+0xace>
 8008646:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800864a:	2d00      	cmp	r5, #0
 800864c:	d06d      	beq.n	800872a <_strtod_l+0xbaa>
 800864e:	a30a      	add	r3, pc, #40	; (adr r3, 8008678 <_strtod_l+0xaf8>)
 8008650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008654:	4630      	mov	r0, r6
 8008656:	4639      	mov	r1, r7
 8008658:	f7f8 fa40 	bl	8000adc <__aeabi_dcmplt>
 800865c:	2800      	cmp	r0, #0
 800865e:	f47f acb8 	bne.w	8007fd2 <_strtod_l+0x452>
 8008662:	a307      	add	r3, pc, #28	; (adr r3, 8008680 <_strtod_l+0xb00>)
 8008664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f8 fa54 	bl	8000b18 <__aeabi_dcmpgt>
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f af79 	beq.w	8008568 <_strtod_l+0x9e8>
 8008676:	e4ac      	b.n	8007fd2 <_strtod_l+0x452>
 8008678:	94a03595 	.word	0x94a03595
 800867c:	3fdfffff 	.word	0x3fdfffff
 8008680:	35afe535 	.word	0x35afe535
 8008684:	3fe00000 	.word	0x3fe00000
 8008688:	000fffff 	.word	0x000fffff
 800868c:	7ff00000 	.word	0x7ff00000
 8008690:	7fefffff 	.word	0x7fefffff
 8008694:	39500000 	.word	0x39500000
 8008698:	3ff00000 	.word	0x3ff00000
 800869c:	7fe00000 	.word	0x7fe00000
 80086a0:	7c9fffff 	.word	0x7c9fffff
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	bff00000 	.word	0xbff00000
 80086ac:	9b04      	ldr	r3, [sp, #16]
 80086ae:	b333      	cbz	r3, 80086fe <_strtod_l+0xb7e>
 80086b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086b2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086b6:	d822      	bhi.n	80086fe <_strtod_l+0xb7e>
 80086b8:	a327      	add	r3, pc, #156	; (adr r3, 8008758 <_strtod_l+0xbd8>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	4630      	mov	r0, r6
 80086c0:	4639      	mov	r1, r7
 80086c2:	f7f8 fa15 	bl	8000af0 <__aeabi_dcmple>
 80086c6:	b1a0      	cbz	r0, 80086f2 <_strtod_l+0xb72>
 80086c8:	4639      	mov	r1, r7
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7f8 fa6c 	bl	8000ba8 <__aeabi_d2uiz>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	bf08      	it	eq
 80086d4:	2001      	moveq	r0, #1
 80086d6:	f7f7 ff15 	bl	8000504 <__aeabi_ui2d>
 80086da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086dc:	4606      	mov	r6, r0
 80086de:	460f      	mov	r7, r1
 80086e0:	bb03      	cbnz	r3, 8008724 <_strtod_l+0xba4>
 80086e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80086e6:	9012      	str	r0, [sp, #72]	; 0x48
 80086e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80086ea:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80086ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80086f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80086f6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80086fe:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008702:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008706:	f001 fd3d 	bl	800a184 <__ulp>
 800870a:	4650      	mov	r0, sl
 800870c:	ec53 2b10 	vmov	r2, r3, d0
 8008710:	4659      	mov	r1, fp
 8008712:	f7f7 ff71 	bl	80005f8 <__aeabi_dmul>
 8008716:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800871a:	f7f7 fdb7 	bl	800028c <__adddf3>
 800871e:	4682      	mov	sl, r0
 8008720:	468b      	mov	fp, r1
 8008722:	e772      	b.n	800860a <_strtod_l+0xa8a>
 8008724:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008728:	e7df      	b.n	80086ea <_strtod_l+0xb6a>
 800872a:	a30d      	add	r3, pc, #52	; (adr r3, 8008760 <_strtod_l+0xbe0>)
 800872c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008730:	f7f8 f9d4 	bl	8000adc <__aeabi_dcmplt>
 8008734:	e79c      	b.n	8008670 <_strtod_l+0xaf0>
 8008736:	2300      	movs	r3, #0
 8008738:	930d      	str	r3, [sp, #52]	; 0x34
 800873a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800873c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800873e:	6013      	str	r3, [r2, #0]
 8008740:	f7ff ba61 	b.w	8007c06 <_strtod_l+0x86>
 8008744:	2b65      	cmp	r3, #101	; 0x65
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f43f ab4e 	beq.w	8007dea <_strtod_l+0x26a>
 800874e:	2101      	movs	r1, #1
 8008750:	4614      	mov	r4, r2
 8008752:	9104      	str	r1, [sp, #16]
 8008754:	f7ff bacb 	b.w	8007cee <_strtod_l+0x16e>
 8008758:	ffc00000 	.word	0xffc00000
 800875c:	41dfffff 	.word	0x41dfffff
 8008760:	94a03595 	.word	0x94a03595
 8008764:	3fcfffff 	.word	0x3fcfffff

08008768 <_strtod_r>:
 8008768:	4b05      	ldr	r3, [pc, #20]	; (8008780 <_strtod_r+0x18>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	b410      	push	{r4}
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	4c04      	ldr	r4, [pc, #16]	; (8008784 <_strtod_r+0x1c>)
 8008772:	2b00      	cmp	r3, #0
 8008774:	bf08      	it	eq
 8008776:	4623      	moveq	r3, r4
 8008778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800877c:	f7ff ba00 	b.w	8007b80 <_strtod_l>
 8008780:	2000000c 	.word	0x2000000c
 8008784:	20000070 	.word	0x20000070

08008788 <_strtol_l.isra.0>:
 8008788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	4680      	mov	r8, r0
 800878e:	4689      	mov	r9, r1
 8008790:	4692      	mov	sl, r2
 8008792:	461e      	mov	r6, r3
 8008794:	460f      	mov	r7, r1
 8008796:	463d      	mov	r5, r7
 8008798:	9808      	ldr	r0, [sp, #32]
 800879a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800879e:	f001 f9ed 	bl	8009b7c <__locale_ctype_ptr_l>
 80087a2:	4420      	add	r0, r4
 80087a4:	7843      	ldrb	r3, [r0, #1]
 80087a6:	f013 0308 	ands.w	r3, r3, #8
 80087aa:	d132      	bne.n	8008812 <_strtol_l.isra.0+0x8a>
 80087ac:	2c2d      	cmp	r4, #45	; 0x2d
 80087ae:	d132      	bne.n	8008816 <_strtol_l.isra.0+0x8e>
 80087b0:	787c      	ldrb	r4, [r7, #1]
 80087b2:	1cbd      	adds	r5, r7, #2
 80087b4:	2201      	movs	r2, #1
 80087b6:	2e00      	cmp	r6, #0
 80087b8:	d05d      	beq.n	8008876 <_strtol_l.isra.0+0xee>
 80087ba:	2e10      	cmp	r6, #16
 80087bc:	d109      	bne.n	80087d2 <_strtol_l.isra.0+0x4a>
 80087be:	2c30      	cmp	r4, #48	; 0x30
 80087c0:	d107      	bne.n	80087d2 <_strtol_l.isra.0+0x4a>
 80087c2:	782b      	ldrb	r3, [r5, #0]
 80087c4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087c8:	2b58      	cmp	r3, #88	; 0x58
 80087ca:	d14f      	bne.n	800886c <_strtol_l.isra.0+0xe4>
 80087cc:	786c      	ldrb	r4, [r5, #1]
 80087ce:	2610      	movs	r6, #16
 80087d0:	3502      	adds	r5, #2
 80087d2:	2a00      	cmp	r2, #0
 80087d4:	bf14      	ite	ne
 80087d6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80087da:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80087de:	2700      	movs	r7, #0
 80087e0:	fbb1 fcf6 	udiv	ip, r1, r6
 80087e4:	4638      	mov	r0, r7
 80087e6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80087ea:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80087ee:	2b09      	cmp	r3, #9
 80087f0:	d817      	bhi.n	8008822 <_strtol_l.isra.0+0x9a>
 80087f2:	461c      	mov	r4, r3
 80087f4:	42a6      	cmp	r6, r4
 80087f6:	dd23      	ble.n	8008840 <_strtol_l.isra.0+0xb8>
 80087f8:	1c7b      	adds	r3, r7, #1
 80087fa:	d007      	beq.n	800880c <_strtol_l.isra.0+0x84>
 80087fc:	4584      	cmp	ip, r0
 80087fe:	d31c      	bcc.n	800883a <_strtol_l.isra.0+0xb2>
 8008800:	d101      	bne.n	8008806 <_strtol_l.isra.0+0x7e>
 8008802:	45a6      	cmp	lr, r4
 8008804:	db19      	blt.n	800883a <_strtol_l.isra.0+0xb2>
 8008806:	fb00 4006 	mla	r0, r0, r6, r4
 800880a:	2701      	movs	r7, #1
 800880c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008810:	e7eb      	b.n	80087ea <_strtol_l.isra.0+0x62>
 8008812:	462f      	mov	r7, r5
 8008814:	e7bf      	b.n	8008796 <_strtol_l.isra.0+0xe>
 8008816:	2c2b      	cmp	r4, #43	; 0x2b
 8008818:	bf04      	itt	eq
 800881a:	1cbd      	addeq	r5, r7, #2
 800881c:	787c      	ldrbeq	r4, [r7, #1]
 800881e:	461a      	mov	r2, r3
 8008820:	e7c9      	b.n	80087b6 <_strtol_l.isra.0+0x2e>
 8008822:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008826:	2b19      	cmp	r3, #25
 8008828:	d801      	bhi.n	800882e <_strtol_l.isra.0+0xa6>
 800882a:	3c37      	subs	r4, #55	; 0x37
 800882c:	e7e2      	b.n	80087f4 <_strtol_l.isra.0+0x6c>
 800882e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008832:	2b19      	cmp	r3, #25
 8008834:	d804      	bhi.n	8008840 <_strtol_l.isra.0+0xb8>
 8008836:	3c57      	subs	r4, #87	; 0x57
 8008838:	e7dc      	b.n	80087f4 <_strtol_l.isra.0+0x6c>
 800883a:	f04f 37ff 	mov.w	r7, #4294967295
 800883e:	e7e5      	b.n	800880c <_strtol_l.isra.0+0x84>
 8008840:	1c7b      	adds	r3, r7, #1
 8008842:	d108      	bne.n	8008856 <_strtol_l.isra.0+0xce>
 8008844:	2322      	movs	r3, #34	; 0x22
 8008846:	f8c8 3000 	str.w	r3, [r8]
 800884a:	4608      	mov	r0, r1
 800884c:	f1ba 0f00 	cmp.w	sl, #0
 8008850:	d107      	bne.n	8008862 <_strtol_l.isra.0+0xda>
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	b102      	cbz	r2, 800885a <_strtol_l.isra.0+0xd2>
 8008858:	4240      	negs	r0, r0
 800885a:	f1ba 0f00 	cmp.w	sl, #0
 800885e:	d0f8      	beq.n	8008852 <_strtol_l.isra.0+0xca>
 8008860:	b10f      	cbz	r7, 8008866 <_strtol_l.isra.0+0xde>
 8008862:	f105 39ff 	add.w	r9, r5, #4294967295
 8008866:	f8ca 9000 	str.w	r9, [sl]
 800886a:	e7f2      	b.n	8008852 <_strtol_l.isra.0+0xca>
 800886c:	2430      	movs	r4, #48	; 0x30
 800886e:	2e00      	cmp	r6, #0
 8008870:	d1af      	bne.n	80087d2 <_strtol_l.isra.0+0x4a>
 8008872:	2608      	movs	r6, #8
 8008874:	e7ad      	b.n	80087d2 <_strtol_l.isra.0+0x4a>
 8008876:	2c30      	cmp	r4, #48	; 0x30
 8008878:	d0a3      	beq.n	80087c2 <_strtol_l.isra.0+0x3a>
 800887a:	260a      	movs	r6, #10
 800887c:	e7a9      	b.n	80087d2 <_strtol_l.isra.0+0x4a>
	...

08008880 <_strtol_r>:
 8008880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008882:	4c06      	ldr	r4, [pc, #24]	; (800889c <_strtol_r+0x1c>)
 8008884:	4d06      	ldr	r5, [pc, #24]	; (80088a0 <_strtol_r+0x20>)
 8008886:	6824      	ldr	r4, [r4, #0]
 8008888:	6a24      	ldr	r4, [r4, #32]
 800888a:	2c00      	cmp	r4, #0
 800888c:	bf08      	it	eq
 800888e:	462c      	moveq	r4, r5
 8008890:	9400      	str	r4, [sp, #0]
 8008892:	f7ff ff79 	bl	8008788 <_strtol_l.isra.0>
 8008896:	b003      	add	sp, #12
 8008898:	bd30      	pop	{r4, r5, pc}
 800889a:	bf00      	nop
 800889c:	2000000c 	.word	0x2000000c
 80088a0:	20000070 	.word	0x20000070

080088a4 <quorem>:
 80088a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088a8:	6903      	ldr	r3, [r0, #16]
 80088aa:	690c      	ldr	r4, [r1, #16]
 80088ac:	42a3      	cmp	r3, r4
 80088ae:	4680      	mov	r8, r0
 80088b0:	f2c0 8082 	blt.w	80089b8 <quorem+0x114>
 80088b4:	3c01      	subs	r4, #1
 80088b6:	f101 0714 	add.w	r7, r1, #20
 80088ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80088be:	f100 0614 	add.w	r6, r0, #20
 80088c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80088c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80088ca:	eb06 030c 	add.w	r3, r6, ip
 80088ce:	3501      	adds	r5, #1
 80088d0:	eb07 090c 	add.w	r9, r7, ip
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80088da:	b395      	cbz	r5, 8008942 <quorem+0x9e>
 80088dc:	f04f 0a00 	mov.w	sl, #0
 80088e0:	4638      	mov	r0, r7
 80088e2:	46b6      	mov	lr, r6
 80088e4:	46d3      	mov	fp, sl
 80088e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80088ea:	b293      	uxth	r3, r2
 80088ec:	fb05 a303 	mla	r3, r5, r3, sl
 80088f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	ebab 0303 	sub.w	r3, fp, r3
 80088fa:	0c12      	lsrs	r2, r2, #16
 80088fc:	f8de b000 	ldr.w	fp, [lr]
 8008900:	fb05 a202 	mla	r2, r5, r2, sl
 8008904:	fa13 f38b 	uxtah	r3, r3, fp
 8008908:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800890c:	fa1f fb82 	uxth.w	fp, r2
 8008910:	f8de 2000 	ldr.w	r2, [lr]
 8008914:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800891c:	b29b      	uxth	r3, r3
 800891e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008922:	4581      	cmp	r9, r0
 8008924:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008928:	f84e 3b04 	str.w	r3, [lr], #4
 800892c:	d2db      	bcs.n	80088e6 <quorem+0x42>
 800892e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008932:	b933      	cbnz	r3, 8008942 <quorem+0x9e>
 8008934:	9b01      	ldr	r3, [sp, #4]
 8008936:	3b04      	subs	r3, #4
 8008938:	429e      	cmp	r6, r3
 800893a:	461a      	mov	r2, r3
 800893c:	d330      	bcc.n	80089a0 <quorem+0xfc>
 800893e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008942:	4640      	mov	r0, r8
 8008944:	f001 fba6 	bl	800a094 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	db25      	blt.n	8008998 <quorem+0xf4>
 800894c:	3501      	adds	r5, #1
 800894e:	4630      	mov	r0, r6
 8008950:	f04f 0c00 	mov.w	ip, #0
 8008954:	f857 2b04 	ldr.w	r2, [r7], #4
 8008958:	f8d0 e000 	ldr.w	lr, [r0]
 800895c:	b293      	uxth	r3, r2
 800895e:	ebac 0303 	sub.w	r3, ip, r3
 8008962:	0c12      	lsrs	r2, r2, #16
 8008964:	fa13 f38e 	uxtah	r3, r3, lr
 8008968:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800896c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	45b9      	cmp	r9, r7
 8008978:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800897c:	f840 3b04 	str.w	r3, [r0], #4
 8008980:	d2e8      	bcs.n	8008954 <quorem+0xb0>
 8008982:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8008986:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800898a:	b92a      	cbnz	r2, 8008998 <quorem+0xf4>
 800898c:	3b04      	subs	r3, #4
 800898e:	429e      	cmp	r6, r3
 8008990:	461a      	mov	r2, r3
 8008992:	d30b      	bcc.n	80089ac <quorem+0x108>
 8008994:	f8c8 4010 	str.w	r4, [r8, #16]
 8008998:	4628      	mov	r0, r5
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	3b04      	subs	r3, #4
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	d1ca      	bne.n	800893e <quorem+0x9a>
 80089a8:	3c01      	subs	r4, #1
 80089aa:	e7c5      	b.n	8008938 <quorem+0x94>
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	3b04      	subs	r3, #4
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	d1ef      	bne.n	8008994 <quorem+0xf0>
 80089b4:	3c01      	subs	r4, #1
 80089b6:	e7ea      	b.n	800898e <quorem+0xea>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7ee      	b.n	800899a <quorem+0xf6>
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_dtoa_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	ec57 6b10 	vmov	r6, r7, d0
 80089c8:	b097      	sub	sp, #92	; 0x5c
 80089ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80089cc:	9106      	str	r1, [sp, #24]
 80089ce:	4604      	mov	r4, r0
 80089d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80089d2:	9312      	str	r3, [sp, #72]	; 0x48
 80089d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089d8:	e9cd 6700 	strd	r6, r7, [sp]
 80089dc:	b93d      	cbnz	r5, 80089ee <_dtoa_r+0x2e>
 80089de:	2010      	movs	r0, #16
 80089e0:	f001 f8e0 	bl	8009ba4 <malloc>
 80089e4:	6260      	str	r0, [r4, #36]	; 0x24
 80089e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089ea:	6005      	str	r5, [r0, #0]
 80089ec:	60c5      	str	r5, [r0, #12]
 80089ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089f0:	6819      	ldr	r1, [r3, #0]
 80089f2:	b151      	cbz	r1, 8008a0a <_dtoa_r+0x4a>
 80089f4:	685a      	ldr	r2, [r3, #4]
 80089f6:	604a      	str	r2, [r1, #4]
 80089f8:	2301      	movs	r3, #1
 80089fa:	4093      	lsls	r3, r2
 80089fc:	608b      	str	r3, [r1, #8]
 80089fe:	4620      	mov	r0, r4
 8008a00:	f001 f929 	bl	8009c56 <_Bfree>
 8008a04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a06:	2200      	movs	r2, #0
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	1e3b      	subs	r3, r7, #0
 8008a0c:	bfbb      	ittet	lt
 8008a0e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a12:	9301      	strlt	r3, [sp, #4]
 8008a14:	2300      	movge	r3, #0
 8008a16:	2201      	movlt	r2, #1
 8008a18:	bfac      	ite	ge
 8008a1a:	f8c8 3000 	strge.w	r3, [r8]
 8008a1e:	f8c8 2000 	strlt.w	r2, [r8]
 8008a22:	4baf      	ldr	r3, [pc, #700]	; (8008ce0 <_dtoa_r+0x320>)
 8008a24:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008a28:	ea33 0308 	bics.w	r3, r3, r8
 8008a2c:	d114      	bne.n	8008a58 <_dtoa_r+0x98>
 8008a2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a30:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	9b00      	ldr	r3, [sp, #0]
 8008a38:	b923      	cbnz	r3, 8008a44 <_dtoa_r+0x84>
 8008a3a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f000 8542 	beq.w	80094c8 <_dtoa_r+0xb08>
 8008a44:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a46:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008cf4 <_dtoa_r+0x334>
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8544 	beq.w	80094d8 <_dtoa_r+0xb18>
 8008a50:	f10b 0303 	add.w	r3, fp, #3
 8008a54:	f000 bd3e 	b.w	80094d4 <_dtoa_r+0xb14>
 8008a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2300      	movs	r3, #0
 8008a60:	4630      	mov	r0, r6
 8008a62:	4639      	mov	r1, r7
 8008a64:	f7f8 f830 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a68:	4681      	mov	r9, r0
 8008a6a:	b168      	cbz	r0, 8008a88 <_dtoa_r+0xc8>
 8008a6c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a6e:	2301      	movs	r3, #1
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 8524 	beq.w	80094c2 <_dtoa_r+0xb02>
 8008a7a:	4b9a      	ldr	r3, [pc, #616]	; (8008ce4 <_dtoa_r+0x324>)
 8008a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a7e:	f103 3bff 	add.w	fp, r3, #4294967295
 8008a82:	6013      	str	r3, [r2, #0]
 8008a84:	f000 bd28 	b.w	80094d8 <_dtoa_r+0xb18>
 8008a88:	aa14      	add	r2, sp, #80	; 0x50
 8008a8a:	a915      	add	r1, sp, #84	; 0x54
 8008a8c:	ec47 6b10 	vmov	d0, r6, r7
 8008a90:	4620      	mov	r0, r4
 8008a92:	f001 fbed 	bl	800a270 <__d2b>
 8008a96:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008a9a:	9004      	str	r0, [sp, #16]
 8008a9c:	2d00      	cmp	r5, #0
 8008a9e:	d07c      	beq.n	8008b9a <_dtoa_r+0x1da>
 8008aa0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008aa4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008aa8:	46b2      	mov	sl, r6
 8008aaa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008aae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ab2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	4b8b      	ldr	r3, [pc, #556]	; (8008ce8 <_dtoa_r+0x328>)
 8008aba:	4650      	mov	r0, sl
 8008abc:	4659      	mov	r1, fp
 8008abe:	f7f7 fbe3 	bl	8000288 <__aeabi_dsub>
 8008ac2:	a381      	add	r3, pc, #516	; (adr r3, 8008cc8 <_dtoa_r+0x308>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fd96 	bl	80005f8 <__aeabi_dmul>
 8008acc:	a380      	add	r3, pc, #512	; (adr r3, 8008cd0 <_dtoa_r+0x310>)
 8008ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad2:	f7f7 fbdb 	bl	800028c <__adddf3>
 8008ad6:	4606      	mov	r6, r0
 8008ad8:	4628      	mov	r0, r5
 8008ada:	460f      	mov	r7, r1
 8008adc:	f7f7 fd22 	bl	8000524 <__aeabi_i2d>
 8008ae0:	a37d      	add	r3, pc, #500	; (adr r3, 8008cd8 <_dtoa_r+0x318>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	4602      	mov	r2, r0
 8008aec:	460b      	mov	r3, r1
 8008aee:	4630      	mov	r0, r6
 8008af0:	4639      	mov	r1, r7
 8008af2:	f7f7 fbcb 	bl	800028c <__adddf3>
 8008af6:	4606      	mov	r6, r0
 8008af8:	460f      	mov	r7, r1
 8008afa:	f7f8 f82d 	bl	8000b58 <__aeabi_d2iz>
 8008afe:	2200      	movs	r2, #0
 8008b00:	4682      	mov	sl, r0
 8008b02:	2300      	movs	r3, #0
 8008b04:	4630      	mov	r0, r6
 8008b06:	4639      	mov	r1, r7
 8008b08:	f7f7 ffe8 	bl	8000adc <__aeabi_dcmplt>
 8008b0c:	b148      	cbz	r0, 8008b22 <_dtoa_r+0x162>
 8008b0e:	4650      	mov	r0, sl
 8008b10:	f7f7 fd08 	bl	8000524 <__aeabi_i2d>
 8008b14:	4632      	mov	r2, r6
 8008b16:	463b      	mov	r3, r7
 8008b18:	f7f7 ffd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b1c:	b908      	cbnz	r0, 8008b22 <_dtoa_r+0x162>
 8008b1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b22:	f1ba 0f16 	cmp.w	sl, #22
 8008b26:	d859      	bhi.n	8008bdc <_dtoa_r+0x21c>
 8008b28:	4970      	ldr	r1, [pc, #448]	; (8008cec <_dtoa_r+0x32c>)
 8008b2a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008b2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b36:	f7f7 ffef 	bl	8000b18 <__aeabi_dcmpgt>
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d050      	beq.n	8008be0 <_dtoa_r+0x220>
 8008b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b42:	2300      	movs	r3, #0
 8008b44:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b46:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b48:	1b5d      	subs	r5, r3, r5
 8008b4a:	f1b5 0801 	subs.w	r8, r5, #1
 8008b4e:	bf49      	itett	mi
 8008b50:	f1c5 0301 	rsbmi	r3, r5, #1
 8008b54:	2300      	movpl	r3, #0
 8008b56:	9305      	strmi	r3, [sp, #20]
 8008b58:	f04f 0800 	movmi.w	r8, #0
 8008b5c:	bf58      	it	pl
 8008b5e:	9305      	strpl	r3, [sp, #20]
 8008b60:	f1ba 0f00 	cmp.w	sl, #0
 8008b64:	db3e      	blt.n	8008be4 <_dtoa_r+0x224>
 8008b66:	2300      	movs	r3, #0
 8008b68:	44d0      	add	r8, sl
 8008b6a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008b6e:	9307      	str	r3, [sp, #28]
 8008b70:	9b06      	ldr	r3, [sp, #24]
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	f200 8090 	bhi.w	8008c98 <_dtoa_r+0x2d8>
 8008b78:	2b05      	cmp	r3, #5
 8008b7a:	bfc4      	itt	gt
 8008b7c:	3b04      	subgt	r3, #4
 8008b7e:	9306      	strgt	r3, [sp, #24]
 8008b80:	9b06      	ldr	r3, [sp, #24]
 8008b82:	f1a3 0302 	sub.w	r3, r3, #2
 8008b86:	bfcc      	ite	gt
 8008b88:	2500      	movgt	r5, #0
 8008b8a:	2501      	movle	r5, #1
 8008b8c:	2b03      	cmp	r3, #3
 8008b8e:	f200 808f 	bhi.w	8008cb0 <_dtoa_r+0x2f0>
 8008b92:	e8df f003 	tbb	[pc, r3]
 8008b96:	7f7d      	.short	0x7f7d
 8008b98:	7131      	.short	0x7131
 8008b9a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008b9e:	441d      	add	r5, r3
 8008ba0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008ba4:	2820      	cmp	r0, #32
 8008ba6:	dd13      	ble.n	8008bd0 <_dtoa_r+0x210>
 8008ba8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008bac:	9b00      	ldr	r3, [sp, #0]
 8008bae:	fa08 f800 	lsl.w	r8, r8, r0
 8008bb2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008bb6:	fa23 f000 	lsr.w	r0, r3, r0
 8008bba:	ea48 0000 	orr.w	r0, r8, r0
 8008bbe:	f7f7 fca1 	bl	8000504 <__aeabi_ui2d>
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008bca:	3d01      	subs	r5, #1
 8008bcc:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bce:	e772      	b.n	8008ab6 <_dtoa_r+0xf6>
 8008bd0:	9b00      	ldr	r3, [sp, #0]
 8008bd2:	f1c0 0020 	rsb	r0, r0, #32
 8008bd6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bda:	e7f0      	b.n	8008bbe <_dtoa_r+0x1fe>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7b1      	b.n	8008b44 <_dtoa_r+0x184>
 8008be0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008be2:	e7b0      	b.n	8008b46 <_dtoa_r+0x186>
 8008be4:	9b05      	ldr	r3, [sp, #20]
 8008be6:	eba3 030a 	sub.w	r3, r3, sl
 8008bea:	9305      	str	r3, [sp, #20]
 8008bec:	f1ca 0300 	rsb	r3, sl, #0
 8008bf0:	9307      	str	r3, [sp, #28]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8008bf6:	e7bb      	b.n	8008b70 <_dtoa_r+0x1b0>
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	930a      	str	r3, [sp, #40]	; 0x28
 8008bfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dd59      	ble.n	8008cb6 <_dtoa_r+0x2f6>
 8008c02:	9302      	str	r3, [sp, #8]
 8008c04:	4699      	mov	r9, r3
 8008c06:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c08:	2200      	movs	r2, #0
 8008c0a:	6072      	str	r2, [r6, #4]
 8008c0c:	2204      	movs	r2, #4
 8008c0e:	f102 0014 	add.w	r0, r2, #20
 8008c12:	4298      	cmp	r0, r3
 8008c14:	6871      	ldr	r1, [r6, #4]
 8008c16:	d953      	bls.n	8008cc0 <_dtoa_r+0x300>
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f000 ffe8 	bl	8009bee <_Balloc>
 8008c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c20:	6030      	str	r0, [r6, #0]
 8008c22:	f1b9 0f0e 	cmp.w	r9, #14
 8008c26:	f8d3 b000 	ldr.w	fp, [r3]
 8008c2a:	f200 80e6 	bhi.w	8008dfa <_dtoa_r+0x43a>
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	f000 80e3 	beq.w	8008dfa <_dtoa_r+0x43a>
 8008c34:	ed9d 7b00 	vldr	d7, [sp]
 8008c38:	f1ba 0f00 	cmp.w	sl, #0
 8008c3c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008c40:	dd74      	ble.n	8008d2c <_dtoa_r+0x36c>
 8008c42:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <_dtoa_r+0x32c>)
 8008c44:	f00a 030f 	and.w	r3, sl, #15
 8008c48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008c4c:	ed93 7b00 	vldr	d7, [r3]
 8008c50:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008c54:	06f0      	lsls	r0, r6, #27
 8008c56:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008c5a:	d565      	bpl.n	8008d28 <_dtoa_r+0x368>
 8008c5c:	4b24      	ldr	r3, [pc, #144]	; (8008cf0 <_dtoa_r+0x330>)
 8008c5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008c62:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c66:	f7f7 fdf1 	bl	800084c <__aeabi_ddiv>
 8008c6a:	e9cd 0100 	strd	r0, r1, [sp]
 8008c6e:	f006 060f 	and.w	r6, r6, #15
 8008c72:	2503      	movs	r5, #3
 8008c74:	4f1e      	ldr	r7, [pc, #120]	; (8008cf0 <_dtoa_r+0x330>)
 8008c76:	e04c      	b.n	8008d12 <_dtoa_r+0x352>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	930a      	str	r3, [sp, #40]	; 0x28
 8008c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7e:	4453      	add	r3, sl
 8008c80:	f103 0901 	add.w	r9, r3, #1
 8008c84:	9302      	str	r3, [sp, #8]
 8008c86:	464b      	mov	r3, r9
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	bfb8      	it	lt
 8008c8c:	2301      	movlt	r3, #1
 8008c8e:	e7ba      	b.n	8008c06 <_dtoa_r+0x246>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e7b2      	b.n	8008bfa <_dtoa_r+0x23a>
 8008c94:	2300      	movs	r3, #0
 8008c96:	e7f0      	b.n	8008c7a <_dtoa_r+0x2ba>
 8008c98:	2501      	movs	r5, #1
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9306      	str	r3, [sp, #24]
 8008c9e:	950a      	str	r5, [sp, #40]	; 0x28
 8008ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca4:	9302      	str	r3, [sp, #8]
 8008ca6:	4699      	mov	r9, r3
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2312      	movs	r3, #18
 8008cac:	920b      	str	r2, [sp, #44]	; 0x2c
 8008cae:	e7aa      	b.n	8008c06 <_dtoa_r+0x246>
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb4:	e7f4      	b.n	8008ca0 <_dtoa_r+0x2e0>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	9302      	str	r3, [sp, #8]
 8008cba:	4699      	mov	r9, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	e7f5      	b.n	8008cac <_dtoa_r+0x2ec>
 8008cc0:	3101      	adds	r1, #1
 8008cc2:	6071      	str	r1, [r6, #4]
 8008cc4:	0052      	lsls	r2, r2, #1
 8008cc6:	e7a2      	b.n	8008c0e <_dtoa_r+0x24e>
 8008cc8:	636f4361 	.word	0x636f4361
 8008ccc:	3fd287a7 	.word	0x3fd287a7
 8008cd0:	8b60c8b3 	.word	0x8b60c8b3
 8008cd4:	3fc68a28 	.word	0x3fc68a28
 8008cd8:	509f79fb 	.word	0x509f79fb
 8008cdc:	3fd34413 	.word	0x3fd34413
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	0800aa15 	.word	0x0800aa15
 8008ce8:	3ff80000 	.word	0x3ff80000
 8008cec:	0800aad0 	.word	0x0800aad0
 8008cf0:	0800aaa8 	.word	0x0800aaa8
 8008cf4:	0800aa99 	.word	0x0800aa99
 8008cf8:	07f1      	lsls	r1, r6, #31
 8008cfa:	d508      	bpl.n	8008d0e <_dtoa_r+0x34e>
 8008cfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d04:	f7f7 fc78 	bl	80005f8 <__aeabi_dmul>
 8008d08:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d0c:	3501      	adds	r5, #1
 8008d0e:	1076      	asrs	r6, r6, #1
 8008d10:	3708      	adds	r7, #8
 8008d12:	2e00      	cmp	r6, #0
 8008d14:	d1f0      	bne.n	8008cf8 <_dtoa_r+0x338>
 8008d16:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008d1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008d1e:	f7f7 fd95 	bl	800084c <__aeabi_ddiv>
 8008d22:	e9cd 0100 	strd	r0, r1, [sp]
 8008d26:	e01a      	b.n	8008d5e <_dtoa_r+0x39e>
 8008d28:	2502      	movs	r5, #2
 8008d2a:	e7a3      	b.n	8008c74 <_dtoa_r+0x2b4>
 8008d2c:	f000 80a0 	beq.w	8008e70 <_dtoa_r+0x4b0>
 8008d30:	f1ca 0600 	rsb	r6, sl, #0
 8008d34:	4b9f      	ldr	r3, [pc, #636]	; (8008fb4 <_dtoa_r+0x5f4>)
 8008d36:	4fa0      	ldr	r7, [pc, #640]	; (8008fb8 <_dtoa_r+0x5f8>)
 8008d38:	f006 020f 	and.w	r2, r6, #15
 8008d3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008d48:	f7f7 fc56 	bl	80005f8 <__aeabi_dmul>
 8008d4c:	e9cd 0100 	strd	r0, r1, [sp]
 8008d50:	1136      	asrs	r6, r6, #4
 8008d52:	2300      	movs	r3, #0
 8008d54:	2502      	movs	r5, #2
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	d17f      	bne.n	8008e5a <_dtoa_r+0x49a>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1e1      	bne.n	8008d22 <_dtoa_r+0x362>
 8008d5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8087 	beq.w	8008e74 <_dtoa_r+0x4b4>
 8008d66:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	4b93      	ldr	r3, [pc, #588]	; (8008fbc <_dtoa_r+0x5fc>)
 8008d6e:	4630      	mov	r0, r6
 8008d70:	4639      	mov	r1, r7
 8008d72:	f7f7 feb3 	bl	8000adc <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d07c      	beq.n	8008e74 <_dtoa_r+0x4b4>
 8008d7a:	f1b9 0f00 	cmp.w	r9, #0
 8008d7e:	d079      	beq.n	8008e74 <_dtoa_r+0x4b4>
 8008d80:	9b02      	ldr	r3, [sp, #8]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	dd35      	ble.n	8008df2 <_dtoa_r+0x432>
 8008d86:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008d8a:	9308      	str	r3, [sp, #32]
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4b8b      	ldr	r3, [pc, #556]	; (8008fc0 <_dtoa_r+0x600>)
 8008d92:	4630      	mov	r0, r6
 8008d94:	f7f7 fc30 	bl	80005f8 <__aeabi_dmul>
 8008d98:	e9cd 0100 	strd	r0, r1, [sp]
 8008d9c:	9f02      	ldr	r7, [sp, #8]
 8008d9e:	3501      	adds	r5, #1
 8008da0:	4628      	mov	r0, r5
 8008da2:	f7f7 fbbf 	bl	8000524 <__aeabi_i2d>
 8008da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008daa:	f7f7 fc25 	bl	80005f8 <__aeabi_dmul>
 8008dae:	2200      	movs	r2, #0
 8008db0:	4b84      	ldr	r3, [pc, #528]	; (8008fc4 <_dtoa_r+0x604>)
 8008db2:	f7f7 fa6b 	bl	800028c <__adddf3>
 8008db6:	4605      	mov	r5, r0
 8008db8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008dbc:	2f00      	cmp	r7, #0
 8008dbe:	d15d      	bne.n	8008e7c <_dtoa_r+0x4bc>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	4b81      	ldr	r3, [pc, #516]	; (8008fc8 <_dtoa_r+0x608>)
 8008dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008dc8:	f7f7 fa5e 	bl	8000288 <__aeabi_dsub>
 8008dcc:	462a      	mov	r2, r5
 8008dce:	4633      	mov	r3, r6
 8008dd0:	e9cd 0100 	strd	r0, r1, [sp]
 8008dd4:	f7f7 fea0 	bl	8000b18 <__aeabi_dcmpgt>
 8008dd8:	2800      	cmp	r0, #0
 8008dda:	f040 8288 	bne.w	80092ee <_dtoa_r+0x92e>
 8008dde:	462a      	mov	r2, r5
 8008de0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008de8:	f7f7 fe78 	bl	8000adc <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	f040 827c 	bne.w	80092ea <_dtoa_r+0x92a>
 8008df2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008df6:	e9cd 2300 	strd	r2, r3, [sp]
 8008dfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f2c0 8150 	blt.w	80090a2 <_dtoa_r+0x6e2>
 8008e02:	f1ba 0f0e 	cmp.w	sl, #14
 8008e06:	f300 814c 	bgt.w	80090a2 <_dtoa_r+0x6e2>
 8008e0a:	4b6a      	ldr	r3, [pc, #424]	; (8008fb4 <_dtoa_r+0x5f4>)
 8008e0c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e10:	ed93 7b00 	vldr	d7, [r3]
 8008e14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008e1c:	f280 80d8 	bge.w	8008fd0 <_dtoa_r+0x610>
 8008e20:	f1b9 0f00 	cmp.w	r9, #0
 8008e24:	f300 80d4 	bgt.w	8008fd0 <_dtoa_r+0x610>
 8008e28:	f040 825e 	bne.w	80092e8 <_dtoa_r+0x928>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4b66      	ldr	r3, [pc, #408]	; (8008fc8 <_dtoa_r+0x608>)
 8008e30:	ec51 0b17 	vmov	r0, r1, d7
 8008e34:	f7f7 fbe0 	bl	80005f8 <__aeabi_dmul>
 8008e38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e3c:	f7f7 fe62 	bl	8000b04 <__aeabi_dcmpge>
 8008e40:	464f      	mov	r7, r9
 8008e42:	464e      	mov	r6, r9
 8008e44:	2800      	cmp	r0, #0
 8008e46:	f040 8234 	bne.w	80092b2 <_dtoa_r+0x8f2>
 8008e4a:	2331      	movs	r3, #49	; 0x31
 8008e4c:	f10b 0501 	add.w	r5, fp, #1
 8008e50:	f88b 3000 	strb.w	r3, [fp]
 8008e54:	f10a 0a01 	add.w	sl, sl, #1
 8008e58:	e22f      	b.n	80092ba <_dtoa_r+0x8fa>
 8008e5a:	07f2      	lsls	r2, r6, #31
 8008e5c:	d505      	bpl.n	8008e6a <_dtoa_r+0x4aa>
 8008e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e62:	f7f7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8008e66:	3501      	adds	r5, #1
 8008e68:	2301      	movs	r3, #1
 8008e6a:	1076      	asrs	r6, r6, #1
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	e772      	b.n	8008d56 <_dtoa_r+0x396>
 8008e70:	2502      	movs	r5, #2
 8008e72:	e774      	b.n	8008d5e <_dtoa_r+0x39e>
 8008e74:	f8cd a020 	str.w	sl, [sp, #32]
 8008e78:	464f      	mov	r7, r9
 8008e7a:	e791      	b.n	8008da0 <_dtoa_r+0x3e0>
 8008e7c:	4b4d      	ldr	r3, [pc, #308]	; (8008fb4 <_dtoa_r+0x5f4>)
 8008e7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e82:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8008e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d047      	beq.n	8008f1c <_dtoa_r+0x55c>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	2000      	movs	r0, #0
 8008e92:	494e      	ldr	r1, [pc, #312]	; (8008fcc <_dtoa_r+0x60c>)
 8008e94:	f7f7 fcda 	bl	800084c <__aeabi_ddiv>
 8008e98:	462a      	mov	r2, r5
 8008e9a:	4633      	mov	r3, r6
 8008e9c:	f7f7 f9f4 	bl	8000288 <__aeabi_dsub>
 8008ea0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008ea4:	465d      	mov	r5, fp
 8008ea6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eaa:	f7f7 fe55 	bl	8000b58 <__aeabi_d2iz>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	f7f7 fb38 	bl	8000524 <__aeabi_i2d>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ebc:	f7f7 f9e4 	bl	8000288 <__aeabi_dsub>
 8008ec0:	3630      	adds	r6, #48	; 0x30
 8008ec2:	f805 6b01 	strb.w	r6, [r5], #1
 8008ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008eca:	e9cd 0100 	strd	r0, r1, [sp]
 8008ece:	f7f7 fe05 	bl	8000adc <__aeabi_dcmplt>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	d163      	bne.n	8008f9e <_dtoa_r+0x5de>
 8008ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008eda:	2000      	movs	r0, #0
 8008edc:	4937      	ldr	r1, [pc, #220]	; (8008fbc <_dtoa_r+0x5fc>)
 8008ede:	f7f7 f9d3 	bl	8000288 <__aeabi_dsub>
 8008ee2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008ee6:	f7f7 fdf9 	bl	8000adc <__aeabi_dcmplt>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	f040 80b7 	bne.w	800905e <_dtoa_r+0x69e>
 8008ef0:	eba5 030b 	sub.w	r3, r5, fp
 8008ef4:	429f      	cmp	r7, r3
 8008ef6:	f77f af7c 	ble.w	8008df2 <_dtoa_r+0x432>
 8008efa:	2200      	movs	r2, #0
 8008efc:	4b30      	ldr	r3, [pc, #192]	; (8008fc0 <_dtoa_r+0x600>)
 8008efe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f02:	f7f7 fb79 	bl	80005f8 <__aeabi_dmul>
 8008f06:	2200      	movs	r2, #0
 8008f08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f0c:	4b2c      	ldr	r3, [pc, #176]	; (8008fc0 <_dtoa_r+0x600>)
 8008f0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f12:	f7f7 fb71 	bl	80005f8 <__aeabi_dmul>
 8008f16:	e9cd 0100 	strd	r0, r1, [sp]
 8008f1a:	e7c4      	b.n	8008ea6 <_dtoa_r+0x4e6>
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	4633      	mov	r3, r6
 8008f20:	f7f7 fb6a 	bl	80005f8 <__aeabi_dmul>
 8008f24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008f28:	eb0b 0507 	add.w	r5, fp, r7
 8008f2c:	465e      	mov	r6, fp
 8008f2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f32:	f7f7 fe11 	bl	8000b58 <__aeabi_d2iz>
 8008f36:	4607      	mov	r7, r0
 8008f38:	f7f7 faf4 	bl	8000524 <__aeabi_i2d>
 8008f3c:	3730      	adds	r7, #48	; 0x30
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f46:	f7f7 f99f 	bl	8000288 <__aeabi_dsub>
 8008f4a:	f806 7b01 	strb.w	r7, [r6], #1
 8008f4e:	42ae      	cmp	r6, r5
 8008f50:	e9cd 0100 	strd	r0, r1, [sp]
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	d126      	bne.n	8008fa8 <_dtoa_r+0x5e8>
 8008f5a:	4b1c      	ldr	r3, [pc, #112]	; (8008fcc <_dtoa_r+0x60c>)
 8008f5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f60:	f7f7 f994 	bl	800028c <__adddf3>
 8008f64:	4602      	mov	r2, r0
 8008f66:	460b      	mov	r3, r1
 8008f68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f6c:	f7f7 fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d174      	bne.n	800905e <_dtoa_r+0x69e>
 8008f74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008f78:	2000      	movs	r0, #0
 8008f7a:	4914      	ldr	r1, [pc, #80]	; (8008fcc <_dtoa_r+0x60c>)
 8008f7c:	f7f7 f984 	bl	8000288 <__aeabi_dsub>
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f88:	f7f7 fda8 	bl	8000adc <__aeabi_dcmplt>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	f43f af30 	beq.w	8008df2 <_dtoa_r+0x432>
 8008f92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f96:	2b30      	cmp	r3, #48	; 0x30
 8008f98:	f105 32ff 	add.w	r2, r5, #4294967295
 8008f9c:	d002      	beq.n	8008fa4 <_dtoa_r+0x5e4>
 8008f9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008fa2:	e04a      	b.n	800903a <_dtoa_r+0x67a>
 8008fa4:	4615      	mov	r5, r2
 8008fa6:	e7f4      	b.n	8008f92 <_dtoa_r+0x5d2>
 8008fa8:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <_dtoa_r+0x600>)
 8008faa:	f7f7 fb25 	bl	80005f8 <__aeabi_dmul>
 8008fae:	e9cd 0100 	strd	r0, r1, [sp]
 8008fb2:	e7bc      	b.n	8008f2e <_dtoa_r+0x56e>
 8008fb4:	0800aad0 	.word	0x0800aad0
 8008fb8:	0800aaa8 	.word	0x0800aaa8
 8008fbc:	3ff00000 	.word	0x3ff00000
 8008fc0:	40240000 	.word	0x40240000
 8008fc4:	401c0000 	.word	0x401c0000
 8008fc8:	40140000 	.word	0x40140000
 8008fcc:	3fe00000 	.word	0x3fe00000
 8008fd0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008fd4:	465d      	mov	r5, fp
 8008fd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 fc35 	bl	800084c <__aeabi_ddiv>
 8008fe2:	f7f7 fdb9 	bl	8000b58 <__aeabi_d2iz>
 8008fe6:	4680      	mov	r8, r0
 8008fe8:	f7f7 fa9c 	bl	8000524 <__aeabi_i2d>
 8008fec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ff0:	f7f7 fb02 	bl	80005f8 <__aeabi_dmul>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	4639      	mov	r1, r7
 8008ffc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009000:	f7f7 f942 	bl	8000288 <__aeabi_dsub>
 8009004:	f805 6b01 	strb.w	r6, [r5], #1
 8009008:	eba5 060b 	sub.w	r6, r5, fp
 800900c:	45b1      	cmp	r9, r6
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	d139      	bne.n	8009088 <_dtoa_r+0x6c8>
 8009014:	f7f7 f93a 	bl	800028c <__adddf3>
 8009018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800901c:	4606      	mov	r6, r0
 800901e:	460f      	mov	r7, r1
 8009020:	f7f7 fd7a 	bl	8000b18 <__aeabi_dcmpgt>
 8009024:	b9c8      	cbnz	r0, 800905a <_dtoa_r+0x69a>
 8009026:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800902a:	4630      	mov	r0, r6
 800902c:	4639      	mov	r1, r7
 800902e:	f7f7 fd4b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009032:	b110      	cbz	r0, 800903a <_dtoa_r+0x67a>
 8009034:	f018 0f01 	tst.w	r8, #1
 8009038:	d10f      	bne.n	800905a <_dtoa_r+0x69a>
 800903a:	9904      	ldr	r1, [sp, #16]
 800903c:	4620      	mov	r0, r4
 800903e:	f000 fe0a 	bl	8009c56 <_Bfree>
 8009042:	2300      	movs	r3, #0
 8009044:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009046:	702b      	strb	r3, [r5, #0]
 8009048:	f10a 0301 	add.w	r3, sl, #1
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009050:	2b00      	cmp	r3, #0
 8009052:	f000 8241 	beq.w	80094d8 <_dtoa_r+0xb18>
 8009056:	601d      	str	r5, [r3, #0]
 8009058:	e23e      	b.n	80094d8 <_dtoa_r+0xb18>
 800905a:	f8cd a020 	str.w	sl, [sp, #32]
 800905e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009062:	2a39      	cmp	r2, #57	; 0x39
 8009064:	f105 33ff 	add.w	r3, r5, #4294967295
 8009068:	d108      	bne.n	800907c <_dtoa_r+0x6bc>
 800906a:	459b      	cmp	fp, r3
 800906c:	d10a      	bne.n	8009084 <_dtoa_r+0x6c4>
 800906e:	9b08      	ldr	r3, [sp, #32]
 8009070:	3301      	adds	r3, #1
 8009072:	9308      	str	r3, [sp, #32]
 8009074:	2330      	movs	r3, #48	; 0x30
 8009076:	f88b 3000 	strb.w	r3, [fp]
 800907a:	465b      	mov	r3, fp
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	3201      	adds	r2, #1
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e78c      	b.n	8008f9e <_dtoa_r+0x5de>
 8009084:	461d      	mov	r5, r3
 8009086:	e7ea      	b.n	800905e <_dtoa_r+0x69e>
 8009088:	2200      	movs	r2, #0
 800908a:	4b9b      	ldr	r3, [pc, #620]	; (80092f8 <_dtoa_r+0x938>)
 800908c:	f7f7 fab4 	bl	80005f8 <__aeabi_dmul>
 8009090:	2200      	movs	r2, #0
 8009092:	2300      	movs	r3, #0
 8009094:	4606      	mov	r6, r0
 8009096:	460f      	mov	r7, r1
 8009098:	f7f7 fd16 	bl	8000ac8 <__aeabi_dcmpeq>
 800909c:	2800      	cmp	r0, #0
 800909e:	d09a      	beq.n	8008fd6 <_dtoa_r+0x616>
 80090a0:	e7cb      	b.n	800903a <_dtoa_r+0x67a>
 80090a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80090a4:	2a00      	cmp	r2, #0
 80090a6:	f000 808b 	beq.w	80091c0 <_dtoa_r+0x800>
 80090aa:	9a06      	ldr	r2, [sp, #24]
 80090ac:	2a01      	cmp	r2, #1
 80090ae:	dc6e      	bgt.n	800918e <_dtoa_r+0x7ce>
 80090b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	d067      	beq.n	8009186 <_dtoa_r+0x7c6>
 80090b6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090ba:	9f07      	ldr	r7, [sp, #28]
 80090bc:	9d05      	ldr	r5, [sp, #20]
 80090be:	9a05      	ldr	r2, [sp, #20]
 80090c0:	2101      	movs	r1, #1
 80090c2:	441a      	add	r2, r3
 80090c4:	4620      	mov	r0, r4
 80090c6:	9205      	str	r2, [sp, #20]
 80090c8:	4498      	add	r8, r3
 80090ca:	f000 fea2 	bl	8009e12 <__i2b>
 80090ce:	4606      	mov	r6, r0
 80090d0:	2d00      	cmp	r5, #0
 80090d2:	dd0c      	ble.n	80090ee <_dtoa_r+0x72e>
 80090d4:	f1b8 0f00 	cmp.w	r8, #0
 80090d8:	dd09      	ble.n	80090ee <_dtoa_r+0x72e>
 80090da:	4545      	cmp	r5, r8
 80090dc:	9a05      	ldr	r2, [sp, #20]
 80090de:	462b      	mov	r3, r5
 80090e0:	bfa8      	it	ge
 80090e2:	4643      	movge	r3, r8
 80090e4:	1ad2      	subs	r2, r2, r3
 80090e6:	9205      	str	r2, [sp, #20]
 80090e8:	1aed      	subs	r5, r5, r3
 80090ea:	eba8 0803 	sub.w	r8, r8, r3
 80090ee:	9b07      	ldr	r3, [sp, #28]
 80090f0:	b1eb      	cbz	r3, 800912e <_dtoa_r+0x76e>
 80090f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d067      	beq.n	80091c8 <_dtoa_r+0x808>
 80090f8:	b18f      	cbz	r7, 800911e <_dtoa_r+0x75e>
 80090fa:	4631      	mov	r1, r6
 80090fc:	463a      	mov	r2, r7
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 ff26 	bl	8009f50 <__pow5mult>
 8009104:	9a04      	ldr	r2, [sp, #16]
 8009106:	4601      	mov	r1, r0
 8009108:	4606      	mov	r6, r0
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fe8a 	bl	8009e24 <__multiply>
 8009110:	9904      	ldr	r1, [sp, #16]
 8009112:	9008      	str	r0, [sp, #32]
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fd9e 	bl	8009c56 <_Bfree>
 800911a:	9b08      	ldr	r3, [sp, #32]
 800911c:	9304      	str	r3, [sp, #16]
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	1bda      	subs	r2, r3, r7
 8009122:	d004      	beq.n	800912e <_dtoa_r+0x76e>
 8009124:	9904      	ldr	r1, [sp, #16]
 8009126:	4620      	mov	r0, r4
 8009128:	f000 ff12 	bl	8009f50 <__pow5mult>
 800912c:	9004      	str	r0, [sp, #16]
 800912e:	2101      	movs	r1, #1
 8009130:	4620      	mov	r0, r4
 8009132:	f000 fe6e 	bl	8009e12 <__i2b>
 8009136:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009138:	4607      	mov	r7, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 81d0 	beq.w	80094e0 <_dtoa_r+0xb20>
 8009140:	461a      	mov	r2, r3
 8009142:	4601      	mov	r1, r0
 8009144:	4620      	mov	r0, r4
 8009146:	f000 ff03 	bl	8009f50 <__pow5mult>
 800914a:	9b06      	ldr	r3, [sp, #24]
 800914c:	2b01      	cmp	r3, #1
 800914e:	4607      	mov	r7, r0
 8009150:	dc40      	bgt.n	80091d4 <_dtoa_r+0x814>
 8009152:	9b00      	ldr	r3, [sp, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d139      	bne.n	80091cc <_dtoa_r+0x80c>
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800915e:	2b00      	cmp	r3, #0
 8009160:	d136      	bne.n	80091d0 <_dtoa_r+0x810>
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009168:	0d1b      	lsrs	r3, r3, #20
 800916a:	051b      	lsls	r3, r3, #20
 800916c:	b12b      	cbz	r3, 800917a <_dtoa_r+0x7ba>
 800916e:	9b05      	ldr	r3, [sp, #20]
 8009170:	3301      	adds	r3, #1
 8009172:	9305      	str	r3, [sp, #20]
 8009174:	f108 0801 	add.w	r8, r8, #1
 8009178:	2301      	movs	r3, #1
 800917a:	9307      	str	r3, [sp, #28]
 800917c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800917e:	2b00      	cmp	r3, #0
 8009180:	d12a      	bne.n	80091d8 <_dtoa_r+0x818>
 8009182:	2001      	movs	r0, #1
 8009184:	e030      	b.n	80091e8 <_dtoa_r+0x828>
 8009186:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009188:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800918c:	e795      	b.n	80090ba <_dtoa_r+0x6fa>
 800918e:	9b07      	ldr	r3, [sp, #28]
 8009190:	f109 37ff 	add.w	r7, r9, #4294967295
 8009194:	42bb      	cmp	r3, r7
 8009196:	bfbf      	itttt	lt
 8009198:	9b07      	ldrlt	r3, [sp, #28]
 800919a:	9707      	strlt	r7, [sp, #28]
 800919c:	1afa      	sublt	r2, r7, r3
 800919e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80091a0:	bfbb      	ittet	lt
 80091a2:	189b      	addlt	r3, r3, r2
 80091a4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80091a6:	1bdf      	subge	r7, r3, r7
 80091a8:	2700      	movlt	r7, #0
 80091aa:	f1b9 0f00 	cmp.w	r9, #0
 80091ae:	bfb5      	itete	lt
 80091b0:	9b05      	ldrlt	r3, [sp, #20]
 80091b2:	9d05      	ldrge	r5, [sp, #20]
 80091b4:	eba3 0509 	sublt.w	r5, r3, r9
 80091b8:	464b      	movge	r3, r9
 80091ba:	bfb8      	it	lt
 80091bc:	2300      	movlt	r3, #0
 80091be:	e77e      	b.n	80090be <_dtoa_r+0x6fe>
 80091c0:	9f07      	ldr	r7, [sp, #28]
 80091c2:	9d05      	ldr	r5, [sp, #20]
 80091c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80091c6:	e783      	b.n	80090d0 <_dtoa_r+0x710>
 80091c8:	9a07      	ldr	r2, [sp, #28]
 80091ca:	e7ab      	b.n	8009124 <_dtoa_r+0x764>
 80091cc:	2300      	movs	r3, #0
 80091ce:	e7d4      	b.n	800917a <_dtoa_r+0x7ba>
 80091d0:	9b00      	ldr	r3, [sp, #0]
 80091d2:	e7d2      	b.n	800917a <_dtoa_r+0x7ba>
 80091d4:	2300      	movs	r3, #0
 80091d6:	9307      	str	r3, [sp, #28]
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80091de:	6918      	ldr	r0, [r3, #16]
 80091e0:	f000 fdc9 	bl	8009d76 <__hi0bits>
 80091e4:	f1c0 0020 	rsb	r0, r0, #32
 80091e8:	4440      	add	r0, r8
 80091ea:	f010 001f 	ands.w	r0, r0, #31
 80091ee:	d047      	beq.n	8009280 <_dtoa_r+0x8c0>
 80091f0:	f1c0 0320 	rsb	r3, r0, #32
 80091f4:	2b04      	cmp	r3, #4
 80091f6:	dd3b      	ble.n	8009270 <_dtoa_r+0x8b0>
 80091f8:	9b05      	ldr	r3, [sp, #20]
 80091fa:	f1c0 001c 	rsb	r0, r0, #28
 80091fe:	4403      	add	r3, r0
 8009200:	9305      	str	r3, [sp, #20]
 8009202:	4405      	add	r5, r0
 8009204:	4480      	add	r8, r0
 8009206:	9b05      	ldr	r3, [sp, #20]
 8009208:	2b00      	cmp	r3, #0
 800920a:	dd05      	ble.n	8009218 <_dtoa_r+0x858>
 800920c:	461a      	mov	r2, r3
 800920e:	9904      	ldr	r1, [sp, #16]
 8009210:	4620      	mov	r0, r4
 8009212:	f000 feeb 	bl	8009fec <__lshift>
 8009216:	9004      	str	r0, [sp, #16]
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	dd05      	ble.n	800922a <_dtoa_r+0x86a>
 800921e:	4639      	mov	r1, r7
 8009220:	4642      	mov	r2, r8
 8009222:	4620      	mov	r0, r4
 8009224:	f000 fee2 	bl	8009fec <__lshift>
 8009228:	4607      	mov	r7, r0
 800922a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800922c:	b353      	cbz	r3, 8009284 <_dtoa_r+0x8c4>
 800922e:	4639      	mov	r1, r7
 8009230:	9804      	ldr	r0, [sp, #16]
 8009232:	f000 ff2f 	bl	800a094 <__mcmp>
 8009236:	2800      	cmp	r0, #0
 8009238:	da24      	bge.n	8009284 <_dtoa_r+0x8c4>
 800923a:	2300      	movs	r3, #0
 800923c:	220a      	movs	r2, #10
 800923e:	9904      	ldr	r1, [sp, #16]
 8009240:	4620      	mov	r0, r4
 8009242:	f000 fd1f 	bl	8009c84 <__multadd>
 8009246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009248:	9004      	str	r0, [sp, #16]
 800924a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 814d 	beq.w	80094ee <_dtoa_r+0xb2e>
 8009254:	2300      	movs	r3, #0
 8009256:	4631      	mov	r1, r6
 8009258:	220a      	movs	r2, #10
 800925a:	4620      	mov	r0, r4
 800925c:	f000 fd12 	bl	8009c84 <__multadd>
 8009260:	9b02      	ldr	r3, [sp, #8]
 8009262:	2b00      	cmp	r3, #0
 8009264:	4606      	mov	r6, r0
 8009266:	dc4f      	bgt.n	8009308 <_dtoa_r+0x948>
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	2b02      	cmp	r3, #2
 800926c:	dd4c      	ble.n	8009308 <_dtoa_r+0x948>
 800926e:	e011      	b.n	8009294 <_dtoa_r+0x8d4>
 8009270:	d0c9      	beq.n	8009206 <_dtoa_r+0x846>
 8009272:	9a05      	ldr	r2, [sp, #20]
 8009274:	331c      	adds	r3, #28
 8009276:	441a      	add	r2, r3
 8009278:	9205      	str	r2, [sp, #20]
 800927a:	441d      	add	r5, r3
 800927c:	4498      	add	r8, r3
 800927e:	e7c2      	b.n	8009206 <_dtoa_r+0x846>
 8009280:	4603      	mov	r3, r0
 8009282:	e7f6      	b.n	8009272 <_dtoa_r+0x8b2>
 8009284:	f1b9 0f00 	cmp.w	r9, #0
 8009288:	dc38      	bgt.n	80092fc <_dtoa_r+0x93c>
 800928a:	9b06      	ldr	r3, [sp, #24]
 800928c:	2b02      	cmp	r3, #2
 800928e:	dd35      	ble.n	80092fc <_dtoa_r+0x93c>
 8009290:	f8cd 9008 	str.w	r9, [sp, #8]
 8009294:	9b02      	ldr	r3, [sp, #8]
 8009296:	b963      	cbnz	r3, 80092b2 <_dtoa_r+0x8f2>
 8009298:	4639      	mov	r1, r7
 800929a:	2205      	movs	r2, #5
 800929c:	4620      	mov	r0, r4
 800929e:	f000 fcf1 	bl	8009c84 <__multadd>
 80092a2:	4601      	mov	r1, r0
 80092a4:	4607      	mov	r7, r0
 80092a6:	9804      	ldr	r0, [sp, #16]
 80092a8:	f000 fef4 	bl	800a094 <__mcmp>
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f73f adcc 	bgt.w	8008e4a <_dtoa_r+0x48a>
 80092b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092b4:	465d      	mov	r5, fp
 80092b6:	ea6f 0a03 	mvn.w	sl, r3
 80092ba:	f04f 0900 	mov.w	r9, #0
 80092be:	4639      	mov	r1, r7
 80092c0:	4620      	mov	r0, r4
 80092c2:	f000 fcc8 	bl	8009c56 <_Bfree>
 80092c6:	2e00      	cmp	r6, #0
 80092c8:	f43f aeb7 	beq.w	800903a <_dtoa_r+0x67a>
 80092cc:	f1b9 0f00 	cmp.w	r9, #0
 80092d0:	d005      	beq.n	80092de <_dtoa_r+0x91e>
 80092d2:	45b1      	cmp	r9, r6
 80092d4:	d003      	beq.n	80092de <_dtoa_r+0x91e>
 80092d6:	4649      	mov	r1, r9
 80092d8:	4620      	mov	r0, r4
 80092da:	f000 fcbc 	bl	8009c56 <_Bfree>
 80092de:	4631      	mov	r1, r6
 80092e0:	4620      	mov	r0, r4
 80092e2:	f000 fcb8 	bl	8009c56 <_Bfree>
 80092e6:	e6a8      	b.n	800903a <_dtoa_r+0x67a>
 80092e8:	2700      	movs	r7, #0
 80092ea:	463e      	mov	r6, r7
 80092ec:	e7e1      	b.n	80092b2 <_dtoa_r+0x8f2>
 80092ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80092f2:	463e      	mov	r6, r7
 80092f4:	e5a9      	b.n	8008e4a <_dtoa_r+0x48a>
 80092f6:	bf00      	nop
 80092f8:	40240000 	.word	0x40240000
 80092fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092fe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80fa 	beq.w	80094fc <_dtoa_r+0xb3c>
 8009308:	2d00      	cmp	r5, #0
 800930a:	dd05      	ble.n	8009318 <_dtoa_r+0x958>
 800930c:	4631      	mov	r1, r6
 800930e:	462a      	mov	r2, r5
 8009310:	4620      	mov	r0, r4
 8009312:	f000 fe6b 	bl	8009fec <__lshift>
 8009316:	4606      	mov	r6, r0
 8009318:	9b07      	ldr	r3, [sp, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d04c      	beq.n	80093b8 <_dtoa_r+0x9f8>
 800931e:	6871      	ldr	r1, [r6, #4]
 8009320:	4620      	mov	r0, r4
 8009322:	f000 fc64 	bl	8009bee <_Balloc>
 8009326:	6932      	ldr	r2, [r6, #16]
 8009328:	3202      	adds	r2, #2
 800932a:	4605      	mov	r5, r0
 800932c:	0092      	lsls	r2, r2, #2
 800932e:	f106 010c 	add.w	r1, r6, #12
 8009332:	300c      	adds	r0, #12
 8009334:	f000 fc50 	bl	8009bd8 <memcpy>
 8009338:	2201      	movs	r2, #1
 800933a:	4629      	mov	r1, r5
 800933c:	4620      	mov	r0, r4
 800933e:	f000 fe55 	bl	8009fec <__lshift>
 8009342:	9b00      	ldr	r3, [sp, #0]
 8009344:	f8cd b014 	str.w	fp, [sp, #20]
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	46b1      	mov	r9, r6
 800934e:	9307      	str	r3, [sp, #28]
 8009350:	4606      	mov	r6, r0
 8009352:	4639      	mov	r1, r7
 8009354:	9804      	ldr	r0, [sp, #16]
 8009356:	f7ff faa5 	bl	80088a4 <quorem>
 800935a:	4649      	mov	r1, r9
 800935c:	4605      	mov	r5, r0
 800935e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009362:	9804      	ldr	r0, [sp, #16]
 8009364:	f000 fe96 	bl	800a094 <__mcmp>
 8009368:	4632      	mov	r2, r6
 800936a:	9000      	str	r0, [sp, #0]
 800936c:	4639      	mov	r1, r7
 800936e:	4620      	mov	r0, r4
 8009370:	f000 feaa 	bl	800a0c8 <__mdiff>
 8009374:	68c3      	ldr	r3, [r0, #12]
 8009376:	4602      	mov	r2, r0
 8009378:	bb03      	cbnz	r3, 80093bc <_dtoa_r+0x9fc>
 800937a:	4601      	mov	r1, r0
 800937c:	9008      	str	r0, [sp, #32]
 800937e:	9804      	ldr	r0, [sp, #16]
 8009380:	f000 fe88 	bl	800a094 <__mcmp>
 8009384:	9a08      	ldr	r2, [sp, #32]
 8009386:	4603      	mov	r3, r0
 8009388:	4611      	mov	r1, r2
 800938a:	4620      	mov	r0, r4
 800938c:	9308      	str	r3, [sp, #32]
 800938e:	f000 fc62 	bl	8009c56 <_Bfree>
 8009392:	9b08      	ldr	r3, [sp, #32]
 8009394:	b9a3      	cbnz	r3, 80093c0 <_dtoa_r+0xa00>
 8009396:	9a06      	ldr	r2, [sp, #24]
 8009398:	b992      	cbnz	r2, 80093c0 <_dtoa_r+0xa00>
 800939a:	9a07      	ldr	r2, [sp, #28]
 800939c:	b982      	cbnz	r2, 80093c0 <_dtoa_r+0xa00>
 800939e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093a2:	d029      	beq.n	80093f8 <_dtoa_r+0xa38>
 80093a4:	9b00      	ldr	r3, [sp, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	dd01      	ble.n	80093ae <_dtoa_r+0x9ee>
 80093aa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80093ae:	9b05      	ldr	r3, [sp, #20]
 80093b0:	1c5d      	adds	r5, r3, #1
 80093b2:	f883 8000 	strb.w	r8, [r3]
 80093b6:	e782      	b.n	80092be <_dtoa_r+0x8fe>
 80093b8:	4630      	mov	r0, r6
 80093ba:	e7c2      	b.n	8009342 <_dtoa_r+0x982>
 80093bc:	2301      	movs	r3, #1
 80093be:	e7e3      	b.n	8009388 <_dtoa_r+0x9c8>
 80093c0:	9a00      	ldr	r2, [sp, #0]
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	db04      	blt.n	80093d0 <_dtoa_r+0xa10>
 80093c6:	d125      	bne.n	8009414 <_dtoa_r+0xa54>
 80093c8:	9a06      	ldr	r2, [sp, #24]
 80093ca:	bb1a      	cbnz	r2, 8009414 <_dtoa_r+0xa54>
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	bb0a      	cbnz	r2, 8009414 <_dtoa_r+0xa54>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	ddec      	ble.n	80093ae <_dtoa_r+0x9ee>
 80093d4:	2201      	movs	r2, #1
 80093d6:	9904      	ldr	r1, [sp, #16]
 80093d8:	4620      	mov	r0, r4
 80093da:	f000 fe07 	bl	8009fec <__lshift>
 80093de:	4639      	mov	r1, r7
 80093e0:	9004      	str	r0, [sp, #16]
 80093e2:	f000 fe57 	bl	800a094 <__mcmp>
 80093e6:	2800      	cmp	r0, #0
 80093e8:	dc03      	bgt.n	80093f2 <_dtoa_r+0xa32>
 80093ea:	d1e0      	bne.n	80093ae <_dtoa_r+0x9ee>
 80093ec:	f018 0f01 	tst.w	r8, #1
 80093f0:	d0dd      	beq.n	80093ae <_dtoa_r+0x9ee>
 80093f2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80093f6:	d1d8      	bne.n	80093aa <_dtoa_r+0x9ea>
 80093f8:	9b05      	ldr	r3, [sp, #20]
 80093fa:	9a05      	ldr	r2, [sp, #20]
 80093fc:	1c5d      	adds	r5, r3, #1
 80093fe:	2339      	movs	r3, #57	; 0x39
 8009400:	7013      	strb	r3, [r2, #0]
 8009402:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009406:	2b39      	cmp	r3, #57	; 0x39
 8009408:	f105 32ff 	add.w	r2, r5, #4294967295
 800940c:	d04f      	beq.n	80094ae <_dtoa_r+0xaee>
 800940e:	3301      	adds	r3, #1
 8009410:	7013      	strb	r3, [r2, #0]
 8009412:	e754      	b.n	80092be <_dtoa_r+0x8fe>
 8009414:	9a05      	ldr	r2, [sp, #20]
 8009416:	2b00      	cmp	r3, #0
 8009418:	f102 0501 	add.w	r5, r2, #1
 800941c:	dd06      	ble.n	800942c <_dtoa_r+0xa6c>
 800941e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009422:	d0e9      	beq.n	80093f8 <_dtoa_r+0xa38>
 8009424:	f108 0801 	add.w	r8, r8, #1
 8009428:	9b05      	ldr	r3, [sp, #20]
 800942a:	e7c2      	b.n	80093b2 <_dtoa_r+0x9f2>
 800942c:	9a02      	ldr	r2, [sp, #8]
 800942e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009432:	eba5 030b 	sub.w	r3, r5, fp
 8009436:	4293      	cmp	r3, r2
 8009438:	d021      	beq.n	800947e <_dtoa_r+0xabe>
 800943a:	2300      	movs	r3, #0
 800943c:	220a      	movs	r2, #10
 800943e:	9904      	ldr	r1, [sp, #16]
 8009440:	4620      	mov	r0, r4
 8009442:	f000 fc1f 	bl	8009c84 <__multadd>
 8009446:	45b1      	cmp	r9, r6
 8009448:	9004      	str	r0, [sp, #16]
 800944a:	f04f 0300 	mov.w	r3, #0
 800944e:	f04f 020a 	mov.w	r2, #10
 8009452:	4649      	mov	r1, r9
 8009454:	4620      	mov	r0, r4
 8009456:	d105      	bne.n	8009464 <_dtoa_r+0xaa4>
 8009458:	f000 fc14 	bl	8009c84 <__multadd>
 800945c:	4681      	mov	r9, r0
 800945e:	4606      	mov	r6, r0
 8009460:	9505      	str	r5, [sp, #20]
 8009462:	e776      	b.n	8009352 <_dtoa_r+0x992>
 8009464:	f000 fc0e 	bl	8009c84 <__multadd>
 8009468:	4631      	mov	r1, r6
 800946a:	4681      	mov	r9, r0
 800946c:	2300      	movs	r3, #0
 800946e:	220a      	movs	r2, #10
 8009470:	4620      	mov	r0, r4
 8009472:	f000 fc07 	bl	8009c84 <__multadd>
 8009476:	4606      	mov	r6, r0
 8009478:	e7f2      	b.n	8009460 <_dtoa_r+0xaa0>
 800947a:	f04f 0900 	mov.w	r9, #0
 800947e:	2201      	movs	r2, #1
 8009480:	9904      	ldr	r1, [sp, #16]
 8009482:	4620      	mov	r0, r4
 8009484:	f000 fdb2 	bl	8009fec <__lshift>
 8009488:	4639      	mov	r1, r7
 800948a:	9004      	str	r0, [sp, #16]
 800948c:	f000 fe02 	bl	800a094 <__mcmp>
 8009490:	2800      	cmp	r0, #0
 8009492:	dcb6      	bgt.n	8009402 <_dtoa_r+0xa42>
 8009494:	d102      	bne.n	800949c <_dtoa_r+0xadc>
 8009496:	f018 0f01 	tst.w	r8, #1
 800949a:	d1b2      	bne.n	8009402 <_dtoa_r+0xa42>
 800949c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80094a0:	2b30      	cmp	r3, #48	; 0x30
 80094a2:	f105 32ff 	add.w	r2, r5, #4294967295
 80094a6:	f47f af0a 	bne.w	80092be <_dtoa_r+0x8fe>
 80094aa:	4615      	mov	r5, r2
 80094ac:	e7f6      	b.n	800949c <_dtoa_r+0xadc>
 80094ae:	4593      	cmp	fp, r2
 80094b0:	d105      	bne.n	80094be <_dtoa_r+0xafe>
 80094b2:	2331      	movs	r3, #49	; 0x31
 80094b4:	f10a 0a01 	add.w	sl, sl, #1
 80094b8:	f88b 3000 	strb.w	r3, [fp]
 80094bc:	e6ff      	b.n	80092be <_dtoa_r+0x8fe>
 80094be:	4615      	mov	r5, r2
 80094c0:	e79f      	b.n	8009402 <_dtoa_r+0xa42>
 80094c2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009528 <_dtoa_r+0xb68>
 80094c6:	e007      	b.n	80094d8 <_dtoa_r+0xb18>
 80094c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800952c <_dtoa_r+0xb6c>
 80094ce:	b11b      	cbz	r3, 80094d8 <_dtoa_r+0xb18>
 80094d0:	f10b 0308 	add.w	r3, fp, #8
 80094d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80094d6:	6013      	str	r3, [r2, #0]
 80094d8:	4658      	mov	r0, fp
 80094da:	b017      	add	sp, #92	; 0x5c
 80094dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e0:	9b06      	ldr	r3, [sp, #24]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	f77f ae35 	ble.w	8009152 <_dtoa_r+0x792>
 80094e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094ea:	9307      	str	r3, [sp, #28]
 80094ec:	e649      	b.n	8009182 <_dtoa_r+0x7c2>
 80094ee:	9b02      	ldr	r3, [sp, #8]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	dc03      	bgt.n	80094fc <_dtoa_r+0xb3c>
 80094f4:	9b06      	ldr	r3, [sp, #24]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	f73f aecc 	bgt.w	8009294 <_dtoa_r+0x8d4>
 80094fc:	465d      	mov	r5, fp
 80094fe:	4639      	mov	r1, r7
 8009500:	9804      	ldr	r0, [sp, #16]
 8009502:	f7ff f9cf 	bl	80088a4 <quorem>
 8009506:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800950a:	f805 8b01 	strb.w	r8, [r5], #1
 800950e:	9a02      	ldr	r2, [sp, #8]
 8009510:	eba5 030b 	sub.w	r3, r5, fp
 8009514:	429a      	cmp	r2, r3
 8009516:	ddb0      	ble.n	800947a <_dtoa_r+0xaba>
 8009518:	2300      	movs	r3, #0
 800951a:	220a      	movs	r2, #10
 800951c:	9904      	ldr	r1, [sp, #16]
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fbb0 	bl	8009c84 <__multadd>
 8009524:	9004      	str	r0, [sp, #16]
 8009526:	e7ea      	b.n	80094fe <_dtoa_r+0xb3e>
 8009528:	0800aa14 	.word	0x0800aa14
 800952c:	0800aa90 	.word	0x0800aa90

08009530 <rshift>:
 8009530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009532:	6906      	ldr	r6, [r0, #16]
 8009534:	114b      	asrs	r3, r1, #5
 8009536:	429e      	cmp	r6, r3
 8009538:	f100 0414 	add.w	r4, r0, #20
 800953c:	dd30      	ble.n	80095a0 <rshift+0x70>
 800953e:	f011 011f 	ands.w	r1, r1, #31
 8009542:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009546:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800954a:	d108      	bne.n	800955e <rshift+0x2e>
 800954c:	4621      	mov	r1, r4
 800954e:	42b2      	cmp	r2, r6
 8009550:	460b      	mov	r3, r1
 8009552:	d211      	bcs.n	8009578 <rshift+0x48>
 8009554:	f852 3b04 	ldr.w	r3, [r2], #4
 8009558:	f841 3b04 	str.w	r3, [r1], #4
 800955c:	e7f7      	b.n	800954e <rshift+0x1e>
 800955e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009562:	f1c1 0c20 	rsb	ip, r1, #32
 8009566:	40cd      	lsrs	r5, r1
 8009568:	3204      	adds	r2, #4
 800956a:	4623      	mov	r3, r4
 800956c:	42b2      	cmp	r2, r6
 800956e:	4617      	mov	r7, r2
 8009570:	d30c      	bcc.n	800958c <rshift+0x5c>
 8009572:	601d      	str	r5, [r3, #0]
 8009574:	b105      	cbz	r5, 8009578 <rshift+0x48>
 8009576:	3304      	adds	r3, #4
 8009578:	1b1a      	subs	r2, r3, r4
 800957a:	42a3      	cmp	r3, r4
 800957c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009580:	bf08      	it	eq
 8009582:	2300      	moveq	r3, #0
 8009584:	6102      	str	r2, [r0, #16]
 8009586:	bf08      	it	eq
 8009588:	6143      	streq	r3, [r0, #20]
 800958a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800958c:	683f      	ldr	r7, [r7, #0]
 800958e:	fa07 f70c 	lsl.w	r7, r7, ip
 8009592:	433d      	orrs	r5, r7
 8009594:	f843 5b04 	str.w	r5, [r3], #4
 8009598:	f852 5b04 	ldr.w	r5, [r2], #4
 800959c:	40cd      	lsrs	r5, r1
 800959e:	e7e5      	b.n	800956c <rshift+0x3c>
 80095a0:	4623      	mov	r3, r4
 80095a2:	e7e9      	b.n	8009578 <rshift+0x48>

080095a4 <__hexdig_fun>:
 80095a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80095a8:	2b09      	cmp	r3, #9
 80095aa:	d802      	bhi.n	80095b2 <__hexdig_fun+0xe>
 80095ac:	3820      	subs	r0, #32
 80095ae:	b2c0      	uxtb	r0, r0
 80095b0:	4770      	bx	lr
 80095b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d801      	bhi.n	80095be <__hexdig_fun+0x1a>
 80095ba:	3847      	subs	r0, #71	; 0x47
 80095bc:	e7f7      	b.n	80095ae <__hexdig_fun+0xa>
 80095be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80095c2:	2b05      	cmp	r3, #5
 80095c4:	d801      	bhi.n	80095ca <__hexdig_fun+0x26>
 80095c6:	3827      	subs	r0, #39	; 0x27
 80095c8:	e7f1      	b.n	80095ae <__hexdig_fun+0xa>
 80095ca:	2000      	movs	r0, #0
 80095cc:	4770      	bx	lr

080095ce <__gethex>:
 80095ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d2:	b08b      	sub	sp, #44	; 0x2c
 80095d4:	468a      	mov	sl, r1
 80095d6:	9002      	str	r0, [sp, #8]
 80095d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80095da:	9306      	str	r3, [sp, #24]
 80095dc:	4690      	mov	r8, r2
 80095de:	f000 fad0 	bl	8009b82 <__localeconv_l>
 80095e2:	6803      	ldr	r3, [r0, #0]
 80095e4:	9303      	str	r3, [sp, #12]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f7f6 fdf2 	bl	80001d0 <strlen>
 80095ec:	9b03      	ldr	r3, [sp, #12]
 80095ee:	9001      	str	r0, [sp, #4]
 80095f0:	4403      	add	r3, r0
 80095f2:	f04f 0b00 	mov.w	fp, #0
 80095f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80095fa:	9307      	str	r3, [sp, #28]
 80095fc:	f8da 3000 	ldr.w	r3, [sl]
 8009600:	3302      	adds	r3, #2
 8009602:	461f      	mov	r7, r3
 8009604:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009608:	2830      	cmp	r0, #48	; 0x30
 800960a:	d06c      	beq.n	80096e6 <__gethex+0x118>
 800960c:	f7ff ffca 	bl	80095a4 <__hexdig_fun>
 8009610:	4604      	mov	r4, r0
 8009612:	2800      	cmp	r0, #0
 8009614:	d16a      	bne.n	80096ec <__gethex+0x11e>
 8009616:	9a01      	ldr	r2, [sp, #4]
 8009618:	9903      	ldr	r1, [sp, #12]
 800961a:	4638      	mov	r0, r7
 800961c:	f001 f8fe 	bl	800a81c <strncmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	d166      	bne.n	80096f2 <__gethex+0x124>
 8009624:	9b01      	ldr	r3, [sp, #4]
 8009626:	5cf8      	ldrb	r0, [r7, r3]
 8009628:	18fe      	adds	r6, r7, r3
 800962a:	f7ff ffbb 	bl	80095a4 <__hexdig_fun>
 800962e:	2800      	cmp	r0, #0
 8009630:	d062      	beq.n	80096f8 <__gethex+0x12a>
 8009632:	4633      	mov	r3, r6
 8009634:	7818      	ldrb	r0, [r3, #0]
 8009636:	2830      	cmp	r0, #48	; 0x30
 8009638:	461f      	mov	r7, r3
 800963a:	f103 0301 	add.w	r3, r3, #1
 800963e:	d0f9      	beq.n	8009634 <__gethex+0x66>
 8009640:	f7ff ffb0 	bl	80095a4 <__hexdig_fun>
 8009644:	fab0 f580 	clz	r5, r0
 8009648:	096d      	lsrs	r5, r5, #5
 800964a:	4634      	mov	r4, r6
 800964c:	f04f 0b01 	mov.w	fp, #1
 8009650:	463a      	mov	r2, r7
 8009652:	4616      	mov	r6, r2
 8009654:	3201      	adds	r2, #1
 8009656:	7830      	ldrb	r0, [r6, #0]
 8009658:	f7ff ffa4 	bl	80095a4 <__hexdig_fun>
 800965c:	2800      	cmp	r0, #0
 800965e:	d1f8      	bne.n	8009652 <__gethex+0x84>
 8009660:	9a01      	ldr	r2, [sp, #4]
 8009662:	9903      	ldr	r1, [sp, #12]
 8009664:	4630      	mov	r0, r6
 8009666:	f001 f8d9 	bl	800a81c <strncmp>
 800966a:	b950      	cbnz	r0, 8009682 <__gethex+0xb4>
 800966c:	b954      	cbnz	r4, 8009684 <__gethex+0xb6>
 800966e:	9b01      	ldr	r3, [sp, #4]
 8009670:	18f4      	adds	r4, r6, r3
 8009672:	4622      	mov	r2, r4
 8009674:	4616      	mov	r6, r2
 8009676:	3201      	adds	r2, #1
 8009678:	7830      	ldrb	r0, [r6, #0]
 800967a:	f7ff ff93 	bl	80095a4 <__hexdig_fun>
 800967e:	2800      	cmp	r0, #0
 8009680:	d1f8      	bne.n	8009674 <__gethex+0xa6>
 8009682:	b10c      	cbz	r4, 8009688 <__gethex+0xba>
 8009684:	1ba4      	subs	r4, r4, r6
 8009686:	00a4      	lsls	r4, r4, #2
 8009688:	7833      	ldrb	r3, [r6, #0]
 800968a:	2b50      	cmp	r3, #80	; 0x50
 800968c:	d001      	beq.n	8009692 <__gethex+0xc4>
 800968e:	2b70      	cmp	r3, #112	; 0x70
 8009690:	d140      	bne.n	8009714 <__gethex+0x146>
 8009692:	7873      	ldrb	r3, [r6, #1]
 8009694:	2b2b      	cmp	r3, #43	; 0x2b
 8009696:	d031      	beq.n	80096fc <__gethex+0x12e>
 8009698:	2b2d      	cmp	r3, #45	; 0x2d
 800969a:	d033      	beq.n	8009704 <__gethex+0x136>
 800969c:	1c71      	adds	r1, r6, #1
 800969e:	f04f 0900 	mov.w	r9, #0
 80096a2:	7808      	ldrb	r0, [r1, #0]
 80096a4:	f7ff ff7e 	bl	80095a4 <__hexdig_fun>
 80096a8:	1e43      	subs	r3, r0, #1
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b18      	cmp	r3, #24
 80096ae:	d831      	bhi.n	8009714 <__gethex+0x146>
 80096b0:	f1a0 0210 	sub.w	r2, r0, #16
 80096b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80096b8:	f7ff ff74 	bl	80095a4 <__hexdig_fun>
 80096bc:	1e43      	subs	r3, r0, #1
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b18      	cmp	r3, #24
 80096c2:	d922      	bls.n	800970a <__gethex+0x13c>
 80096c4:	f1b9 0f00 	cmp.w	r9, #0
 80096c8:	d000      	beq.n	80096cc <__gethex+0xfe>
 80096ca:	4252      	negs	r2, r2
 80096cc:	4414      	add	r4, r2
 80096ce:	f8ca 1000 	str.w	r1, [sl]
 80096d2:	b30d      	cbz	r5, 8009718 <__gethex+0x14a>
 80096d4:	f1bb 0f00 	cmp.w	fp, #0
 80096d8:	bf0c      	ite	eq
 80096da:	2706      	moveq	r7, #6
 80096dc:	2700      	movne	r7, #0
 80096de:	4638      	mov	r0, r7
 80096e0:	b00b      	add	sp, #44	; 0x2c
 80096e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e6:	f10b 0b01 	add.w	fp, fp, #1
 80096ea:	e78a      	b.n	8009602 <__gethex+0x34>
 80096ec:	2500      	movs	r5, #0
 80096ee:	462c      	mov	r4, r5
 80096f0:	e7ae      	b.n	8009650 <__gethex+0x82>
 80096f2:	463e      	mov	r6, r7
 80096f4:	2501      	movs	r5, #1
 80096f6:	e7c7      	b.n	8009688 <__gethex+0xba>
 80096f8:	4604      	mov	r4, r0
 80096fa:	e7fb      	b.n	80096f4 <__gethex+0x126>
 80096fc:	f04f 0900 	mov.w	r9, #0
 8009700:	1cb1      	adds	r1, r6, #2
 8009702:	e7ce      	b.n	80096a2 <__gethex+0xd4>
 8009704:	f04f 0901 	mov.w	r9, #1
 8009708:	e7fa      	b.n	8009700 <__gethex+0x132>
 800970a:	230a      	movs	r3, #10
 800970c:	fb03 0202 	mla	r2, r3, r2, r0
 8009710:	3a10      	subs	r2, #16
 8009712:	e7cf      	b.n	80096b4 <__gethex+0xe6>
 8009714:	4631      	mov	r1, r6
 8009716:	e7da      	b.n	80096ce <__gethex+0x100>
 8009718:	1bf3      	subs	r3, r6, r7
 800971a:	3b01      	subs	r3, #1
 800971c:	4629      	mov	r1, r5
 800971e:	2b07      	cmp	r3, #7
 8009720:	dc49      	bgt.n	80097b6 <__gethex+0x1e8>
 8009722:	9802      	ldr	r0, [sp, #8]
 8009724:	f000 fa63 	bl	8009bee <_Balloc>
 8009728:	9b01      	ldr	r3, [sp, #4]
 800972a:	f100 0914 	add.w	r9, r0, #20
 800972e:	f04f 0b00 	mov.w	fp, #0
 8009732:	f1c3 0301 	rsb	r3, r3, #1
 8009736:	4605      	mov	r5, r0
 8009738:	f8cd 9010 	str.w	r9, [sp, #16]
 800973c:	46da      	mov	sl, fp
 800973e:	9308      	str	r3, [sp, #32]
 8009740:	42b7      	cmp	r7, r6
 8009742:	d33b      	bcc.n	80097bc <__gethex+0x1ee>
 8009744:	9804      	ldr	r0, [sp, #16]
 8009746:	f840 ab04 	str.w	sl, [r0], #4
 800974a:	eba0 0009 	sub.w	r0, r0, r9
 800974e:	1080      	asrs	r0, r0, #2
 8009750:	6128      	str	r0, [r5, #16]
 8009752:	0147      	lsls	r7, r0, #5
 8009754:	4650      	mov	r0, sl
 8009756:	f000 fb0e 	bl	8009d76 <__hi0bits>
 800975a:	f8d8 6000 	ldr.w	r6, [r8]
 800975e:	1a3f      	subs	r7, r7, r0
 8009760:	42b7      	cmp	r7, r6
 8009762:	dd64      	ble.n	800982e <__gethex+0x260>
 8009764:	1bbf      	subs	r7, r7, r6
 8009766:	4639      	mov	r1, r7
 8009768:	4628      	mov	r0, r5
 800976a:	f000 fe1d 	bl	800a3a8 <__any_on>
 800976e:	4682      	mov	sl, r0
 8009770:	b178      	cbz	r0, 8009792 <__gethex+0x1c4>
 8009772:	1e7b      	subs	r3, r7, #1
 8009774:	1159      	asrs	r1, r3, #5
 8009776:	f003 021f 	and.w	r2, r3, #31
 800977a:	f04f 0a01 	mov.w	sl, #1
 800977e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009782:	fa0a f202 	lsl.w	r2, sl, r2
 8009786:	420a      	tst	r2, r1
 8009788:	d003      	beq.n	8009792 <__gethex+0x1c4>
 800978a:	4553      	cmp	r3, sl
 800978c:	dc46      	bgt.n	800981c <__gethex+0x24e>
 800978e:	f04f 0a02 	mov.w	sl, #2
 8009792:	4639      	mov	r1, r7
 8009794:	4628      	mov	r0, r5
 8009796:	f7ff fecb 	bl	8009530 <rshift>
 800979a:	443c      	add	r4, r7
 800979c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	da52      	bge.n	800984a <__gethex+0x27c>
 80097a4:	4629      	mov	r1, r5
 80097a6:	9802      	ldr	r0, [sp, #8]
 80097a8:	f000 fa55 	bl	8009c56 <_Bfree>
 80097ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80097ae:	2300      	movs	r3, #0
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	27a3      	movs	r7, #163	; 0xa3
 80097b4:	e793      	b.n	80096de <__gethex+0x110>
 80097b6:	3101      	adds	r1, #1
 80097b8:	105b      	asrs	r3, r3, #1
 80097ba:	e7b0      	b.n	800971e <__gethex+0x150>
 80097bc:	1e73      	subs	r3, r6, #1
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	9a07      	ldr	r2, [sp, #28]
 80097c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d018      	beq.n	80097fc <__gethex+0x22e>
 80097ca:	f1bb 0f20 	cmp.w	fp, #32
 80097ce:	d107      	bne.n	80097e0 <__gethex+0x212>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	f8c3 a000 	str.w	sl, [r3]
 80097d6:	3304      	adds	r3, #4
 80097d8:	f04f 0a00 	mov.w	sl, #0
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	46d3      	mov	fp, sl
 80097e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80097e4:	f7ff fede 	bl	80095a4 <__hexdig_fun>
 80097e8:	f000 000f 	and.w	r0, r0, #15
 80097ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80097f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80097f4:	f10b 0b04 	add.w	fp, fp, #4
 80097f8:	9b05      	ldr	r3, [sp, #20]
 80097fa:	e00d      	b.n	8009818 <__gethex+0x24a>
 80097fc:	9b05      	ldr	r3, [sp, #20]
 80097fe:	9a08      	ldr	r2, [sp, #32]
 8009800:	4413      	add	r3, r2
 8009802:	42bb      	cmp	r3, r7
 8009804:	d3e1      	bcc.n	80097ca <__gethex+0x1fc>
 8009806:	4618      	mov	r0, r3
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	9903      	ldr	r1, [sp, #12]
 800980c:	9309      	str	r3, [sp, #36]	; 0x24
 800980e:	f001 f805 	bl	800a81c <strncmp>
 8009812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009814:	2800      	cmp	r0, #0
 8009816:	d1d8      	bne.n	80097ca <__gethex+0x1fc>
 8009818:	461e      	mov	r6, r3
 800981a:	e791      	b.n	8009740 <__gethex+0x172>
 800981c:	1eb9      	subs	r1, r7, #2
 800981e:	4628      	mov	r0, r5
 8009820:	f000 fdc2 	bl	800a3a8 <__any_on>
 8009824:	2800      	cmp	r0, #0
 8009826:	d0b2      	beq.n	800978e <__gethex+0x1c0>
 8009828:	f04f 0a03 	mov.w	sl, #3
 800982c:	e7b1      	b.n	8009792 <__gethex+0x1c4>
 800982e:	da09      	bge.n	8009844 <__gethex+0x276>
 8009830:	1bf7      	subs	r7, r6, r7
 8009832:	4629      	mov	r1, r5
 8009834:	463a      	mov	r2, r7
 8009836:	9802      	ldr	r0, [sp, #8]
 8009838:	f000 fbd8 	bl	8009fec <__lshift>
 800983c:	1be4      	subs	r4, r4, r7
 800983e:	4605      	mov	r5, r0
 8009840:	f100 0914 	add.w	r9, r0, #20
 8009844:	f04f 0a00 	mov.w	sl, #0
 8009848:	e7a8      	b.n	800979c <__gethex+0x1ce>
 800984a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800984e:	42a0      	cmp	r0, r4
 8009850:	dd6a      	ble.n	8009928 <__gethex+0x35a>
 8009852:	1b04      	subs	r4, r0, r4
 8009854:	42a6      	cmp	r6, r4
 8009856:	dc2e      	bgt.n	80098b6 <__gethex+0x2e8>
 8009858:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800985c:	2b02      	cmp	r3, #2
 800985e:	d022      	beq.n	80098a6 <__gethex+0x2d8>
 8009860:	2b03      	cmp	r3, #3
 8009862:	d024      	beq.n	80098ae <__gethex+0x2e0>
 8009864:	2b01      	cmp	r3, #1
 8009866:	d115      	bne.n	8009894 <__gethex+0x2c6>
 8009868:	42a6      	cmp	r6, r4
 800986a:	d113      	bne.n	8009894 <__gethex+0x2c6>
 800986c:	2e01      	cmp	r6, #1
 800986e:	dc0b      	bgt.n	8009888 <__gethex+0x2ba>
 8009870:	9a06      	ldr	r2, [sp, #24]
 8009872:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	2301      	movs	r3, #1
 800987a:	612b      	str	r3, [r5, #16]
 800987c:	f8c9 3000 	str.w	r3, [r9]
 8009880:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009882:	2762      	movs	r7, #98	; 0x62
 8009884:	601d      	str	r5, [r3, #0]
 8009886:	e72a      	b.n	80096de <__gethex+0x110>
 8009888:	1e71      	subs	r1, r6, #1
 800988a:	4628      	mov	r0, r5
 800988c:	f000 fd8c 	bl	800a3a8 <__any_on>
 8009890:	2800      	cmp	r0, #0
 8009892:	d1ed      	bne.n	8009870 <__gethex+0x2a2>
 8009894:	4629      	mov	r1, r5
 8009896:	9802      	ldr	r0, [sp, #8]
 8009898:	f000 f9dd 	bl	8009c56 <_Bfree>
 800989c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800989e:	2300      	movs	r3, #0
 80098a0:	6013      	str	r3, [r2, #0]
 80098a2:	2750      	movs	r7, #80	; 0x50
 80098a4:	e71b      	b.n	80096de <__gethex+0x110>
 80098a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0e1      	beq.n	8009870 <__gethex+0x2a2>
 80098ac:	e7f2      	b.n	8009894 <__gethex+0x2c6>
 80098ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1dd      	bne.n	8009870 <__gethex+0x2a2>
 80098b4:	e7ee      	b.n	8009894 <__gethex+0x2c6>
 80098b6:	1e67      	subs	r7, r4, #1
 80098b8:	f1ba 0f00 	cmp.w	sl, #0
 80098bc:	d131      	bne.n	8009922 <__gethex+0x354>
 80098be:	b127      	cbz	r7, 80098ca <__gethex+0x2fc>
 80098c0:	4639      	mov	r1, r7
 80098c2:	4628      	mov	r0, r5
 80098c4:	f000 fd70 	bl	800a3a8 <__any_on>
 80098c8:	4682      	mov	sl, r0
 80098ca:	117a      	asrs	r2, r7, #5
 80098cc:	2301      	movs	r3, #1
 80098ce:	f007 071f 	and.w	r7, r7, #31
 80098d2:	fa03 f707 	lsl.w	r7, r3, r7
 80098d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80098da:	4621      	mov	r1, r4
 80098dc:	421f      	tst	r7, r3
 80098de:	4628      	mov	r0, r5
 80098e0:	bf18      	it	ne
 80098e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80098e6:	1b36      	subs	r6, r6, r4
 80098e8:	f7ff fe22 	bl	8009530 <rshift>
 80098ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80098f0:	2702      	movs	r7, #2
 80098f2:	f1ba 0f00 	cmp.w	sl, #0
 80098f6:	d048      	beq.n	800998a <__gethex+0x3bc>
 80098f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d015      	beq.n	800992c <__gethex+0x35e>
 8009900:	2b03      	cmp	r3, #3
 8009902:	d017      	beq.n	8009934 <__gethex+0x366>
 8009904:	2b01      	cmp	r3, #1
 8009906:	d109      	bne.n	800991c <__gethex+0x34e>
 8009908:	f01a 0f02 	tst.w	sl, #2
 800990c:	d006      	beq.n	800991c <__gethex+0x34e>
 800990e:	f8d9 3000 	ldr.w	r3, [r9]
 8009912:	ea4a 0a03 	orr.w	sl, sl, r3
 8009916:	f01a 0f01 	tst.w	sl, #1
 800991a:	d10e      	bne.n	800993a <__gethex+0x36c>
 800991c:	f047 0710 	orr.w	r7, r7, #16
 8009920:	e033      	b.n	800998a <__gethex+0x3bc>
 8009922:	f04f 0a01 	mov.w	sl, #1
 8009926:	e7d0      	b.n	80098ca <__gethex+0x2fc>
 8009928:	2701      	movs	r7, #1
 800992a:	e7e2      	b.n	80098f2 <__gethex+0x324>
 800992c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800992e:	f1c3 0301 	rsb	r3, r3, #1
 8009932:	9315      	str	r3, [sp, #84]	; 0x54
 8009934:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009936:	2b00      	cmp	r3, #0
 8009938:	d0f0      	beq.n	800991c <__gethex+0x34e>
 800993a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800993e:	f105 0314 	add.w	r3, r5, #20
 8009942:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009946:	eb03 010a 	add.w	r1, r3, sl
 800994a:	f04f 0c00 	mov.w	ip, #0
 800994e:	4618      	mov	r0, r3
 8009950:	f853 2b04 	ldr.w	r2, [r3], #4
 8009954:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009958:	d01c      	beq.n	8009994 <__gethex+0x3c6>
 800995a:	3201      	adds	r2, #1
 800995c:	6002      	str	r2, [r0, #0]
 800995e:	2f02      	cmp	r7, #2
 8009960:	f105 0314 	add.w	r3, r5, #20
 8009964:	d138      	bne.n	80099d8 <__gethex+0x40a>
 8009966:	f8d8 2000 	ldr.w	r2, [r8]
 800996a:	3a01      	subs	r2, #1
 800996c:	42b2      	cmp	r2, r6
 800996e:	d10a      	bne.n	8009986 <__gethex+0x3b8>
 8009970:	1171      	asrs	r1, r6, #5
 8009972:	2201      	movs	r2, #1
 8009974:	f006 061f 	and.w	r6, r6, #31
 8009978:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800997c:	fa02 f606 	lsl.w	r6, r2, r6
 8009980:	421e      	tst	r6, r3
 8009982:	bf18      	it	ne
 8009984:	4617      	movne	r7, r2
 8009986:	f047 0720 	orr.w	r7, r7, #32
 800998a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800998c:	601d      	str	r5, [r3, #0]
 800998e:	9b06      	ldr	r3, [sp, #24]
 8009990:	601c      	str	r4, [r3, #0]
 8009992:	e6a4      	b.n	80096de <__gethex+0x110>
 8009994:	4299      	cmp	r1, r3
 8009996:	f843 cc04 	str.w	ip, [r3, #-4]
 800999a:	d8d8      	bhi.n	800994e <__gethex+0x380>
 800999c:	68ab      	ldr	r3, [r5, #8]
 800999e:	4599      	cmp	r9, r3
 80099a0:	db12      	blt.n	80099c8 <__gethex+0x3fa>
 80099a2:	6869      	ldr	r1, [r5, #4]
 80099a4:	9802      	ldr	r0, [sp, #8]
 80099a6:	3101      	adds	r1, #1
 80099a8:	f000 f921 	bl	8009bee <_Balloc>
 80099ac:	692a      	ldr	r2, [r5, #16]
 80099ae:	3202      	adds	r2, #2
 80099b0:	f105 010c 	add.w	r1, r5, #12
 80099b4:	4683      	mov	fp, r0
 80099b6:	0092      	lsls	r2, r2, #2
 80099b8:	300c      	adds	r0, #12
 80099ba:	f000 f90d 	bl	8009bd8 <memcpy>
 80099be:	4629      	mov	r1, r5
 80099c0:	9802      	ldr	r0, [sp, #8]
 80099c2:	f000 f948 	bl	8009c56 <_Bfree>
 80099c6:	465d      	mov	r5, fp
 80099c8:	692b      	ldr	r3, [r5, #16]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80099d0:	612a      	str	r2, [r5, #16]
 80099d2:	2201      	movs	r2, #1
 80099d4:	615a      	str	r2, [r3, #20]
 80099d6:	e7c2      	b.n	800995e <__gethex+0x390>
 80099d8:	692a      	ldr	r2, [r5, #16]
 80099da:	454a      	cmp	r2, r9
 80099dc:	dd0b      	ble.n	80099f6 <__gethex+0x428>
 80099de:	2101      	movs	r1, #1
 80099e0:	4628      	mov	r0, r5
 80099e2:	f7ff fda5 	bl	8009530 <rshift>
 80099e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80099ea:	3401      	adds	r4, #1
 80099ec:	42a3      	cmp	r3, r4
 80099ee:	f6ff aed9 	blt.w	80097a4 <__gethex+0x1d6>
 80099f2:	2701      	movs	r7, #1
 80099f4:	e7c7      	b.n	8009986 <__gethex+0x3b8>
 80099f6:	f016 061f 	ands.w	r6, r6, #31
 80099fa:	d0fa      	beq.n	80099f2 <__gethex+0x424>
 80099fc:	449a      	add	sl, r3
 80099fe:	f1c6 0620 	rsb	r6, r6, #32
 8009a02:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009a06:	f000 f9b6 	bl	8009d76 <__hi0bits>
 8009a0a:	42b0      	cmp	r0, r6
 8009a0c:	dbe7      	blt.n	80099de <__gethex+0x410>
 8009a0e:	e7f0      	b.n	80099f2 <__gethex+0x424>

08009a10 <L_shift>:
 8009a10:	f1c2 0208 	rsb	r2, r2, #8
 8009a14:	0092      	lsls	r2, r2, #2
 8009a16:	b570      	push	{r4, r5, r6, lr}
 8009a18:	f1c2 0620 	rsb	r6, r2, #32
 8009a1c:	6843      	ldr	r3, [r0, #4]
 8009a1e:	6804      	ldr	r4, [r0, #0]
 8009a20:	fa03 f506 	lsl.w	r5, r3, r6
 8009a24:	432c      	orrs	r4, r5
 8009a26:	40d3      	lsrs	r3, r2
 8009a28:	6004      	str	r4, [r0, #0]
 8009a2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009a2e:	4288      	cmp	r0, r1
 8009a30:	d3f4      	bcc.n	8009a1c <L_shift+0xc>
 8009a32:	bd70      	pop	{r4, r5, r6, pc}

08009a34 <__match>:
 8009a34:	b530      	push	{r4, r5, lr}
 8009a36:	6803      	ldr	r3, [r0, #0]
 8009a38:	3301      	adds	r3, #1
 8009a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a3e:	b914      	cbnz	r4, 8009a46 <__match+0x12>
 8009a40:	6003      	str	r3, [r0, #0]
 8009a42:	2001      	movs	r0, #1
 8009a44:	bd30      	pop	{r4, r5, pc}
 8009a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009a4e:	2d19      	cmp	r5, #25
 8009a50:	bf98      	it	ls
 8009a52:	3220      	addls	r2, #32
 8009a54:	42a2      	cmp	r2, r4
 8009a56:	d0f0      	beq.n	8009a3a <__match+0x6>
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7f3      	b.n	8009a44 <__match+0x10>

08009a5c <__hexnan>:
 8009a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	680b      	ldr	r3, [r1, #0]
 8009a62:	6801      	ldr	r1, [r0, #0]
 8009a64:	115f      	asrs	r7, r3, #5
 8009a66:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8009a6a:	f013 031f 	ands.w	r3, r3, #31
 8009a6e:	b087      	sub	sp, #28
 8009a70:	bf18      	it	ne
 8009a72:	3704      	addne	r7, #4
 8009a74:	2500      	movs	r5, #0
 8009a76:	1f3e      	subs	r6, r7, #4
 8009a78:	4682      	mov	sl, r0
 8009a7a:	4690      	mov	r8, r2
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	f847 5c04 	str.w	r5, [r7, #-4]
 8009a82:	46b1      	mov	r9, r6
 8009a84:	4634      	mov	r4, r6
 8009a86:	9502      	str	r5, [sp, #8]
 8009a88:	46ab      	mov	fp, r5
 8009a8a:	784a      	ldrb	r2, [r1, #1]
 8009a8c:	1c4b      	adds	r3, r1, #1
 8009a8e:	9303      	str	r3, [sp, #12]
 8009a90:	b342      	cbz	r2, 8009ae4 <__hexnan+0x88>
 8009a92:	4610      	mov	r0, r2
 8009a94:	9105      	str	r1, [sp, #20]
 8009a96:	9204      	str	r2, [sp, #16]
 8009a98:	f7ff fd84 	bl	80095a4 <__hexdig_fun>
 8009a9c:	2800      	cmp	r0, #0
 8009a9e:	d143      	bne.n	8009b28 <__hexnan+0xcc>
 8009aa0:	9a04      	ldr	r2, [sp, #16]
 8009aa2:	9905      	ldr	r1, [sp, #20]
 8009aa4:	2a20      	cmp	r2, #32
 8009aa6:	d818      	bhi.n	8009ada <__hexnan+0x7e>
 8009aa8:	9b02      	ldr	r3, [sp, #8]
 8009aaa:	459b      	cmp	fp, r3
 8009aac:	dd13      	ble.n	8009ad6 <__hexnan+0x7a>
 8009aae:	454c      	cmp	r4, r9
 8009ab0:	d206      	bcs.n	8009ac0 <__hexnan+0x64>
 8009ab2:	2d07      	cmp	r5, #7
 8009ab4:	dc04      	bgt.n	8009ac0 <__hexnan+0x64>
 8009ab6:	462a      	mov	r2, r5
 8009ab8:	4649      	mov	r1, r9
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff ffa8 	bl	8009a10 <L_shift>
 8009ac0:	4544      	cmp	r4, r8
 8009ac2:	d944      	bls.n	8009b4e <__hexnan+0xf2>
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	f1a4 0904 	sub.w	r9, r4, #4
 8009aca:	f844 3c04 	str.w	r3, [r4, #-4]
 8009ace:	f8cd b008 	str.w	fp, [sp, #8]
 8009ad2:	464c      	mov	r4, r9
 8009ad4:	461d      	mov	r5, r3
 8009ad6:	9903      	ldr	r1, [sp, #12]
 8009ad8:	e7d7      	b.n	8009a8a <__hexnan+0x2e>
 8009ada:	2a29      	cmp	r2, #41	; 0x29
 8009adc:	d14a      	bne.n	8009b74 <__hexnan+0x118>
 8009ade:	3102      	adds	r1, #2
 8009ae0:	f8ca 1000 	str.w	r1, [sl]
 8009ae4:	f1bb 0f00 	cmp.w	fp, #0
 8009ae8:	d044      	beq.n	8009b74 <__hexnan+0x118>
 8009aea:	454c      	cmp	r4, r9
 8009aec:	d206      	bcs.n	8009afc <__hexnan+0xa0>
 8009aee:	2d07      	cmp	r5, #7
 8009af0:	dc04      	bgt.n	8009afc <__hexnan+0xa0>
 8009af2:	462a      	mov	r2, r5
 8009af4:	4649      	mov	r1, r9
 8009af6:	4620      	mov	r0, r4
 8009af8:	f7ff ff8a 	bl	8009a10 <L_shift>
 8009afc:	4544      	cmp	r4, r8
 8009afe:	d928      	bls.n	8009b52 <__hexnan+0xf6>
 8009b00:	4643      	mov	r3, r8
 8009b02:	f854 2b04 	ldr.w	r2, [r4], #4
 8009b06:	f843 2b04 	str.w	r2, [r3], #4
 8009b0a:	42a6      	cmp	r6, r4
 8009b0c:	d2f9      	bcs.n	8009b02 <__hexnan+0xa6>
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f843 2b04 	str.w	r2, [r3], #4
 8009b14:	429e      	cmp	r6, r3
 8009b16:	d2fb      	bcs.n	8009b10 <__hexnan+0xb4>
 8009b18:	6833      	ldr	r3, [r6, #0]
 8009b1a:	b91b      	cbnz	r3, 8009b24 <__hexnan+0xc8>
 8009b1c:	4546      	cmp	r6, r8
 8009b1e:	d127      	bne.n	8009b70 <__hexnan+0x114>
 8009b20:	2301      	movs	r3, #1
 8009b22:	6033      	str	r3, [r6, #0]
 8009b24:	2005      	movs	r0, #5
 8009b26:	e026      	b.n	8009b76 <__hexnan+0x11a>
 8009b28:	3501      	adds	r5, #1
 8009b2a:	2d08      	cmp	r5, #8
 8009b2c:	f10b 0b01 	add.w	fp, fp, #1
 8009b30:	dd06      	ble.n	8009b40 <__hexnan+0xe4>
 8009b32:	4544      	cmp	r4, r8
 8009b34:	d9cf      	bls.n	8009ad6 <__hexnan+0x7a>
 8009b36:	2300      	movs	r3, #0
 8009b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b3c:	2501      	movs	r5, #1
 8009b3e:	3c04      	subs	r4, #4
 8009b40:	6822      	ldr	r2, [r4, #0]
 8009b42:	f000 000f 	and.w	r0, r0, #15
 8009b46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009b4a:	6020      	str	r0, [r4, #0]
 8009b4c:	e7c3      	b.n	8009ad6 <__hexnan+0x7a>
 8009b4e:	2508      	movs	r5, #8
 8009b50:	e7c1      	b.n	8009ad6 <__hexnan+0x7a>
 8009b52:	9b01      	ldr	r3, [sp, #4]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d0df      	beq.n	8009b18 <__hexnan+0xbc>
 8009b58:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5c:	f1c3 0320 	rsb	r3, r3, #32
 8009b60:	fa22 f303 	lsr.w	r3, r2, r3
 8009b64:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009b68:	401a      	ands	r2, r3
 8009b6a:	f847 2c04 	str.w	r2, [r7, #-4]
 8009b6e:	e7d3      	b.n	8009b18 <__hexnan+0xbc>
 8009b70:	3e04      	subs	r6, #4
 8009b72:	e7d1      	b.n	8009b18 <__hexnan+0xbc>
 8009b74:	2004      	movs	r0, #4
 8009b76:	b007      	add	sp, #28
 8009b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b7c <__locale_ctype_ptr_l>:
 8009b7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b80:	4770      	bx	lr

08009b82 <__localeconv_l>:
 8009b82:	30f0      	adds	r0, #240	; 0xf0
 8009b84:	4770      	bx	lr
	...

08009b88 <_localeconv_r>:
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <_localeconv_r+0x14>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6a18      	ldr	r0, [r3, #32]
 8009b8e:	4b04      	ldr	r3, [pc, #16]	; (8009ba0 <_localeconv_r+0x18>)
 8009b90:	2800      	cmp	r0, #0
 8009b92:	bf08      	it	eq
 8009b94:	4618      	moveq	r0, r3
 8009b96:	30f0      	adds	r0, #240	; 0xf0
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	2000000c 	.word	0x2000000c
 8009ba0:	20000070 	.word	0x20000070

08009ba4 <malloc>:
 8009ba4:	4b02      	ldr	r3, [pc, #8]	; (8009bb0 <malloc+0xc>)
 8009ba6:	4601      	mov	r1, r0
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	f000 bc7b 	b.w	800a4a4 <_malloc_r>
 8009bae:	bf00      	nop
 8009bb0:	2000000c 	.word	0x2000000c

08009bb4 <__ascii_mbtowc>:
 8009bb4:	b082      	sub	sp, #8
 8009bb6:	b901      	cbnz	r1, 8009bba <__ascii_mbtowc+0x6>
 8009bb8:	a901      	add	r1, sp, #4
 8009bba:	b142      	cbz	r2, 8009bce <__ascii_mbtowc+0x1a>
 8009bbc:	b14b      	cbz	r3, 8009bd2 <__ascii_mbtowc+0x1e>
 8009bbe:	7813      	ldrb	r3, [r2, #0]
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	7812      	ldrb	r2, [r2, #0]
 8009bc4:	1c10      	adds	r0, r2, #0
 8009bc6:	bf18      	it	ne
 8009bc8:	2001      	movne	r0, #1
 8009bca:	b002      	add	sp, #8
 8009bcc:	4770      	bx	lr
 8009bce:	4610      	mov	r0, r2
 8009bd0:	e7fb      	b.n	8009bca <__ascii_mbtowc+0x16>
 8009bd2:	f06f 0001 	mvn.w	r0, #1
 8009bd6:	e7f8      	b.n	8009bca <__ascii_mbtowc+0x16>

08009bd8 <memcpy>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	1e43      	subs	r3, r0, #1
 8009bdc:	440a      	add	r2, r1
 8009bde:	4291      	cmp	r1, r2
 8009be0:	d100      	bne.n	8009be4 <memcpy+0xc>
 8009be2:	bd10      	pop	{r4, pc}
 8009be4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009be8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bec:	e7f7      	b.n	8009bde <memcpy+0x6>

08009bee <_Balloc>:
 8009bee:	b570      	push	{r4, r5, r6, lr}
 8009bf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	460e      	mov	r6, r1
 8009bf6:	b93d      	cbnz	r5, 8009c08 <_Balloc+0x1a>
 8009bf8:	2010      	movs	r0, #16
 8009bfa:	f7ff ffd3 	bl	8009ba4 <malloc>
 8009bfe:	6260      	str	r0, [r4, #36]	; 0x24
 8009c00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c04:	6005      	str	r5, [r0, #0]
 8009c06:	60c5      	str	r5, [r0, #12]
 8009c08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009c0a:	68eb      	ldr	r3, [r5, #12]
 8009c0c:	b183      	cbz	r3, 8009c30 <_Balloc+0x42>
 8009c0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c10:	68db      	ldr	r3, [r3, #12]
 8009c12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009c16:	b9b8      	cbnz	r0, 8009c48 <_Balloc+0x5a>
 8009c18:	2101      	movs	r1, #1
 8009c1a:	fa01 f506 	lsl.w	r5, r1, r6
 8009c1e:	1d6a      	adds	r2, r5, #5
 8009c20:	0092      	lsls	r2, r2, #2
 8009c22:	4620      	mov	r0, r4
 8009c24:	f000 fbe1 	bl	800a3ea <_calloc_r>
 8009c28:	b160      	cbz	r0, 8009c44 <_Balloc+0x56>
 8009c2a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009c2e:	e00e      	b.n	8009c4e <_Balloc+0x60>
 8009c30:	2221      	movs	r2, #33	; 0x21
 8009c32:	2104      	movs	r1, #4
 8009c34:	4620      	mov	r0, r4
 8009c36:	f000 fbd8 	bl	800a3ea <_calloc_r>
 8009c3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c3c:	60e8      	str	r0, [r5, #12]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e4      	bne.n	8009c0e <_Balloc+0x20>
 8009c44:	2000      	movs	r0, #0
 8009c46:	bd70      	pop	{r4, r5, r6, pc}
 8009c48:	6802      	ldr	r2, [r0, #0]
 8009c4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009c54:	e7f7      	b.n	8009c46 <_Balloc+0x58>

08009c56 <_Bfree>:
 8009c56:	b570      	push	{r4, r5, r6, lr}
 8009c58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460d      	mov	r5, r1
 8009c5e:	b93c      	cbnz	r4, 8009c70 <_Bfree+0x1a>
 8009c60:	2010      	movs	r0, #16
 8009c62:	f7ff ff9f 	bl	8009ba4 <malloc>
 8009c66:	6270      	str	r0, [r6, #36]	; 0x24
 8009c68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c6c:	6004      	str	r4, [r0, #0]
 8009c6e:	60c4      	str	r4, [r0, #12]
 8009c70:	b13d      	cbz	r5, 8009c82 <_Bfree+0x2c>
 8009c72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009c74:	686a      	ldr	r2, [r5, #4]
 8009c76:	68db      	ldr	r3, [r3, #12]
 8009c78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c7c:	6029      	str	r1, [r5, #0]
 8009c7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009c82:	bd70      	pop	{r4, r5, r6, pc}

08009c84 <__multadd>:
 8009c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c88:	690d      	ldr	r5, [r1, #16]
 8009c8a:	461f      	mov	r7, r3
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460c      	mov	r4, r1
 8009c90:	f101 0c14 	add.w	ip, r1, #20
 8009c94:	2300      	movs	r3, #0
 8009c96:	f8dc 0000 	ldr.w	r0, [ip]
 8009c9a:	b281      	uxth	r1, r0
 8009c9c:	fb02 7101 	mla	r1, r2, r1, r7
 8009ca0:	0c0f      	lsrs	r7, r1, #16
 8009ca2:	0c00      	lsrs	r0, r0, #16
 8009ca4:	fb02 7000 	mla	r0, r2, r0, r7
 8009ca8:	b289      	uxth	r1, r1
 8009caa:	3301      	adds	r3, #1
 8009cac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009cb0:	429d      	cmp	r5, r3
 8009cb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009cb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009cba:	dcec      	bgt.n	8009c96 <__multadd+0x12>
 8009cbc:	b1d7      	cbz	r7, 8009cf4 <__multadd+0x70>
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	42ab      	cmp	r3, r5
 8009cc2:	dc12      	bgt.n	8009cea <__multadd+0x66>
 8009cc4:	6861      	ldr	r1, [r4, #4]
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	3101      	adds	r1, #1
 8009cca:	f7ff ff90 	bl	8009bee <_Balloc>
 8009cce:	6922      	ldr	r2, [r4, #16]
 8009cd0:	3202      	adds	r2, #2
 8009cd2:	f104 010c 	add.w	r1, r4, #12
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	0092      	lsls	r2, r2, #2
 8009cda:	300c      	adds	r0, #12
 8009cdc:	f7ff ff7c 	bl	8009bd8 <memcpy>
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7ff ffb7 	bl	8009c56 <_Bfree>
 8009ce8:	4644      	mov	r4, r8
 8009cea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009cee:	3501      	adds	r5, #1
 8009cf0:	615f      	str	r7, [r3, #20]
 8009cf2:	6125      	str	r5, [r4, #16]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009cfa <__s2b>:
 8009cfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cfe:	460c      	mov	r4, r1
 8009d00:	4615      	mov	r5, r2
 8009d02:	461f      	mov	r7, r3
 8009d04:	2209      	movs	r2, #9
 8009d06:	3308      	adds	r3, #8
 8009d08:	4606      	mov	r6, r0
 8009d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d0e:	2100      	movs	r1, #0
 8009d10:	2201      	movs	r2, #1
 8009d12:	429a      	cmp	r2, r3
 8009d14:	db20      	blt.n	8009d58 <__s2b+0x5e>
 8009d16:	4630      	mov	r0, r6
 8009d18:	f7ff ff69 	bl	8009bee <_Balloc>
 8009d1c:	9b08      	ldr	r3, [sp, #32]
 8009d1e:	6143      	str	r3, [r0, #20]
 8009d20:	2d09      	cmp	r5, #9
 8009d22:	f04f 0301 	mov.w	r3, #1
 8009d26:	6103      	str	r3, [r0, #16]
 8009d28:	dd19      	ble.n	8009d5e <__s2b+0x64>
 8009d2a:	f104 0809 	add.w	r8, r4, #9
 8009d2e:	46c1      	mov	r9, r8
 8009d30:	442c      	add	r4, r5
 8009d32:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009d36:	4601      	mov	r1, r0
 8009d38:	3b30      	subs	r3, #48	; 0x30
 8009d3a:	220a      	movs	r2, #10
 8009d3c:	4630      	mov	r0, r6
 8009d3e:	f7ff ffa1 	bl	8009c84 <__multadd>
 8009d42:	45a1      	cmp	r9, r4
 8009d44:	d1f5      	bne.n	8009d32 <__s2b+0x38>
 8009d46:	eb08 0405 	add.w	r4, r8, r5
 8009d4a:	3c08      	subs	r4, #8
 8009d4c:	1b2d      	subs	r5, r5, r4
 8009d4e:	1963      	adds	r3, r4, r5
 8009d50:	42bb      	cmp	r3, r7
 8009d52:	db07      	blt.n	8009d64 <__s2b+0x6a>
 8009d54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d58:	0052      	lsls	r2, r2, #1
 8009d5a:	3101      	adds	r1, #1
 8009d5c:	e7d9      	b.n	8009d12 <__s2b+0x18>
 8009d5e:	340a      	adds	r4, #10
 8009d60:	2509      	movs	r5, #9
 8009d62:	e7f3      	b.n	8009d4c <__s2b+0x52>
 8009d64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009d68:	4601      	mov	r1, r0
 8009d6a:	3b30      	subs	r3, #48	; 0x30
 8009d6c:	220a      	movs	r2, #10
 8009d6e:	4630      	mov	r0, r6
 8009d70:	f7ff ff88 	bl	8009c84 <__multadd>
 8009d74:	e7eb      	b.n	8009d4e <__s2b+0x54>

08009d76 <__hi0bits>:
 8009d76:	0c02      	lsrs	r2, r0, #16
 8009d78:	0412      	lsls	r2, r2, #16
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	b9b2      	cbnz	r2, 8009dac <__hi0bits+0x36>
 8009d7e:	0403      	lsls	r3, r0, #16
 8009d80:	2010      	movs	r0, #16
 8009d82:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009d86:	bf04      	itt	eq
 8009d88:	021b      	lsleq	r3, r3, #8
 8009d8a:	3008      	addeq	r0, #8
 8009d8c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009d90:	bf04      	itt	eq
 8009d92:	011b      	lsleq	r3, r3, #4
 8009d94:	3004      	addeq	r0, #4
 8009d96:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009d9a:	bf04      	itt	eq
 8009d9c:	009b      	lsleq	r3, r3, #2
 8009d9e:	3002      	addeq	r0, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	db06      	blt.n	8009db2 <__hi0bits+0x3c>
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	d503      	bpl.n	8009db0 <__hi0bits+0x3a>
 8009da8:	3001      	adds	r0, #1
 8009daa:	4770      	bx	lr
 8009dac:	2000      	movs	r0, #0
 8009dae:	e7e8      	b.n	8009d82 <__hi0bits+0xc>
 8009db0:	2020      	movs	r0, #32
 8009db2:	4770      	bx	lr

08009db4 <__lo0bits>:
 8009db4:	6803      	ldr	r3, [r0, #0]
 8009db6:	f013 0207 	ands.w	r2, r3, #7
 8009dba:	4601      	mov	r1, r0
 8009dbc:	d00b      	beq.n	8009dd6 <__lo0bits+0x22>
 8009dbe:	07da      	lsls	r2, r3, #31
 8009dc0:	d423      	bmi.n	8009e0a <__lo0bits+0x56>
 8009dc2:	0798      	lsls	r0, r3, #30
 8009dc4:	bf49      	itett	mi
 8009dc6:	085b      	lsrmi	r3, r3, #1
 8009dc8:	089b      	lsrpl	r3, r3, #2
 8009dca:	2001      	movmi	r0, #1
 8009dcc:	600b      	strmi	r3, [r1, #0]
 8009dce:	bf5c      	itt	pl
 8009dd0:	600b      	strpl	r3, [r1, #0]
 8009dd2:	2002      	movpl	r0, #2
 8009dd4:	4770      	bx	lr
 8009dd6:	b298      	uxth	r0, r3
 8009dd8:	b9a8      	cbnz	r0, 8009e06 <__lo0bits+0x52>
 8009dda:	0c1b      	lsrs	r3, r3, #16
 8009ddc:	2010      	movs	r0, #16
 8009dde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009de2:	bf04      	itt	eq
 8009de4:	0a1b      	lsreq	r3, r3, #8
 8009de6:	3008      	addeq	r0, #8
 8009de8:	071a      	lsls	r2, r3, #28
 8009dea:	bf04      	itt	eq
 8009dec:	091b      	lsreq	r3, r3, #4
 8009dee:	3004      	addeq	r0, #4
 8009df0:	079a      	lsls	r2, r3, #30
 8009df2:	bf04      	itt	eq
 8009df4:	089b      	lsreq	r3, r3, #2
 8009df6:	3002      	addeq	r0, #2
 8009df8:	07da      	lsls	r2, r3, #31
 8009dfa:	d402      	bmi.n	8009e02 <__lo0bits+0x4e>
 8009dfc:	085b      	lsrs	r3, r3, #1
 8009dfe:	d006      	beq.n	8009e0e <__lo0bits+0x5a>
 8009e00:	3001      	adds	r0, #1
 8009e02:	600b      	str	r3, [r1, #0]
 8009e04:	4770      	bx	lr
 8009e06:	4610      	mov	r0, r2
 8009e08:	e7e9      	b.n	8009dde <__lo0bits+0x2a>
 8009e0a:	2000      	movs	r0, #0
 8009e0c:	4770      	bx	lr
 8009e0e:	2020      	movs	r0, #32
 8009e10:	4770      	bx	lr

08009e12 <__i2b>:
 8009e12:	b510      	push	{r4, lr}
 8009e14:	460c      	mov	r4, r1
 8009e16:	2101      	movs	r1, #1
 8009e18:	f7ff fee9 	bl	8009bee <_Balloc>
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	6144      	str	r4, [r0, #20]
 8009e20:	6102      	str	r2, [r0, #16]
 8009e22:	bd10      	pop	{r4, pc}

08009e24 <__multiply>:
 8009e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e28:	4614      	mov	r4, r2
 8009e2a:	690a      	ldr	r2, [r1, #16]
 8009e2c:	6923      	ldr	r3, [r4, #16]
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	bfb8      	it	lt
 8009e32:	460b      	movlt	r3, r1
 8009e34:	4688      	mov	r8, r1
 8009e36:	bfbc      	itt	lt
 8009e38:	46a0      	movlt	r8, r4
 8009e3a:	461c      	movlt	r4, r3
 8009e3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009e40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009e44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009e4c:	eb07 0609 	add.w	r6, r7, r9
 8009e50:	42b3      	cmp	r3, r6
 8009e52:	bfb8      	it	lt
 8009e54:	3101      	addlt	r1, #1
 8009e56:	f7ff feca 	bl	8009bee <_Balloc>
 8009e5a:	f100 0514 	add.w	r5, r0, #20
 8009e5e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009e62:	462b      	mov	r3, r5
 8009e64:	2200      	movs	r2, #0
 8009e66:	4573      	cmp	r3, lr
 8009e68:	d316      	bcc.n	8009e98 <__multiply+0x74>
 8009e6a:	f104 0214 	add.w	r2, r4, #20
 8009e6e:	f108 0114 	add.w	r1, r8, #20
 8009e72:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009e76:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009e7a:	9300      	str	r3, [sp, #0]
 8009e7c:	9b00      	ldr	r3, [sp, #0]
 8009e7e:	9201      	str	r2, [sp, #4]
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d80c      	bhi.n	8009e9e <__multiply+0x7a>
 8009e84:	2e00      	cmp	r6, #0
 8009e86:	dd03      	ble.n	8009e90 <__multiply+0x6c>
 8009e88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d05d      	beq.n	8009f4c <__multiply+0x128>
 8009e90:	6106      	str	r6, [r0, #16]
 8009e92:	b003      	add	sp, #12
 8009e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e98:	f843 2b04 	str.w	r2, [r3], #4
 8009e9c:	e7e3      	b.n	8009e66 <__multiply+0x42>
 8009e9e:	f8b2 b000 	ldrh.w	fp, [r2]
 8009ea2:	f1bb 0f00 	cmp.w	fp, #0
 8009ea6:	d023      	beq.n	8009ef0 <__multiply+0xcc>
 8009ea8:	4689      	mov	r9, r1
 8009eaa:	46ac      	mov	ip, r5
 8009eac:	f04f 0800 	mov.w	r8, #0
 8009eb0:	f859 4b04 	ldr.w	r4, [r9], #4
 8009eb4:	f8dc a000 	ldr.w	sl, [ip]
 8009eb8:	b2a3      	uxth	r3, r4
 8009eba:	fa1f fa8a 	uxth.w	sl, sl
 8009ebe:	fb0b a303 	mla	r3, fp, r3, sl
 8009ec2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009ec6:	f8dc 4000 	ldr.w	r4, [ip]
 8009eca:	4443      	add	r3, r8
 8009ecc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ed0:	fb0b 840a 	mla	r4, fp, sl, r8
 8009ed4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009ed8:	46e2      	mov	sl, ip
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009ee0:	454f      	cmp	r7, r9
 8009ee2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009ee6:	f84a 3b04 	str.w	r3, [sl], #4
 8009eea:	d82b      	bhi.n	8009f44 <__multiply+0x120>
 8009eec:	f8cc 8004 	str.w	r8, [ip, #4]
 8009ef0:	9b01      	ldr	r3, [sp, #4]
 8009ef2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009ef6:	3204      	adds	r2, #4
 8009ef8:	f1ba 0f00 	cmp.w	sl, #0
 8009efc:	d020      	beq.n	8009f40 <__multiply+0x11c>
 8009efe:	682b      	ldr	r3, [r5, #0]
 8009f00:	4689      	mov	r9, r1
 8009f02:	46a8      	mov	r8, r5
 8009f04:	f04f 0b00 	mov.w	fp, #0
 8009f08:	f8b9 c000 	ldrh.w	ip, [r9]
 8009f0c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009f10:	fb0a 440c 	mla	r4, sl, ip, r4
 8009f14:	445c      	add	r4, fp
 8009f16:	46c4      	mov	ip, r8
 8009f18:	b29b      	uxth	r3, r3
 8009f1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009f1e:	f84c 3b04 	str.w	r3, [ip], #4
 8009f22:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f26:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009f2a:	0c1b      	lsrs	r3, r3, #16
 8009f2c:	fb0a b303 	mla	r3, sl, r3, fp
 8009f30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009f34:	454f      	cmp	r7, r9
 8009f36:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009f3a:	d805      	bhi.n	8009f48 <__multiply+0x124>
 8009f3c:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f40:	3504      	adds	r5, #4
 8009f42:	e79b      	b.n	8009e7c <__multiply+0x58>
 8009f44:	46d4      	mov	ip, sl
 8009f46:	e7b3      	b.n	8009eb0 <__multiply+0x8c>
 8009f48:	46e0      	mov	r8, ip
 8009f4a:	e7dd      	b.n	8009f08 <__multiply+0xe4>
 8009f4c:	3e01      	subs	r6, #1
 8009f4e:	e799      	b.n	8009e84 <__multiply+0x60>

08009f50 <__pow5mult>:
 8009f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f54:	4615      	mov	r5, r2
 8009f56:	f012 0203 	ands.w	r2, r2, #3
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	d007      	beq.n	8009f70 <__pow5mult+0x20>
 8009f60:	3a01      	subs	r2, #1
 8009f62:	4c21      	ldr	r4, [pc, #132]	; (8009fe8 <__pow5mult+0x98>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009f6a:	f7ff fe8b 	bl	8009c84 <__multadd>
 8009f6e:	4607      	mov	r7, r0
 8009f70:	10ad      	asrs	r5, r5, #2
 8009f72:	d035      	beq.n	8009fe0 <__pow5mult+0x90>
 8009f74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009f76:	b93c      	cbnz	r4, 8009f88 <__pow5mult+0x38>
 8009f78:	2010      	movs	r0, #16
 8009f7a:	f7ff fe13 	bl	8009ba4 <malloc>
 8009f7e:	6270      	str	r0, [r6, #36]	; 0x24
 8009f80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009f84:	6004      	str	r4, [r0, #0]
 8009f86:	60c4      	str	r4, [r0, #12]
 8009f88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009f8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009f90:	b94c      	cbnz	r4, 8009fa6 <__pow5mult+0x56>
 8009f92:	f240 2171 	movw	r1, #625	; 0x271
 8009f96:	4630      	mov	r0, r6
 8009f98:	f7ff ff3b 	bl	8009e12 <__i2b>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	f04f 0800 	mov.w	r8, #0
 8009faa:	07eb      	lsls	r3, r5, #31
 8009fac:	d50a      	bpl.n	8009fc4 <__pow5mult+0x74>
 8009fae:	4639      	mov	r1, r7
 8009fb0:	4622      	mov	r2, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ff36 	bl	8009e24 <__multiply>
 8009fb8:	4639      	mov	r1, r7
 8009fba:	4681      	mov	r9, r0
 8009fbc:	4630      	mov	r0, r6
 8009fbe:	f7ff fe4a 	bl	8009c56 <_Bfree>
 8009fc2:	464f      	mov	r7, r9
 8009fc4:	106d      	asrs	r5, r5, #1
 8009fc6:	d00b      	beq.n	8009fe0 <__pow5mult+0x90>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	b938      	cbnz	r0, 8009fdc <__pow5mult+0x8c>
 8009fcc:	4622      	mov	r2, r4
 8009fce:	4621      	mov	r1, r4
 8009fd0:	4630      	mov	r0, r6
 8009fd2:	f7ff ff27 	bl	8009e24 <__multiply>
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	f8c0 8000 	str.w	r8, [r0]
 8009fdc:	4604      	mov	r4, r0
 8009fde:	e7e4      	b.n	8009faa <__pow5mult+0x5a>
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fe6:	bf00      	nop
 8009fe8:	0800ab98 	.word	0x0800ab98

08009fec <__lshift>:
 8009fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ff0:	460c      	mov	r4, r1
 8009ff2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ff6:	6923      	ldr	r3, [r4, #16]
 8009ff8:	6849      	ldr	r1, [r1, #4]
 8009ffa:	eb0a 0903 	add.w	r9, sl, r3
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	4607      	mov	r7, r0
 800a002:	4616      	mov	r6, r2
 800a004:	f109 0501 	add.w	r5, r9, #1
 800a008:	42ab      	cmp	r3, r5
 800a00a:	db32      	blt.n	800a072 <__lshift+0x86>
 800a00c:	4638      	mov	r0, r7
 800a00e:	f7ff fdee 	bl	8009bee <_Balloc>
 800a012:	2300      	movs	r3, #0
 800a014:	4680      	mov	r8, r0
 800a016:	f100 0114 	add.w	r1, r0, #20
 800a01a:	461a      	mov	r2, r3
 800a01c:	4553      	cmp	r3, sl
 800a01e:	db2b      	blt.n	800a078 <__lshift+0x8c>
 800a020:	6920      	ldr	r0, [r4, #16]
 800a022:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a026:	f104 0314 	add.w	r3, r4, #20
 800a02a:	f016 021f 	ands.w	r2, r6, #31
 800a02e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a032:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a036:	d025      	beq.n	800a084 <__lshift+0x98>
 800a038:	f1c2 0e20 	rsb	lr, r2, #32
 800a03c:	2000      	movs	r0, #0
 800a03e:	681e      	ldr	r6, [r3, #0]
 800a040:	468a      	mov	sl, r1
 800a042:	4096      	lsls	r6, r2
 800a044:	4330      	orrs	r0, r6
 800a046:	f84a 0b04 	str.w	r0, [sl], #4
 800a04a:	f853 0b04 	ldr.w	r0, [r3], #4
 800a04e:	459c      	cmp	ip, r3
 800a050:	fa20 f00e 	lsr.w	r0, r0, lr
 800a054:	d814      	bhi.n	800a080 <__lshift+0x94>
 800a056:	6048      	str	r0, [r1, #4]
 800a058:	b108      	cbz	r0, 800a05e <__lshift+0x72>
 800a05a:	f109 0502 	add.w	r5, r9, #2
 800a05e:	3d01      	subs	r5, #1
 800a060:	4638      	mov	r0, r7
 800a062:	f8c8 5010 	str.w	r5, [r8, #16]
 800a066:	4621      	mov	r1, r4
 800a068:	f7ff fdf5 	bl	8009c56 <_Bfree>
 800a06c:	4640      	mov	r0, r8
 800a06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a072:	3101      	adds	r1, #1
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	e7c7      	b.n	800a008 <__lshift+0x1c>
 800a078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a07c:	3301      	adds	r3, #1
 800a07e:	e7cd      	b.n	800a01c <__lshift+0x30>
 800a080:	4651      	mov	r1, sl
 800a082:	e7dc      	b.n	800a03e <__lshift+0x52>
 800a084:	3904      	subs	r1, #4
 800a086:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08a:	f841 2f04 	str.w	r2, [r1, #4]!
 800a08e:	459c      	cmp	ip, r3
 800a090:	d8f9      	bhi.n	800a086 <__lshift+0x9a>
 800a092:	e7e4      	b.n	800a05e <__lshift+0x72>

0800a094 <__mcmp>:
 800a094:	6903      	ldr	r3, [r0, #16]
 800a096:	690a      	ldr	r2, [r1, #16]
 800a098:	1a9b      	subs	r3, r3, r2
 800a09a:	b530      	push	{r4, r5, lr}
 800a09c:	d10c      	bne.n	800a0b8 <__mcmp+0x24>
 800a09e:	0092      	lsls	r2, r2, #2
 800a0a0:	3014      	adds	r0, #20
 800a0a2:	3114      	adds	r1, #20
 800a0a4:	1884      	adds	r4, r0, r2
 800a0a6:	4411      	add	r1, r2
 800a0a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a0ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a0b0:	4295      	cmp	r5, r2
 800a0b2:	d003      	beq.n	800a0bc <__mcmp+0x28>
 800a0b4:	d305      	bcc.n	800a0c2 <__mcmp+0x2e>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	bd30      	pop	{r4, r5, pc}
 800a0bc:	42a0      	cmp	r0, r4
 800a0be:	d3f3      	bcc.n	800a0a8 <__mcmp+0x14>
 800a0c0:	e7fa      	b.n	800a0b8 <__mcmp+0x24>
 800a0c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0c6:	e7f7      	b.n	800a0b8 <__mcmp+0x24>

0800a0c8 <__mdiff>:
 800a0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0cc:	460d      	mov	r5, r1
 800a0ce:	4607      	mov	r7, r0
 800a0d0:	4611      	mov	r1, r2
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	4614      	mov	r4, r2
 800a0d6:	f7ff ffdd 	bl	800a094 <__mcmp>
 800a0da:	1e06      	subs	r6, r0, #0
 800a0dc:	d108      	bne.n	800a0f0 <__mdiff+0x28>
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f7ff fd84 	bl	8009bee <_Balloc>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a0ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f0:	bfa4      	itt	ge
 800a0f2:	4623      	movge	r3, r4
 800a0f4:	462c      	movge	r4, r5
 800a0f6:	4638      	mov	r0, r7
 800a0f8:	6861      	ldr	r1, [r4, #4]
 800a0fa:	bfa6      	itte	ge
 800a0fc:	461d      	movge	r5, r3
 800a0fe:	2600      	movge	r6, #0
 800a100:	2601      	movlt	r6, #1
 800a102:	f7ff fd74 	bl	8009bee <_Balloc>
 800a106:	692b      	ldr	r3, [r5, #16]
 800a108:	60c6      	str	r6, [r0, #12]
 800a10a:	6926      	ldr	r6, [r4, #16]
 800a10c:	f105 0914 	add.w	r9, r5, #20
 800a110:	f104 0214 	add.w	r2, r4, #20
 800a114:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a118:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a11c:	f100 0514 	add.w	r5, r0, #20
 800a120:	f04f 0e00 	mov.w	lr, #0
 800a124:	f852 ab04 	ldr.w	sl, [r2], #4
 800a128:	f859 4b04 	ldr.w	r4, [r9], #4
 800a12c:	fa1e f18a 	uxtah	r1, lr, sl
 800a130:	b2a3      	uxth	r3, r4
 800a132:	1ac9      	subs	r1, r1, r3
 800a134:	0c23      	lsrs	r3, r4, #16
 800a136:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a13a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a13e:	b289      	uxth	r1, r1
 800a140:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a144:	45c8      	cmp	r8, r9
 800a146:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a14a:	4694      	mov	ip, r2
 800a14c:	f845 3b04 	str.w	r3, [r5], #4
 800a150:	d8e8      	bhi.n	800a124 <__mdiff+0x5c>
 800a152:	45bc      	cmp	ip, r7
 800a154:	d304      	bcc.n	800a160 <__mdiff+0x98>
 800a156:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a15a:	b183      	cbz	r3, 800a17e <__mdiff+0xb6>
 800a15c:	6106      	str	r6, [r0, #16]
 800a15e:	e7c5      	b.n	800a0ec <__mdiff+0x24>
 800a160:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a164:	fa1e f381 	uxtah	r3, lr, r1
 800a168:	141a      	asrs	r2, r3, #16
 800a16a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a16e:	b29b      	uxth	r3, r3
 800a170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a174:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a178:	f845 3b04 	str.w	r3, [r5], #4
 800a17c:	e7e9      	b.n	800a152 <__mdiff+0x8a>
 800a17e:	3e01      	subs	r6, #1
 800a180:	e7e9      	b.n	800a156 <__mdiff+0x8e>
	...

0800a184 <__ulp>:
 800a184:	4b12      	ldr	r3, [pc, #72]	; (800a1d0 <__ulp+0x4c>)
 800a186:	ee10 2a90 	vmov	r2, s1
 800a18a:	401a      	ands	r2, r3
 800a18c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800a190:	2b00      	cmp	r3, #0
 800a192:	dd04      	ble.n	800a19e <__ulp+0x1a>
 800a194:	2000      	movs	r0, #0
 800a196:	4619      	mov	r1, r3
 800a198:	ec41 0b10 	vmov	d0, r0, r1
 800a19c:	4770      	bx	lr
 800a19e:	425b      	negs	r3, r3
 800a1a0:	151b      	asrs	r3, r3, #20
 800a1a2:	2b13      	cmp	r3, #19
 800a1a4:	f04f 0000 	mov.w	r0, #0
 800a1a8:	f04f 0100 	mov.w	r1, #0
 800a1ac:	dc04      	bgt.n	800a1b8 <__ulp+0x34>
 800a1ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a1b2:	fa42 f103 	asr.w	r1, r2, r3
 800a1b6:	e7ef      	b.n	800a198 <__ulp+0x14>
 800a1b8:	3b14      	subs	r3, #20
 800a1ba:	2b1e      	cmp	r3, #30
 800a1bc:	f04f 0201 	mov.w	r2, #1
 800a1c0:	bfda      	itte	le
 800a1c2:	f1c3 031f 	rsble	r3, r3, #31
 800a1c6:	fa02 f303 	lslle.w	r3, r2, r3
 800a1ca:	4613      	movgt	r3, r2
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	e7e3      	b.n	800a198 <__ulp+0x14>
 800a1d0:	7ff00000 	.word	0x7ff00000

0800a1d4 <__b2d>:
 800a1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1d6:	6905      	ldr	r5, [r0, #16]
 800a1d8:	f100 0714 	add.w	r7, r0, #20
 800a1dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a1e0:	1f2e      	subs	r6, r5, #4
 800a1e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	f7ff fdc5 	bl	8009d76 <__hi0bits>
 800a1ec:	f1c0 0320 	rsb	r3, r0, #32
 800a1f0:	280a      	cmp	r0, #10
 800a1f2:	600b      	str	r3, [r1, #0]
 800a1f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800a26c <__b2d+0x98>
 800a1f8:	dc14      	bgt.n	800a224 <__b2d+0x50>
 800a1fa:	f1c0 0e0b 	rsb	lr, r0, #11
 800a1fe:	fa24 f10e 	lsr.w	r1, r4, lr
 800a202:	42b7      	cmp	r7, r6
 800a204:	ea41 030c 	orr.w	r3, r1, ip
 800a208:	bf34      	ite	cc
 800a20a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a20e:	2100      	movcs	r1, #0
 800a210:	3015      	adds	r0, #21
 800a212:	fa04 f000 	lsl.w	r0, r4, r0
 800a216:	fa21 f10e 	lsr.w	r1, r1, lr
 800a21a:	ea40 0201 	orr.w	r2, r0, r1
 800a21e:	ec43 2b10 	vmov	d0, r2, r3
 800a222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a224:	42b7      	cmp	r7, r6
 800a226:	bf3a      	itte	cc
 800a228:	f1a5 0608 	subcc.w	r6, r5, #8
 800a22c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a230:	2100      	movcs	r1, #0
 800a232:	380b      	subs	r0, #11
 800a234:	d015      	beq.n	800a262 <__b2d+0x8e>
 800a236:	4084      	lsls	r4, r0
 800a238:	f1c0 0520 	rsb	r5, r0, #32
 800a23c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800a240:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800a244:	42be      	cmp	r6, r7
 800a246:	fa21 fc05 	lsr.w	ip, r1, r5
 800a24a:	ea44 030c 	orr.w	r3, r4, ip
 800a24e:	bf8c      	ite	hi
 800a250:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a254:	2400      	movls	r4, #0
 800a256:	fa01 f000 	lsl.w	r0, r1, r0
 800a25a:	40ec      	lsrs	r4, r5
 800a25c:	ea40 0204 	orr.w	r2, r0, r4
 800a260:	e7dd      	b.n	800a21e <__b2d+0x4a>
 800a262:	ea44 030c 	orr.w	r3, r4, ip
 800a266:	460a      	mov	r2, r1
 800a268:	e7d9      	b.n	800a21e <__b2d+0x4a>
 800a26a:	bf00      	nop
 800a26c:	3ff00000 	.word	0x3ff00000

0800a270 <__d2b>:
 800a270:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a274:	460e      	mov	r6, r1
 800a276:	2101      	movs	r1, #1
 800a278:	ec59 8b10 	vmov	r8, r9, d0
 800a27c:	4615      	mov	r5, r2
 800a27e:	f7ff fcb6 	bl	8009bee <_Balloc>
 800a282:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a286:	4607      	mov	r7, r0
 800a288:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a28c:	bb34      	cbnz	r4, 800a2dc <__d2b+0x6c>
 800a28e:	9301      	str	r3, [sp, #4]
 800a290:	f1b8 0300 	subs.w	r3, r8, #0
 800a294:	d027      	beq.n	800a2e6 <__d2b+0x76>
 800a296:	a802      	add	r0, sp, #8
 800a298:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a29c:	f7ff fd8a 	bl	8009db4 <__lo0bits>
 800a2a0:	9900      	ldr	r1, [sp, #0]
 800a2a2:	b1f0      	cbz	r0, 800a2e2 <__d2b+0x72>
 800a2a4:	9a01      	ldr	r2, [sp, #4]
 800a2a6:	f1c0 0320 	rsb	r3, r0, #32
 800a2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	40c2      	lsrs	r2, r0
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	9201      	str	r2, [sp, #4]
 800a2b6:	9b01      	ldr	r3, [sp, #4]
 800a2b8:	61bb      	str	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	bf14      	ite	ne
 800a2be:	2102      	movne	r1, #2
 800a2c0:	2101      	moveq	r1, #1
 800a2c2:	6139      	str	r1, [r7, #16]
 800a2c4:	b1c4      	cbz	r4, 800a2f8 <__d2b+0x88>
 800a2c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a2ca:	4404      	add	r4, r0
 800a2cc:	6034      	str	r4, [r6, #0]
 800a2ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2d2:	6028      	str	r0, [r5, #0]
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	b003      	add	sp, #12
 800a2d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2e0:	e7d5      	b.n	800a28e <__d2b+0x1e>
 800a2e2:	6179      	str	r1, [r7, #20]
 800a2e4:	e7e7      	b.n	800a2b6 <__d2b+0x46>
 800a2e6:	a801      	add	r0, sp, #4
 800a2e8:	f7ff fd64 	bl	8009db4 <__lo0bits>
 800a2ec:	9b01      	ldr	r3, [sp, #4]
 800a2ee:	617b      	str	r3, [r7, #20]
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	6139      	str	r1, [r7, #16]
 800a2f4:	3020      	adds	r0, #32
 800a2f6:	e7e5      	b.n	800a2c4 <__d2b+0x54>
 800a2f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a2fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a300:	6030      	str	r0, [r6, #0]
 800a302:	6918      	ldr	r0, [r3, #16]
 800a304:	f7ff fd37 	bl	8009d76 <__hi0bits>
 800a308:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a30c:	e7e1      	b.n	800a2d2 <__d2b+0x62>

0800a30e <__ratio>:
 800a30e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a312:	4688      	mov	r8, r1
 800a314:	4669      	mov	r1, sp
 800a316:	4681      	mov	r9, r0
 800a318:	f7ff ff5c 	bl	800a1d4 <__b2d>
 800a31c:	a901      	add	r1, sp, #4
 800a31e:	4640      	mov	r0, r8
 800a320:	ec57 6b10 	vmov	r6, r7, d0
 800a324:	f7ff ff56 	bl	800a1d4 <__b2d>
 800a328:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a32c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a330:	eba3 0c02 	sub.w	ip, r3, r2
 800a334:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a338:	1a9b      	subs	r3, r3, r2
 800a33a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a33e:	ec5b ab10 	vmov	sl, fp, d0
 800a342:	2b00      	cmp	r3, #0
 800a344:	bfce      	itee	gt
 800a346:	463a      	movgt	r2, r7
 800a348:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a34c:	465a      	movle	r2, fp
 800a34e:	4659      	mov	r1, fp
 800a350:	463d      	mov	r5, r7
 800a352:	bfd4      	ite	le
 800a354:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a358:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800a35c:	4630      	mov	r0, r6
 800a35e:	ee10 2a10 	vmov	r2, s0
 800a362:	460b      	mov	r3, r1
 800a364:	4629      	mov	r1, r5
 800a366:	f7f6 fa71 	bl	800084c <__aeabi_ddiv>
 800a36a:	ec41 0b10 	vmov	d0, r0, r1
 800a36e:	b003      	add	sp, #12
 800a370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a374 <__copybits>:
 800a374:	3901      	subs	r1, #1
 800a376:	b510      	push	{r4, lr}
 800a378:	1149      	asrs	r1, r1, #5
 800a37a:	6914      	ldr	r4, [r2, #16]
 800a37c:	3101      	adds	r1, #1
 800a37e:	f102 0314 	add.w	r3, r2, #20
 800a382:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a386:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a38a:	42a3      	cmp	r3, r4
 800a38c:	4602      	mov	r2, r0
 800a38e:	d303      	bcc.n	800a398 <__copybits+0x24>
 800a390:	2300      	movs	r3, #0
 800a392:	428a      	cmp	r2, r1
 800a394:	d305      	bcc.n	800a3a2 <__copybits+0x2e>
 800a396:	bd10      	pop	{r4, pc}
 800a398:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39c:	f840 2b04 	str.w	r2, [r0], #4
 800a3a0:	e7f3      	b.n	800a38a <__copybits+0x16>
 800a3a2:	f842 3b04 	str.w	r3, [r2], #4
 800a3a6:	e7f4      	b.n	800a392 <__copybits+0x1e>

0800a3a8 <__any_on>:
 800a3a8:	f100 0214 	add.w	r2, r0, #20
 800a3ac:	6900      	ldr	r0, [r0, #16]
 800a3ae:	114b      	asrs	r3, r1, #5
 800a3b0:	4298      	cmp	r0, r3
 800a3b2:	b510      	push	{r4, lr}
 800a3b4:	db11      	blt.n	800a3da <__any_on+0x32>
 800a3b6:	dd0a      	ble.n	800a3ce <__any_on+0x26>
 800a3b8:	f011 011f 	ands.w	r1, r1, #31
 800a3bc:	d007      	beq.n	800a3ce <__any_on+0x26>
 800a3be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3c2:	fa24 f001 	lsr.w	r0, r4, r1
 800a3c6:	fa00 f101 	lsl.w	r1, r0, r1
 800a3ca:	428c      	cmp	r4, r1
 800a3cc:	d10b      	bne.n	800a3e6 <__any_on+0x3e>
 800a3ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d803      	bhi.n	800a3de <__any_on+0x36>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	4603      	mov	r3, r0
 800a3dc:	e7f7      	b.n	800a3ce <__any_on+0x26>
 800a3de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d0f5      	beq.n	800a3d2 <__any_on+0x2a>
 800a3e6:	2001      	movs	r0, #1
 800a3e8:	e7f6      	b.n	800a3d8 <__any_on+0x30>

0800a3ea <_calloc_r>:
 800a3ea:	b538      	push	{r3, r4, r5, lr}
 800a3ec:	fb02 f401 	mul.w	r4, r2, r1
 800a3f0:	4621      	mov	r1, r4
 800a3f2:	f000 f857 	bl	800a4a4 <_malloc_r>
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	b118      	cbz	r0, 800a402 <_calloc_r+0x18>
 800a3fa:	4622      	mov	r2, r4
 800a3fc:	2100      	movs	r1, #0
 800a3fe:	f7fc fd37 	bl	8006e70 <memset>
 800a402:	4628      	mov	r0, r5
 800a404:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a408 <_free_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4605      	mov	r5, r0
 800a40c:	2900      	cmp	r1, #0
 800a40e:	d045      	beq.n	800a49c <_free_r+0x94>
 800a410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a414:	1f0c      	subs	r4, r1, #4
 800a416:	2b00      	cmp	r3, #0
 800a418:	bfb8      	it	lt
 800a41a:	18e4      	addlt	r4, r4, r3
 800a41c:	f000 fa36 	bl	800a88c <__malloc_lock>
 800a420:	4a1f      	ldr	r2, [pc, #124]	; (800a4a0 <_free_r+0x98>)
 800a422:	6813      	ldr	r3, [r2, #0]
 800a424:	4610      	mov	r0, r2
 800a426:	b933      	cbnz	r3, 800a436 <_free_r+0x2e>
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	6014      	str	r4, [r2, #0]
 800a42c:	4628      	mov	r0, r5
 800a42e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a432:	f000 ba2c 	b.w	800a88e <__malloc_unlock>
 800a436:	42a3      	cmp	r3, r4
 800a438:	d90c      	bls.n	800a454 <_free_r+0x4c>
 800a43a:	6821      	ldr	r1, [r4, #0]
 800a43c:	1862      	adds	r2, r4, r1
 800a43e:	4293      	cmp	r3, r2
 800a440:	bf04      	itt	eq
 800a442:	681a      	ldreq	r2, [r3, #0]
 800a444:	685b      	ldreq	r3, [r3, #4]
 800a446:	6063      	str	r3, [r4, #4]
 800a448:	bf04      	itt	eq
 800a44a:	1852      	addeq	r2, r2, r1
 800a44c:	6022      	streq	r2, [r4, #0]
 800a44e:	6004      	str	r4, [r0, #0]
 800a450:	e7ec      	b.n	800a42c <_free_r+0x24>
 800a452:	4613      	mov	r3, r2
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	b10a      	cbz	r2, 800a45c <_free_r+0x54>
 800a458:	42a2      	cmp	r2, r4
 800a45a:	d9fa      	bls.n	800a452 <_free_r+0x4a>
 800a45c:	6819      	ldr	r1, [r3, #0]
 800a45e:	1858      	adds	r0, r3, r1
 800a460:	42a0      	cmp	r0, r4
 800a462:	d10b      	bne.n	800a47c <_free_r+0x74>
 800a464:	6820      	ldr	r0, [r4, #0]
 800a466:	4401      	add	r1, r0
 800a468:	1858      	adds	r0, r3, r1
 800a46a:	4282      	cmp	r2, r0
 800a46c:	6019      	str	r1, [r3, #0]
 800a46e:	d1dd      	bne.n	800a42c <_free_r+0x24>
 800a470:	6810      	ldr	r0, [r2, #0]
 800a472:	6852      	ldr	r2, [r2, #4]
 800a474:	605a      	str	r2, [r3, #4]
 800a476:	4401      	add	r1, r0
 800a478:	6019      	str	r1, [r3, #0]
 800a47a:	e7d7      	b.n	800a42c <_free_r+0x24>
 800a47c:	d902      	bls.n	800a484 <_free_r+0x7c>
 800a47e:	230c      	movs	r3, #12
 800a480:	602b      	str	r3, [r5, #0]
 800a482:	e7d3      	b.n	800a42c <_free_r+0x24>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	1821      	adds	r1, r4, r0
 800a488:	428a      	cmp	r2, r1
 800a48a:	bf04      	itt	eq
 800a48c:	6811      	ldreq	r1, [r2, #0]
 800a48e:	6852      	ldreq	r2, [r2, #4]
 800a490:	6062      	str	r2, [r4, #4]
 800a492:	bf04      	itt	eq
 800a494:	1809      	addeq	r1, r1, r0
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	605c      	str	r4, [r3, #4]
 800a49a:	e7c7      	b.n	800a42c <_free_r+0x24>
 800a49c:	bd38      	pop	{r3, r4, r5, pc}
 800a49e:	bf00      	nop
 800a4a0:	200001fc 	.word	0x200001fc

0800a4a4 <_malloc_r>:
 800a4a4:	b570      	push	{r4, r5, r6, lr}
 800a4a6:	1ccd      	adds	r5, r1, #3
 800a4a8:	f025 0503 	bic.w	r5, r5, #3
 800a4ac:	3508      	adds	r5, #8
 800a4ae:	2d0c      	cmp	r5, #12
 800a4b0:	bf38      	it	cc
 800a4b2:	250c      	movcc	r5, #12
 800a4b4:	2d00      	cmp	r5, #0
 800a4b6:	4606      	mov	r6, r0
 800a4b8:	db01      	blt.n	800a4be <_malloc_r+0x1a>
 800a4ba:	42a9      	cmp	r1, r5
 800a4bc:	d903      	bls.n	800a4c6 <_malloc_r+0x22>
 800a4be:	230c      	movs	r3, #12
 800a4c0:	6033      	str	r3, [r6, #0]
 800a4c2:	2000      	movs	r0, #0
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	f000 f9e1 	bl	800a88c <__malloc_lock>
 800a4ca:	4a21      	ldr	r2, [pc, #132]	; (800a550 <_malloc_r+0xac>)
 800a4cc:	6814      	ldr	r4, [r2, #0]
 800a4ce:	4621      	mov	r1, r4
 800a4d0:	b991      	cbnz	r1, 800a4f8 <_malloc_r+0x54>
 800a4d2:	4c20      	ldr	r4, [pc, #128]	; (800a554 <_malloc_r+0xb0>)
 800a4d4:	6823      	ldr	r3, [r4, #0]
 800a4d6:	b91b      	cbnz	r3, 800a4e0 <_malloc_r+0x3c>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	f000 f98f 	bl	800a7fc <_sbrk_r>
 800a4de:	6020      	str	r0, [r4, #0]
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	4630      	mov	r0, r6
 800a4e4:	f000 f98a 	bl	800a7fc <_sbrk_r>
 800a4e8:	1c43      	adds	r3, r0, #1
 800a4ea:	d124      	bne.n	800a536 <_malloc_r+0x92>
 800a4ec:	230c      	movs	r3, #12
 800a4ee:	6033      	str	r3, [r6, #0]
 800a4f0:	4630      	mov	r0, r6
 800a4f2:	f000 f9cc 	bl	800a88e <__malloc_unlock>
 800a4f6:	e7e4      	b.n	800a4c2 <_malloc_r+0x1e>
 800a4f8:	680b      	ldr	r3, [r1, #0]
 800a4fa:	1b5b      	subs	r3, r3, r5
 800a4fc:	d418      	bmi.n	800a530 <_malloc_r+0x8c>
 800a4fe:	2b0b      	cmp	r3, #11
 800a500:	d90f      	bls.n	800a522 <_malloc_r+0x7e>
 800a502:	600b      	str	r3, [r1, #0]
 800a504:	50cd      	str	r5, [r1, r3]
 800a506:	18cc      	adds	r4, r1, r3
 800a508:	4630      	mov	r0, r6
 800a50a:	f000 f9c0 	bl	800a88e <__malloc_unlock>
 800a50e:	f104 000b 	add.w	r0, r4, #11
 800a512:	1d23      	adds	r3, r4, #4
 800a514:	f020 0007 	bic.w	r0, r0, #7
 800a518:	1ac3      	subs	r3, r0, r3
 800a51a:	d0d3      	beq.n	800a4c4 <_malloc_r+0x20>
 800a51c:	425a      	negs	r2, r3
 800a51e:	50e2      	str	r2, [r4, r3]
 800a520:	e7d0      	b.n	800a4c4 <_malloc_r+0x20>
 800a522:	428c      	cmp	r4, r1
 800a524:	684b      	ldr	r3, [r1, #4]
 800a526:	bf16      	itet	ne
 800a528:	6063      	strne	r3, [r4, #4]
 800a52a:	6013      	streq	r3, [r2, #0]
 800a52c:	460c      	movne	r4, r1
 800a52e:	e7eb      	b.n	800a508 <_malloc_r+0x64>
 800a530:	460c      	mov	r4, r1
 800a532:	6849      	ldr	r1, [r1, #4]
 800a534:	e7cc      	b.n	800a4d0 <_malloc_r+0x2c>
 800a536:	1cc4      	adds	r4, r0, #3
 800a538:	f024 0403 	bic.w	r4, r4, #3
 800a53c:	42a0      	cmp	r0, r4
 800a53e:	d005      	beq.n	800a54c <_malloc_r+0xa8>
 800a540:	1a21      	subs	r1, r4, r0
 800a542:	4630      	mov	r0, r6
 800a544:	f000 f95a 	bl	800a7fc <_sbrk_r>
 800a548:	3001      	adds	r0, #1
 800a54a:	d0cf      	beq.n	800a4ec <_malloc_r+0x48>
 800a54c:	6025      	str	r5, [r4, #0]
 800a54e:	e7db      	b.n	800a508 <_malloc_r+0x64>
 800a550:	200001fc 	.word	0x200001fc
 800a554:	20000200 	.word	0x20000200

0800a558 <__ssputs_r>:
 800a558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a55c:	688e      	ldr	r6, [r1, #8]
 800a55e:	429e      	cmp	r6, r3
 800a560:	4682      	mov	sl, r0
 800a562:	460c      	mov	r4, r1
 800a564:	4690      	mov	r8, r2
 800a566:	4699      	mov	r9, r3
 800a568:	d837      	bhi.n	800a5da <__ssputs_r+0x82>
 800a56a:	898a      	ldrh	r2, [r1, #12]
 800a56c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a570:	d031      	beq.n	800a5d6 <__ssputs_r+0x7e>
 800a572:	6825      	ldr	r5, [r4, #0]
 800a574:	6909      	ldr	r1, [r1, #16]
 800a576:	1a6f      	subs	r7, r5, r1
 800a578:	6965      	ldr	r5, [r4, #20]
 800a57a:	2302      	movs	r3, #2
 800a57c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a580:	fb95 f5f3 	sdiv	r5, r5, r3
 800a584:	f109 0301 	add.w	r3, r9, #1
 800a588:	443b      	add	r3, r7
 800a58a:	429d      	cmp	r5, r3
 800a58c:	bf38      	it	cc
 800a58e:	461d      	movcc	r5, r3
 800a590:	0553      	lsls	r3, r2, #21
 800a592:	d530      	bpl.n	800a5f6 <__ssputs_r+0x9e>
 800a594:	4629      	mov	r1, r5
 800a596:	f7ff ff85 	bl	800a4a4 <_malloc_r>
 800a59a:	4606      	mov	r6, r0
 800a59c:	b950      	cbnz	r0, 800a5b4 <__ssputs_r+0x5c>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	f8ca 3000 	str.w	r3, [sl]
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b4:	463a      	mov	r2, r7
 800a5b6:	6921      	ldr	r1, [r4, #16]
 800a5b8:	f7ff fb0e 	bl	8009bd8 <memcpy>
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a5c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c6:	81a3      	strh	r3, [r4, #12]
 800a5c8:	6126      	str	r6, [r4, #16]
 800a5ca:	6165      	str	r5, [r4, #20]
 800a5cc:	443e      	add	r6, r7
 800a5ce:	1bed      	subs	r5, r5, r7
 800a5d0:	6026      	str	r6, [r4, #0]
 800a5d2:	60a5      	str	r5, [r4, #8]
 800a5d4:	464e      	mov	r6, r9
 800a5d6:	454e      	cmp	r6, r9
 800a5d8:	d900      	bls.n	800a5dc <__ssputs_r+0x84>
 800a5da:	464e      	mov	r6, r9
 800a5dc:	4632      	mov	r2, r6
 800a5de:	4641      	mov	r1, r8
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	f000 f93a 	bl	800a85a <memmove>
 800a5e6:	68a3      	ldr	r3, [r4, #8]
 800a5e8:	1b9b      	subs	r3, r3, r6
 800a5ea:	60a3      	str	r3, [r4, #8]
 800a5ec:	6823      	ldr	r3, [r4, #0]
 800a5ee:	441e      	add	r6, r3
 800a5f0:	6026      	str	r6, [r4, #0]
 800a5f2:	2000      	movs	r0, #0
 800a5f4:	e7dc      	b.n	800a5b0 <__ssputs_r+0x58>
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	f000 f94a 	bl	800a890 <_realloc_r>
 800a5fc:	4606      	mov	r6, r0
 800a5fe:	2800      	cmp	r0, #0
 800a600:	d1e2      	bne.n	800a5c8 <__ssputs_r+0x70>
 800a602:	6921      	ldr	r1, [r4, #16]
 800a604:	4650      	mov	r0, sl
 800a606:	f7ff feff 	bl	800a408 <_free_r>
 800a60a:	e7c8      	b.n	800a59e <__ssputs_r+0x46>

0800a60c <_svfiprintf_r>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	461d      	mov	r5, r3
 800a612:	898b      	ldrh	r3, [r1, #12]
 800a614:	061f      	lsls	r7, r3, #24
 800a616:	b09d      	sub	sp, #116	; 0x74
 800a618:	4680      	mov	r8, r0
 800a61a:	460c      	mov	r4, r1
 800a61c:	4616      	mov	r6, r2
 800a61e:	d50f      	bpl.n	800a640 <_svfiprintf_r+0x34>
 800a620:	690b      	ldr	r3, [r1, #16]
 800a622:	b96b      	cbnz	r3, 800a640 <_svfiprintf_r+0x34>
 800a624:	2140      	movs	r1, #64	; 0x40
 800a626:	f7ff ff3d 	bl	800a4a4 <_malloc_r>
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	6120      	str	r0, [r4, #16]
 800a62e:	b928      	cbnz	r0, 800a63c <_svfiprintf_r+0x30>
 800a630:	230c      	movs	r3, #12
 800a632:	f8c8 3000 	str.w	r3, [r8]
 800a636:	f04f 30ff 	mov.w	r0, #4294967295
 800a63a:	e0c8      	b.n	800a7ce <_svfiprintf_r+0x1c2>
 800a63c:	2340      	movs	r3, #64	; 0x40
 800a63e:	6163      	str	r3, [r4, #20]
 800a640:	2300      	movs	r3, #0
 800a642:	9309      	str	r3, [sp, #36]	; 0x24
 800a644:	2320      	movs	r3, #32
 800a646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a64a:	2330      	movs	r3, #48	; 0x30
 800a64c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a650:	9503      	str	r5, [sp, #12]
 800a652:	f04f 0b01 	mov.w	fp, #1
 800a656:	4637      	mov	r7, r6
 800a658:	463d      	mov	r5, r7
 800a65a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a65e:	b10b      	cbz	r3, 800a664 <_svfiprintf_r+0x58>
 800a660:	2b25      	cmp	r3, #37	; 0x25
 800a662:	d13e      	bne.n	800a6e2 <_svfiprintf_r+0xd6>
 800a664:	ebb7 0a06 	subs.w	sl, r7, r6
 800a668:	d00b      	beq.n	800a682 <_svfiprintf_r+0x76>
 800a66a:	4653      	mov	r3, sl
 800a66c:	4632      	mov	r2, r6
 800a66e:	4621      	mov	r1, r4
 800a670:	4640      	mov	r0, r8
 800a672:	f7ff ff71 	bl	800a558 <__ssputs_r>
 800a676:	3001      	adds	r0, #1
 800a678:	f000 80a4 	beq.w	800a7c4 <_svfiprintf_r+0x1b8>
 800a67c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a67e:	4453      	add	r3, sl
 800a680:	9309      	str	r3, [sp, #36]	; 0x24
 800a682:	783b      	ldrb	r3, [r7, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 809d 	beq.w	800a7c4 <_svfiprintf_r+0x1b8>
 800a68a:	2300      	movs	r3, #0
 800a68c:	f04f 32ff 	mov.w	r2, #4294967295
 800a690:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a694:	9304      	str	r3, [sp, #16]
 800a696:	9307      	str	r3, [sp, #28]
 800a698:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a69c:	931a      	str	r3, [sp, #104]	; 0x68
 800a69e:	462f      	mov	r7, r5
 800a6a0:	2205      	movs	r2, #5
 800a6a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a6a6:	4850      	ldr	r0, [pc, #320]	; (800a7e8 <_svfiprintf_r+0x1dc>)
 800a6a8:	f7f5 fd9a 	bl	80001e0 <memchr>
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	b9d0      	cbnz	r0, 800a6e6 <_svfiprintf_r+0xda>
 800a6b0:	06d9      	lsls	r1, r3, #27
 800a6b2:	bf44      	itt	mi
 800a6b4:	2220      	movmi	r2, #32
 800a6b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6ba:	071a      	lsls	r2, r3, #28
 800a6bc:	bf44      	itt	mi
 800a6be:	222b      	movmi	r2, #43	; 0x2b
 800a6c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a6c4:	782a      	ldrb	r2, [r5, #0]
 800a6c6:	2a2a      	cmp	r2, #42	; 0x2a
 800a6c8:	d015      	beq.n	800a6f6 <_svfiprintf_r+0xea>
 800a6ca:	9a07      	ldr	r2, [sp, #28]
 800a6cc:	462f      	mov	r7, r5
 800a6ce:	2000      	movs	r0, #0
 800a6d0:	250a      	movs	r5, #10
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d8:	3b30      	subs	r3, #48	; 0x30
 800a6da:	2b09      	cmp	r3, #9
 800a6dc:	d94d      	bls.n	800a77a <_svfiprintf_r+0x16e>
 800a6de:	b1b8      	cbz	r0, 800a710 <_svfiprintf_r+0x104>
 800a6e0:	e00f      	b.n	800a702 <_svfiprintf_r+0xf6>
 800a6e2:	462f      	mov	r7, r5
 800a6e4:	e7b8      	b.n	800a658 <_svfiprintf_r+0x4c>
 800a6e6:	4a40      	ldr	r2, [pc, #256]	; (800a7e8 <_svfiprintf_r+0x1dc>)
 800a6e8:	1a80      	subs	r0, r0, r2
 800a6ea:	fa0b f000 	lsl.w	r0, fp, r0
 800a6ee:	4318      	orrs	r0, r3
 800a6f0:	9004      	str	r0, [sp, #16]
 800a6f2:	463d      	mov	r5, r7
 800a6f4:	e7d3      	b.n	800a69e <_svfiprintf_r+0x92>
 800a6f6:	9a03      	ldr	r2, [sp, #12]
 800a6f8:	1d11      	adds	r1, r2, #4
 800a6fa:	6812      	ldr	r2, [r2, #0]
 800a6fc:	9103      	str	r1, [sp, #12]
 800a6fe:	2a00      	cmp	r2, #0
 800a700:	db01      	blt.n	800a706 <_svfiprintf_r+0xfa>
 800a702:	9207      	str	r2, [sp, #28]
 800a704:	e004      	b.n	800a710 <_svfiprintf_r+0x104>
 800a706:	4252      	negs	r2, r2
 800a708:	f043 0302 	orr.w	r3, r3, #2
 800a70c:	9207      	str	r2, [sp, #28]
 800a70e:	9304      	str	r3, [sp, #16]
 800a710:	783b      	ldrb	r3, [r7, #0]
 800a712:	2b2e      	cmp	r3, #46	; 0x2e
 800a714:	d10c      	bne.n	800a730 <_svfiprintf_r+0x124>
 800a716:	787b      	ldrb	r3, [r7, #1]
 800a718:	2b2a      	cmp	r3, #42	; 0x2a
 800a71a:	d133      	bne.n	800a784 <_svfiprintf_r+0x178>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	1d1a      	adds	r2, r3, #4
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	9203      	str	r2, [sp, #12]
 800a724:	2b00      	cmp	r3, #0
 800a726:	bfb8      	it	lt
 800a728:	f04f 33ff 	movlt.w	r3, #4294967295
 800a72c:	3702      	adds	r7, #2
 800a72e:	9305      	str	r3, [sp, #20]
 800a730:	4d2e      	ldr	r5, [pc, #184]	; (800a7ec <_svfiprintf_r+0x1e0>)
 800a732:	7839      	ldrb	r1, [r7, #0]
 800a734:	2203      	movs	r2, #3
 800a736:	4628      	mov	r0, r5
 800a738:	f7f5 fd52 	bl	80001e0 <memchr>
 800a73c:	b138      	cbz	r0, 800a74e <_svfiprintf_r+0x142>
 800a73e:	2340      	movs	r3, #64	; 0x40
 800a740:	1b40      	subs	r0, r0, r5
 800a742:	fa03 f000 	lsl.w	r0, r3, r0
 800a746:	9b04      	ldr	r3, [sp, #16]
 800a748:	4303      	orrs	r3, r0
 800a74a:	3701      	adds	r7, #1
 800a74c:	9304      	str	r3, [sp, #16]
 800a74e:	7839      	ldrb	r1, [r7, #0]
 800a750:	4827      	ldr	r0, [pc, #156]	; (800a7f0 <_svfiprintf_r+0x1e4>)
 800a752:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a756:	2206      	movs	r2, #6
 800a758:	1c7e      	adds	r6, r7, #1
 800a75a:	f7f5 fd41 	bl	80001e0 <memchr>
 800a75e:	2800      	cmp	r0, #0
 800a760:	d038      	beq.n	800a7d4 <_svfiprintf_r+0x1c8>
 800a762:	4b24      	ldr	r3, [pc, #144]	; (800a7f4 <_svfiprintf_r+0x1e8>)
 800a764:	bb13      	cbnz	r3, 800a7ac <_svfiprintf_r+0x1a0>
 800a766:	9b03      	ldr	r3, [sp, #12]
 800a768:	3307      	adds	r3, #7
 800a76a:	f023 0307 	bic.w	r3, r3, #7
 800a76e:	3308      	adds	r3, #8
 800a770:	9303      	str	r3, [sp, #12]
 800a772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a774:	444b      	add	r3, r9
 800a776:	9309      	str	r3, [sp, #36]	; 0x24
 800a778:	e76d      	b.n	800a656 <_svfiprintf_r+0x4a>
 800a77a:	fb05 3202 	mla	r2, r5, r2, r3
 800a77e:	2001      	movs	r0, #1
 800a780:	460f      	mov	r7, r1
 800a782:	e7a6      	b.n	800a6d2 <_svfiprintf_r+0xc6>
 800a784:	2300      	movs	r3, #0
 800a786:	3701      	adds	r7, #1
 800a788:	9305      	str	r3, [sp, #20]
 800a78a:	4619      	mov	r1, r3
 800a78c:	250a      	movs	r5, #10
 800a78e:	4638      	mov	r0, r7
 800a790:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a794:	3a30      	subs	r2, #48	; 0x30
 800a796:	2a09      	cmp	r2, #9
 800a798:	d903      	bls.n	800a7a2 <_svfiprintf_r+0x196>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0c8      	beq.n	800a730 <_svfiprintf_r+0x124>
 800a79e:	9105      	str	r1, [sp, #20]
 800a7a0:	e7c6      	b.n	800a730 <_svfiprintf_r+0x124>
 800a7a2:	fb05 2101 	mla	r1, r5, r1, r2
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	e7f0      	b.n	800a78e <_svfiprintf_r+0x182>
 800a7ac:	ab03      	add	r3, sp, #12
 800a7ae:	9300      	str	r3, [sp, #0]
 800a7b0:	4622      	mov	r2, r4
 800a7b2:	4b11      	ldr	r3, [pc, #68]	; (800a7f8 <_svfiprintf_r+0x1ec>)
 800a7b4:	a904      	add	r1, sp, #16
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	f7fc fbf6 	bl	8006fa8 <_printf_float>
 800a7bc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a7c0:	4681      	mov	r9, r0
 800a7c2:	d1d6      	bne.n	800a772 <_svfiprintf_r+0x166>
 800a7c4:	89a3      	ldrh	r3, [r4, #12]
 800a7c6:	065b      	lsls	r3, r3, #25
 800a7c8:	f53f af35 	bmi.w	800a636 <_svfiprintf_r+0x2a>
 800a7cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7ce:	b01d      	add	sp, #116	; 0x74
 800a7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d4:	ab03      	add	r3, sp, #12
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <_svfiprintf_r+0x1ec>)
 800a7dc:	a904      	add	r1, sp, #16
 800a7de:	4640      	mov	r0, r8
 800a7e0:	f7fc fe98 	bl	8007514 <_printf_i>
 800a7e4:	e7ea      	b.n	800a7bc <_svfiprintf_r+0x1b0>
 800a7e6:	bf00      	nop
 800a7e8:	0800aba4 	.word	0x0800aba4
 800a7ec:	0800abaa 	.word	0x0800abaa
 800a7f0:	0800abae 	.word	0x0800abae
 800a7f4:	08006fa9 	.word	0x08006fa9
 800a7f8:	0800a559 	.word	0x0800a559

0800a7fc <_sbrk_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4c06      	ldr	r4, [pc, #24]	; (800a818 <_sbrk_r+0x1c>)
 800a800:	2300      	movs	r3, #0
 800a802:	4605      	mov	r5, r0
 800a804:	4608      	mov	r0, r1
 800a806:	6023      	str	r3, [r4, #0]
 800a808:	f7f7 fea4 	bl	8002554 <_sbrk>
 800a80c:	1c43      	adds	r3, r0, #1
 800a80e:	d102      	bne.n	800a816 <_sbrk_r+0x1a>
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	b103      	cbz	r3, 800a816 <_sbrk_r+0x1a>
 800a814:	602b      	str	r3, [r5, #0]
 800a816:	bd38      	pop	{r3, r4, r5, pc}
 800a818:	20000378 	.word	0x20000378

0800a81c <strncmp>:
 800a81c:	b510      	push	{r4, lr}
 800a81e:	b16a      	cbz	r2, 800a83c <strncmp+0x20>
 800a820:	3901      	subs	r1, #1
 800a822:	1884      	adds	r4, r0, r2
 800a824:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a828:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d103      	bne.n	800a838 <strncmp+0x1c>
 800a830:	42a0      	cmp	r0, r4
 800a832:	d001      	beq.n	800a838 <strncmp+0x1c>
 800a834:	2b00      	cmp	r3, #0
 800a836:	d1f5      	bne.n	800a824 <strncmp+0x8>
 800a838:	1a98      	subs	r0, r3, r2
 800a83a:	bd10      	pop	{r4, pc}
 800a83c:	4610      	mov	r0, r2
 800a83e:	e7fc      	b.n	800a83a <strncmp+0x1e>

0800a840 <__ascii_wctomb>:
 800a840:	b149      	cbz	r1, 800a856 <__ascii_wctomb+0x16>
 800a842:	2aff      	cmp	r2, #255	; 0xff
 800a844:	bf85      	ittet	hi
 800a846:	238a      	movhi	r3, #138	; 0x8a
 800a848:	6003      	strhi	r3, [r0, #0]
 800a84a:	700a      	strbls	r2, [r1, #0]
 800a84c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a850:	bf98      	it	ls
 800a852:	2001      	movls	r0, #1
 800a854:	4770      	bx	lr
 800a856:	4608      	mov	r0, r1
 800a858:	4770      	bx	lr

0800a85a <memmove>:
 800a85a:	4288      	cmp	r0, r1
 800a85c:	b510      	push	{r4, lr}
 800a85e:	eb01 0302 	add.w	r3, r1, r2
 800a862:	d807      	bhi.n	800a874 <memmove+0x1a>
 800a864:	1e42      	subs	r2, r0, #1
 800a866:	4299      	cmp	r1, r3
 800a868:	d00a      	beq.n	800a880 <memmove+0x26>
 800a86a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a86e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a872:	e7f8      	b.n	800a866 <memmove+0xc>
 800a874:	4283      	cmp	r3, r0
 800a876:	d9f5      	bls.n	800a864 <memmove+0xa>
 800a878:	1881      	adds	r1, r0, r2
 800a87a:	1ad2      	subs	r2, r2, r3
 800a87c:	42d3      	cmn	r3, r2
 800a87e:	d100      	bne.n	800a882 <memmove+0x28>
 800a880:	bd10      	pop	{r4, pc}
 800a882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a886:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a88a:	e7f7      	b.n	800a87c <memmove+0x22>

0800a88c <__malloc_lock>:
 800a88c:	4770      	bx	lr

0800a88e <__malloc_unlock>:
 800a88e:	4770      	bx	lr

0800a890 <_realloc_r>:
 800a890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a892:	4607      	mov	r7, r0
 800a894:	4614      	mov	r4, r2
 800a896:	460e      	mov	r6, r1
 800a898:	b921      	cbnz	r1, 800a8a4 <_realloc_r+0x14>
 800a89a:	4611      	mov	r1, r2
 800a89c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a8a0:	f7ff be00 	b.w	800a4a4 <_malloc_r>
 800a8a4:	b922      	cbnz	r2, 800a8b0 <_realloc_r+0x20>
 800a8a6:	f7ff fdaf 	bl	800a408 <_free_r>
 800a8aa:	4625      	mov	r5, r4
 800a8ac:	4628      	mov	r0, r5
 800a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b0:	f000 f814 	bl	800a8dc <_malloc_usable_size_r>
 800a8b4:	42a0      	cmp	r0, r4
 800a8b6:	d20f      	bcs.n	800a8d8 <_realloc_r+0x48>
 800a8b8:	4621      	mov	r1, r4
 800a8ba:	4638      	mov	r0, r7
 800a8bc:	f7ff fdf2 	bl	800a4a4 <_malloc_r>
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0f2      	beq.n	800a8ac <_realloc_r+0x1c>
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4622      	mov	r2, r4
 800a8ca:	f7ff f985 	bl	8009bd8 <memcpy>
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4638      	mov	r0, r7
 800a8d2:	f7ff fd99 	bl	800a408 <_free_r>
 800a8d6:	e7e9      	b.n	800a8ac <_realloc_r+0x1c>
 800a8d8:	4635      	mov	r5, r6
 800a8da:	e7e7      	b.n	800a8ac <_realloc_r+0x1c>

0800a8dc <_malloc_usable_size_r>:
 800a8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e0:	1f18      	subs	r0, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfbc      	itt	lt
 800a8e6:	580b      	ldrlt	r3, [r1, r0]
 800a8e8:	18c0      	addlt	r0, r0, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
